{"ast":null,"code":"'use strict';\n\nlet fs = require('fs');\nlet path = require('path');\nlet Encoder = require('../encoder').Encoder;\nlet Json = require('./json').Json;\nlet Text = require('./text').Text;\nlet FormEncoded = require('./form_encoded').FormEncoded;\nclass FormPart {\n  constructor(value, headers) {\n    this.headers = {};\n    this.value = value;\n    Object.keys(headers).forEach(key => {\n      // downcase, split into words, title case words, join into 'Header-Case'\n      this.headers[key.toLowerCase().split('-').map(word => {\n        return word[0].toUpperCase() + word.slice(1);\n      }).join('-')] = headers[key];\n    });\n  }\n}\nclass Multipart {\n  static get _CRLF() {\n    return '\\r\\n';\n  }\n  encode(request) {\n    let buffers = null;\n    let fileBuffers = [];\n    let valueBuffers = [];\n    let boundary = 'boundary' + Date.now();\n    request.headers['content-type'] += `; boundary=${boundary}`;\n    for (const key of Object.keys(request.body)) {\n      let val = request.body[key];\n      if (val instanceof fs.ReadStream) {\n        fileBuffers.push(this._filePart(key, val, boundary, request));\n      } else {\n        valueBuffers.push(this._formPart(key, val, boundary, request));\n      }\n    }\n    buffers = valueBuffers.concat(fileBuffers);\n    buffers.push(Buffer.from(`--${boundary}--`));\n    buffers.push(Buffer.from(Multipart._CRLF));\n    buffers.push(Buffer.from(Multipart._CRLF));\n    return Buffer.concat(buffers);\n  }\n  formatHeaders(headers) {\n    if (headers == null) {\n      return headers;\n    }\n    let formattedHeader = {};\n    Object.keys(headers).forEach(function (key) {\n      if (key != null) {\n        formattedHeader[key.toLowerCase()] = headers[key];\n      }\n    });\n    return formattedHeader;\n  }\n  decode() {\n    throw new Error('Multipart does not support deserialization.');\n  }\n  contentType() {\n    return /^multipart\\/.*/;\n  }\n  _filePart(key, readStream, boundary, request) {\n    return Buffer.concat([Buffer.from(this._partHeader(key, path.basename(readStream.path), boundary, request)), fs.readFileSync(readStream.path), Buffer.from(Multipart._CRLF)]);\n  }\n  _formPart(key, formPart, boundary, request) {\n    let formPartContentType = null;\n    let formPartValue = null;\n    let contentBuffer = null;\n    let encoder = new Encoder([new Json(), new Text(), new FormEncoded()]);\n    let formattedHeaders = this.formatHeaders(formPart.headers);\n    if (formPart instanceof FormPart) {\n      formPartContentType = formattedHeaders['content-type'];\n      formPartValue = formPart.value;\n    }\n    if (formPartContentType) {\n      let body = encoder.serializeRequest({\n        body: formPartValue,\n        headers: formattedHeaders\n      });\n      contentBuffer = Buffer.from(body + Multipart._CRLF);\n    } else {\n      contentBuffer = Buffer.from(formPart + Multipart._CRLF);\n    }\n    return Buffer.concat([Buffer.from(this._partHeader(key, null, boundary, request)), contentBuffer]);\n  }\n  _partHeader(key, filename, boundary, request) {\n    let formPart = request.body[key];\n    let part = `--${boundary}`;\n    part += Multipart._CRLF;\n    part += `Content-Disposition: form-data; name=\"${key}\"`;\n    if (filename) {\n      part += `; filename=\"${filename}\"`;\n      part += Multipart._CRLF;\n      part += `Content-Type: ${this._filetype(filename)}`;\n    }\n    if (formPart instanceof FormPart) {\n      let partHeaders = formPart.headers;\n      if (partHeaders['Content-Type'] === 'application/json') {\n        part += `; filename=\"${key}.json\"`;\n      }\n      for (const headerKey of Object.keys(partHeaders)) {\n        part += Multipart._CRLF;\n        part += headerKey + ': ' + partHeaders[headerKey];\n      }\n    }\n    part += `${Multipart._CRLF}${Multipart._CRLF}`;\n    return part;\n  }\n  _filetype(filename) {\n    let ext = path.extname(filename);\n    if (ext === '.jpeg' || ext === '.jpg') {\n      return 'image/jpeg';\n    } else if (ext === '.png') {\n      return 'image/png';\n    } else if (ext === '.gif') {\n      return 'image/gif';\n    } else if (ext === '.pdf') {\n      return 'application/pdf';\n    }\n    return 'application/octet-stream';\n  }\n}\nmodule.exports = {\n  Multipart: Multipart,\n  FormPart: FormPart\n};","map":{"version":3,"names":["fs","require","path","Encoder","Json","Text","FormEncoded","FormPart","constructor","value","headers","Object","keys","forEach","key","toLowerCase","split","map","word","toUpperCase","slice","join","Multipart","_CRLF","encode","request","buffers","fileBuffers","valueBuffers","boundary","Date","now","body","val","ReadStream","push","_filePart","_formPart","concat","Buffer","from","formatHeaders","formattedHeader","decode","Error","contentType","readStream","_partHeader","basename","readFileSync","formPart","formPartContentType","formPartValue","contentBuffer","encoder","formattedHeaders","serializeRequest","filename","part","_filetype","partHeaders","headerKey","ext","extname","module","exports"],"sources":["C:/Users/gonca/my-app/node_modules/@paypal/paypalhttp/lib/paypalhttp/serializer/multipart.js"],"sourcesContent":["'use strict';\n\nlet fs = require('fs');\nlet path = require('path');\nlet Encoder = require('../encoder').Encoder;\nlet Json = require('./json').Json;\nlet Text = require('./text').Text;\nlet FormEncoded = require('./form_encoded').FormEncoded;\n\nclass FormPart {\n  constructor(value, headers) {\n    this.headers = {};\n    this.value = value;\n\n    Object.keys(headers).forEach((key) => {\n      // downcase, split into words, title case words, join into 'Header-Case'\n      this.headers[key.toLowerCase().split('-').map((word) => { return word[0].toUpperCase() + word.slice(1); }).join('-')] = headers[key];\n    });\n  }\n}\n\nclass Multipart {\n  static get _CRLF() {\n    return '\\r\\n';\n  }\n\n  encode(request) {\n    let buffers = null;\n    let fileBuffers = [];\n    let valueBuffers = [];\n    let boundary = 'boundary' + Date.now();\n\n    request.headers['content-type'] += `; boundary=${boundary}`;\n\n    for (const key of Object.keys(request.body)) {\n      let val = request.body[key];\n\n      if (val instanceof fs.ReadStream) {\n        fileBuffers.push(this._filePart(key, val, boundary, request));\n      } else {\n        valueBuffers.push(this._formPart(key, val, boundary, request));\n      }\n    }\n\n    buffers = valueBuffers.concat(fileBuffers);\n\n    buffers.push(Buffer.from(`--${boundary}--`));\n    buffers.push(Buffer.from(Multipart._CRLF));\n    buffers.push(Buffer.from(Multipart._CRLF));\n\n    return Buffer.concat(buffers);\n  }\n\n  formatHeaders(headers) {\n    if (headers == null) {\n      return headers;\n    }\n    let formattedHeader = {};\n\n    Object.keys(headers).forEach(function (key) {\n      if (key != null) {\n        formattedHeader[key.toLowerCase()] = headers[key];\n      }\n    });\n    return formattedHeader;\n  }\n\n  decode() {\n    throw new Error('Multipart does not support deserialization.');\n  }\n\n  contentType() {\n    return /^multipart\\/.*/;\n  }\n\n  _filePart(key, readStream, boundary, request) {\n    return Buffer.concat([\n      Buffer.from(this._partHeader(key, path.basename(readStream.path), boundary, request)),\n      fs.readFileSync(readStream.path),\n      Buffer.from(Multipart._CRLF)\n    ]);\n  }\n\n  _formPart(key, formPart, boundary, request) {\n    let formPartContentType = null;\n    let formPartValue = null;\n    let contentBuffer = null;\n    let encoder = new Encoder([new Json(), new Text(), new FormEncoded()]);\n    let formattedHeaders = this.formatHeaders(formPart.headers);\n\n    if (formPart instanceof FormPart) {\n      formPartContentType = formattedHeaders['content-type'];\n      formPartValue = formPart.value;\n    }\n\n    if (formPartContentType) {\n      let body = encoder.serializeRequest({\n        body: formPartValue,\n        headers: formattedHeaders\n      });\n\n      contentBuffer = Buffer.from(body + Multipart._CRLF);\n    } else {\n      contentBuffer = Buffer.from(formPart + Multipart._CRLF);\n    }\n\n    return Buffer.concat([\n      Buffer.from(this._partHeader(key, null, boundary, request)),\n      contentBuffer\n    ]);\n  }\n\n  _partHeader(key, filename, boundary, request) {\n    let formPart = request.body[key];\n    let part = `--${boundary}`;\n\n    part += Multipart._CRLF;\n    part += `Content-Disposition: form-data; name=\"${key}\"`;\n\n    if (filename) {\n      part += `; filename=\"${filename}\"`;\n      part += Multipart._CRLF;\n      part += `Content-Type: ${this._filetype(filename)}`;\n    }\n\n    if (formPart instanceof FormPart) {\n      let partHeaders = formPart.headers;\n\n      if (partHeaders['Content-Type'] === 'application/json') {\n        part += `; filename=\"${key}.json\"`;\n      }\n\n      for (const headerKey of Object.keys(partHeaders)) {\n        part += Multipart._CRLF;\n        part += headerKey + ': ' + partHeaders[headerKey];\n      }\n    }\n\n    part += `${Multipart._CRLF}${Multipart._CRLF}`;\n\n    return part;\n  }\n\n  _filetype(filename) {\n    let ext = path.extname(filename);\n\n    if (ext === '.jpeg' || ext === '.jpg') {\n      return 'image/jpeg';\n    } else if (ext === '.png') {\n      return 'image/png';\n    } else if (ext === '.gif') {\n      return 'image/gif';\n    } else if (ext === '.pdf') {\n      return 'application/pdf';\n    }\n\n    return 'application/octet-stream';\n  }\n}\n\nmodule.exports = {\n  Multipart: Multipart,\n  FormPart: FormPart\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}