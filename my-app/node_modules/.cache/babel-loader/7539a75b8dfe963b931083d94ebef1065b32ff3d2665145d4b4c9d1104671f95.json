{"ast":null,"code":"import _slicedToArray from \"C:/Users/gonca/Downloads/my-app/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"C:/Users/gonca/Downloads/my-app/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"C:/Users/gonca/Downloads/my-app/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"C:/Users/gonca/Downloads/my-app/my-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/gonca/Downloads/my-app/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/gonca/Downloads/my-app/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark($fc36f9a046a9ce79$export$cfc14088dfefce5f);\nimport { useState as $8D3nr$useState, useMemo as $8D3nr$useMemo, useEffect as $8D3nr$useEffect, useCallback as $8D3nr$useCallback } from \"react\";\nimport { useLayoutEffect as $8D3nr$useLayoutEffect } from \"@react-aria/utils\";\nimport $8D3nr$swchelperssrc_define_propertymjs from \"@swc/helpers/src/_define_property.mjs\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nvar $c74cda7d31af1253$export$c84671f46d6a1ca = /*#__PURE__*/function () {\n  function $c74cda7d31af1253$export$c84671f46d6a1ca() {\n    _classCallCheck(this, $c74cda7d31af1253$export$c84671f46d6a1ca);\n  }\n  _createClass($c74cda7d31af1253$export$c84671f46d6a1ca, [{\n    key: \"shouldInvalidate\",\n    value:\n    /**\n    * Returns whether the layout should invalidate in response to\n    * visible rectangle changes. By default, it only invalidates\n    * when the collection view's size changes. Return true always\n    * to make the layout invalidate while scrolling (e.g. sticky headers).\n    */\n    function shouldInvalidate(newRect, oldRect) {\n      // By default, invalidate when the size changes\n      return newRect.width !== oldRect.width || newRect.height !== oldRect.height;\n    }\n    /**\n    * This method allows the layout to perform any pre-computation\n    * it needs to in order to prepare {@link LayoutInfo}s for retrieval.\n    * Called by the collection view before {@link getVisibleLayoutInfos}\n    * or {@link getLayoutInfo} are called.\n    */\n  }, {\n    key: \"validate\",\n    value: function validate(invalidationContext) {}\n    /**\n    * Returns a {@link DragTarget} describing a view at the given point to be dragged.\n    * Return `null` to cancel the drag. The default implementation returns the view at the given point.\n    * @param point The point at which the drag occurred.\n    */ // getDragTarget(point: Point): DragTarget | null {\n    //   let target = this.virtualizer.keyAtPoint(point);\n    //   if (!target) {\n    //     return null;\n    //   }\n    //   return {\n    //     type: 'item',\n    //     key: target\n    //   };\n    // }\n    /**\n    * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`\n    * to reject the drop. The dropped items will be inserted before the resulting target.\n    * @param point The point at which the drop occurred.\n    */ // getDropTarget(point: Point): DropTarget | null {\n    //   return null;\n    // }\n    /**\n    * Returns the starting attributes for an animated insertion.\n    * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.\n    * The default implementation just returns its input.\n    *\n    * @param layoutInfo The proposed LayoutInfo for this view.\n    */\n  }, {\n    key: \"getInitialLayoutInfo\",\n    value: function getInitialLayoutInfo(layoutInfo) {\n      return layoutInfo;\n    }\n    /**\n    * Returns the ending attributes for an animated removal.\n    * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}\n    * to the one returned by this method. The default implementation returns its input.\n    *\n    * @param layoutInfo The original LayoutInfo for this view.\n    */\n  }, {\n    key: \"getFinalLayoutInfo\",\n    value: function getFinalLayoutInfo(layoutInfo) {\n      return layoutInfo;\n    }\n  }]);\n  return $c74cda7d31af1253$export$c84671f46d6a1ca;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $d7fd61009c21d0bb$export$7e0eeb9da702a085 = /*#__PURE__*/function () {\n  /**\n  * @param type A string representing the view type. Should be `'item'` for item views.\n                          Other types are used by supplementary views.\n  * @param key The unique key for this view.\n  * @param rect The rectangle describing the size and position of this view.\n  */\n  function $d7fd61009c21d0bb$export$7e0eeb9da702a085(type, key, rect) {\n    _classCallCheck(this, $d7fd61009c21d0bb$export$7e0eeb9da702a085);\n    this.type = type;\n    this.key = key;\n    this.parentKey = null;\n    this.rect = rect;\n    this.estimatedSize = false;\n    this.isSticky = false;\n    this.opacity = 1;\n    this.transform = null;\n    this.zIndex = 0;\n    this.allowOverflow = false;\n  }\n  _createClass($d7fd61009c21d0bb$export$7e0eeb9da702a085, [{\n    key: \"copy\",\n    value:\n    /**\n    * Returns a copy of the LayoutInfo.\n    */\n    function copy() {\n      var res = new $d7fd61009c21d0bb$export$7e0eeb9da702a085(this.type, this.key, this.rect.copy());\n      res.estimatedSize = this.estimatedSize;\n      res.opacity = this.opacity;\n      res.transform = this.transform;\n      res.parentKey = this.parentKey;\n      res.isSticky = this.isSticky;\n      res.zIndex = this.zIndex;\n      res.allowOverflow = this.allowOverflow;\n      return res;\n    }\n  }]);\n  return $d7fd61009c21d0bb$export$7e0eeb9da702a085;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $3041db3296945e6e$export$baf26146a414f24a = /*#__PURE__*/function () {\n  function $3041db3296945e6e$export$baf26146a414f24a() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    _classCallCheck(this, $3041db3296945e6e$export$baf26146a414f24a);\n    this.x = x;\n    this.y = y;\n  }\n  _createClass($3041db3296945e6e$export$baf26146a414f24a, [{\n    key: \"copy\",\n    value:\n    /**\n    * Returns a copy of this point.\n    */\n    function copy() {\n      return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.y);\n    }\n    /**\n    * Checks if two points are equal.\n    */\n  }, {\n    key: \"equals\",\n    value: function equals(point) {\n      return this.x === point.x && this.y === point.y;\n    }\n    /**\n    * Returns true if this point is the origin.\n    */\n  }, {\n    key: \"isOrigin\",\n    value: function isOrigin() {\n      return this.x === 0 && this.y === 0;\n    }\n  }]);\n  return $3041db3296945e6e$export$baf26146a414f24a;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $60423f92c7f9ad87$export$c79fc6492f3af13d = /*#__PURE__*/function () {\n  function $60423f92c7f9ad87$export$c79fc6492f3af13d() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    _classCallCheck(this, $60423f92c7f9ad87$export$c79fc6492f3af13d);\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n  _createClass($60423f92c7f9ad87$export$c79fc6492f3af13d, [{\n    key: \"maxX\",\n    get:\n    /**\n    * The maximum x-coordinate in the rectangle.\n    */\n    function get() {\n      return this.x + this.width;\n    }\n    /**\n    * The maximum y-coordinate in the rectangle.\n    */\n  }, {\n    key: \"maxY\",\n    get: function get() {\n      return this.y + this.height;\n    }\n    /**\n    * The area of the rectangle.\n    */\n  }, {\n    key: \"area\",\n    get: function get() {\n      return this.width * this.height;\n    }\n    /**\n    * The top left corner of the rectangle.\n    */\n  }, {\n    key: \"topLeft\",\n    get: function get() {\n      return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.x, this.y);\n    }\n    /**\n    * The top right corner of the rectangle.\n    */\n  }, {\n    key: \"topRight\",\n    get: function get() {\n      return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.maxX, this.y);\n    }\n    /**\n    * The bottom left corner of the rectangle.\n    */\n  }, {\n    key: \"bottomLeft\",\n    get: function get() {\n      return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.x, this.maxY);\n    }\n    /**\n    * The bottom right corner of the rectangle.\n    */\n  }, {\n    key: \"bottomRight\",\n    get: function get() {\n      return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.maxX, this.maxY);\n    }\n    /**\n    * Returns whether this rectangle intersects another rectangle.\n    * @param rect - The rectangle to check.\n    */\n  }, {\n    key: \"intersects\",\n    value: function intersects(rect) {\n      return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;\n    }\n    /**\n    * Returns whether this rectangle fully contains another rectangle.\n    * @param rect - The rectangle to check.\n    */\n  }, {\n    key: \"containsRect\",\n    value: function containsRect(rect) {\n      return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;\n    }\n    /**\n    * Returns whether the rectangle contains the given point.\n    * @param point - The point to check.\n    */\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(point) {\n      return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;\n    }\n    /**\n    * Returns the first corner of this rectangle (from top to bottom, left to right)\n    * that is contained in the given rectangle, or null of the rectangles do not intersect.\n    * @param rect - The rectangle to check.\n    */\n  }, {\n    key: \"getCornerInRect\",\n    value: function getCornerInRect(rect) {\n      for (var _i = 0, _arr = [\"topLeft\", \"topRight\", \"bottomLeft\", \"bottomRight\"]; _i < _arr.length; _i++) {\n        var key = _arr[_i];\n        if (rect.containsPoint(this[key])) return key;\n      }\n      return null;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(rect) {\n      return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;\n    }\n  }, {\n    key: \"pointEquals\",\n    value: function pointEquals(point) {\n      return this.x === point.x && this.y === point.y;\n    }\n  }, {\n    key: \"sizeEquals\",\n    value: function sizeEquals(size) {\n      return this.width === size.width && this.height === size.height;\n    }\n    /**\n    * Returns the union of this Rect and another.\n    */\n  }, {\n    key: \"union\",\n    value: function union(other) {\n      var x = Math.min(this.x, other.x);\n      var y = Math.min(this.y, other.y);\n      var width = Math.max(this.maxX, other.maxX) - x;\n      var height = Math.max(this.maxY, other.maxY) - y;\n      return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, width, height);\n    }\n    /**\n    * Returns the intersection of this Rect with another.\n    * If the rectangles do not intersect, an all zero Rect is returned.\n    */\n  }, {\n    key: \"intersection\",\n    value: function intersection(other) {\n      if (!this.intersects(other)) return new $60423f92c7f9ad87$export$c79fc6492f3af13d(0, 0, 0, 0);\n      var x = Math.max(this.x, other.x);\n      var y = Math.max(this.y, other.y);\n      return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, Math.min(this.maxX, other.maxX) - x, Math.min(this.maxY, other.maxY) - y);\n    }\n    /**\n    * Returns a copy of this rectangle.\n    */\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new $60423f92c7f9ad87$export$c79fc6492f3af13d(this.x, this.y, this.width, this.height);\n    }\n  }]);\n  return $60423f92c7f9ad87$export$c79fc6492f3af13d;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec = /*#__PURE__*/function () {\n  function $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec() {\n    var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    _classCallCheck(this, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec);\n    this.width = width;\n    this.height = height;\n  }\n  _createClass($ee1bfa90a957fb8a$export$cb6da89c6af1a8ec, [{\n    key: \"copy\",\n    value:\n    /**\n    * Returns a copy of this size.\n    */\n    function copy() {\n      return new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec(this.width, this.height);\n    }\n    /**\n    * Returns whether this size is equal to another one.\n    */\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.width === other.width && this.height === other.height;\n    }\n    /**\n    * The total area of the Size.\n    */\n  }, {\n    key: \"area\",\n    get: function get() {\n      return this.width * this.height;\n    }\n  }]);\n  return $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $ad1d98aa8f0c31b4$var$KEY = 0;\nvar $ad1d98aa8f0c31b4$export$1a5223887c560441 = /*#__PURE__*/function () {\n  function $ad1d98aa8f0c31b4$export$1a5223887c560441(virtualizer) {\n    _classCallCheck(this, $ad1d98aa8f0c31b4$export$1a5223887c560441);\n    this.virtualizer = virtualizer;\n    this.key = ++$ad1d98aa8f0c31b4$var$KEY;\n  }\n  _createClass($ad1d98aa8f0c31b4$export$1a5223887c560441, [{\n    key: \"prepareForReuse\",\n    value:\n    /**\n    * Prepares the view for reuse. Called just before the view is removed from the DOM.\n    */\n    function prepareForReuse() {\n      this.content = null;\n      this.rendered = null;\n      this.layoutInfo = null;\n    }\n  }]);\n  return $ad1d98aa8f0c31b4$export$1a5223887c560441;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n// use high res timer if available\nvar $3eb131dcf37ad5f8$var$perf = typeof window !== \"undefined\" ? window.performance : null;\n// @ts-ignore\nvar $3eb131dcf37ad5f8$var$perfNow = $3eb131dcf37ad5f8$var$perf && ($3eb131dcf37ad5f8$var$perf.now || $3eb131dcf37ad5f8$var$perf.webkitNow || $3eb131dcf37ad5f8$var$perf.msNow || $3eb131dcf37ad5f8$var$perf.mozNow);\nvar $3eb131dcf37ad5f8$var$getTime = $3eb131dcf37ad5f8$var$perfNow ? $3eb131dcf37ad5f8$var$perfNow.bind($3eb131dcf37ad5f8$var$perf) : function () {\n  return Date.now ? Date.now() : new Date().getTime();\n};\nvar $3eb131dcf37ad5f8$var$fixTs;\nfunction $3eb131dcf37ad5f8$export$dc0b63720788090c(begin, end, duration, ease, fn) {\n  var canceled = false;\n  var raf_id;\n  var promise = new Promise(function (resolve) {\n    var start = $3eb131dcf37ad5f8$var$getTime();\n    var diffX = end.x - begin.x;\n    var diffY = end.y - begin.y;\n    raf_id = requestAnimationFrame(function run(t) {\n      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.\n      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n      if ($3eb131dcf37ad5f8$var$fixTs == null) $3eb131dcf37ad5f8$var$fixTs = t > 1e12 !== $3eb131dcf37ad5f8$var$getTime() > 1e12;\n      if ($3eb131dcf37ad5f8$var$fixTs) t = $3eb131dcf37ad5f8$var$getTime();\n      // check if we're done\n      var delta = t - start;\n      if (delta > duration) {\n        fn(end);\n        resolve();\n      } else {\n        // call frame callback after computing eased time and get the next frame\n        var proceed = fn(new (0, $3041db3296945e6e$export$baf26146a414f24a)(begin.x + diffX * ease(delta / duration), begin.y + diffY * ease(delta / duration)));\n        if (proceed !== false && !canceled) raf_id = requestAnimationFrame(run);\n      }\n    });\n  });\n  promise.cancel = function () {\n    canceled = true;\n    cancelAnimationFrame(raf_id);\n  };\n  return promise;\n}\nfunction $3eb131dcf37ad5f8$export$77860c106b4a6a2e(t) {\n  return t;\n}\nfunction $3eb131dcf37ad5f8$export$57636bb43b1ccbb0(t) {\n  return Math.sin(t * Math.PI / 2);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b) {\n  var res = new Set();\n  var _iterator = _createForOfIteratorHelper(a.keys()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      if (!b.has(key)) res.add(key);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return res;\n}\nfunction $fc36f9a046a9ce79$export$acaf96a27438246b(a, b) {\n  var toRemove = $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b);\n  var toAdd = $fc36f9a046a9ce79$export$37a26b283fd7740e(b, a);\n  var toUpdate = new Set();\n  var _iterator2 = _createForOfIteratorHelper(a.keys()),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var key = _step2.value;\n      if (b.has(key)) toUpdate.add(key);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return {\n    toRemove: toRemove,\n    toAdd: toAdd,\n    toUpdate: toUpdate\n  };\n}\nfunction $fc36f9a046a9ce79$export$cfc14088dfefce5f() {\n  var _len,\n    iterators,\n    _key,\n    _i2,\n    _iterators,\n    iterator,\n    _args = arguments;\n  return _regeneratorRuntime().wrap(function $fc36f9a046a9ce79$export$cfc14088dfefce5f$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        for (_len = _args.length, iterators = new Array(_len), _key = 0; _key < _len; _key++) {\n          iterators[_key] = _args[_key];\n        }\n        _i2 = 0, _iterators = iterators;\n      case 2:\n        if (!(_i2 < _iterators.length)) {\n          _context.next = 8;\n          break;\n        }\n        iterator = _iterators[_i2];\n        return _context.delegateYield(iterator, \"t0\", 5);\n      case 5:\n        _i2++;\n        _context.next = 2;\n        break;\n      case 8:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\nfunction $fc36f9a046a9ce79$export$6897c284b6f9f4dc(object) {\n  var res = {};\n  for (var key in object) res[object[key]] = key;\n  return res;\n}\nfunction $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64(a, b) {\n  if (a === b) return true;\n  if (a.size !== b.size) return false;\n  var _iterator3 = _createForOfIteratorHelper(a),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var key = _step3.value;\n      if (!b.has(key)) return false;\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return true;\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $364191b3decf3697$var$RollingAverage = /*#__PURE__*/function () {\n  function $364191b3decf3697$var$RollingAverage() {\n    _classCallCheck(this, $364191b3decf3697$var$RollingAverage);\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"count\", 0);\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"value\", 0);\n  }\n  _createClass($364191b3decf3697$var$RollingAverage, [{\n    key: \"addSample\",\n    value: function addSample(sample) {\n      this.count++;\n      this.value += (sample - this.value) / this.count;\n    }\n  }]);\n  return $364191b3decf3697$var$RollingAverage;\n}();\nvar $364191b3decf3697$export$4455ee6afb38dcbb = /*#__PURE__*/function () {\n  function $364191b3decf3697$export$4455ee6afb38dcbb() {\n    _classCallCheck(this, $364191b3decf3697$export$4455ee6afb38dcbb);\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"startTime\", 0);\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"averagePerf\", new $364191b3decf3697$var$RollingAverage());\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"averageTime\", new $364191b3decf3697$var$RollingAverage());\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"velocity\", new (0, $3041db3296945e6e$export$baf26146a414f24a)(5, 5));\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"overscanX\", new $364191b3decf3697$var$RollingAverage());\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"overscanY\", new $364191b3decf3697$var$RollingAverage());\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"visibleRect\", new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)());\n  }\n  _createClass($364191b3decf3697$export$4455ee6afb38dcbb, [{\n    key: \"setVisibleRect\",\n    value: function setVisibleRect(rect) {\n      var time = performance.now() - this.startTime;\n      if (time < 500) {\n        this.averageTime.addSample(time);\n        if (rect.x !== this.visibleRect.x && time > 0) this.velocity.x = (rect.x - this.visibleRect.x) / time;\n        if (rect.y !== this.visibleRect.y && time > 0) this.velocity.y = (rect.y - this.visibleRect.y) / time;\n      }\n      this.startTime = performance.now();\n      this.visibleRect = rect;\n    }\n  }, {\n    key: \"collectMetrics\",\n    value: function collectMetrics() {\n      var time = performance.now() - this.startTime;\n      if (time < 500) this.averagePerf.addSample(time);\n      if (this.visibleRect.height > 0) {\n        var o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));\n        this.overscanY.addSample(o);\n      }\n      if (this.visibleRect.width > 0) {\n        var o1 = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));\n        this.overscanX.addSample(o1);\n      }\n    }\n  }, {\n    key: \"getOverscannedRect\",\n    value: function getOverscannedRect() {\n      var overscanned = this.visibleRect.copy();\n      var overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n      if (this.velocity.y > 0) {\n        overscanned.y -= overscanY * 0.2;\n        overscanned.height += overscanY + overscanY * 0.2;\n      } else {\n        overscanned.y -= overscanY;\n        overscanned.height += overscanY + overscanY * 0.2;\n      }\n      var overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n      if (this.velocity.x > 0) {\n        overscanned.x -= overscanX * 0.2;\n        overscanned.width += overscanX + overscanX * 0.2;\n      } else {\n        overscanned.x -= overscanX;\n        overscanned.width += overscanX + overscanX * 0.2;\n      }\n      return overscanned;\n    }\n  }]);\n  return $364191b3decf3697$export$4455ee6afb38dcbb;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $8e135e531d8dcb66$export$febc5573c75cefb0 = /*#__PURE__*/_createClass(function $8e135e531d8dcb66$export$febc5573c75cefb0() {\n  _classCallCheck(this, $8e135e531d8dcb66$export$febc5573c75cefb0);\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"level\", 0);\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"actions\", []);\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"animated\", true);\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"initialMap\", new Map());\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"finalMap\", new Map());\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"initialLayoutInfo\", new Map());\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"finalLayoutInfo\", new Map());\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"removed\", new Map());\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"toRemove\", new Map());\n});\nvar $38b9490c1cca8fc4$export$89be5a243e59c4b2 = /*#__PURE__*/function () {\n  function $38b9490c1cca8fc4$export$89be5a243e59c4b2() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, $38b9490c1cca8fc4$export$89be5a243e59c4b2);\n    this._contentSize = new (0, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec)();\n    this._visibleRect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)();\n    this._reusableViews = {};\n    this._visibleLayoutInfos = new Map();\n    this._visibleViews = new Map();\n    this._renderedContent = new WeakMap();\n    this._children = new Set();\n    this._invalidationContext = null;\n    this._overscanManager = new (0, $364191b3decf3697$export$4455ee6afb38dcbb)();\n    this._persistedKeys = new Set();\n    this._scrollAnimation = null;\n    this._isScrolling = false;\n    this._sizeUpdateQueue = new Map();\n    this._animatedContentOffset = new (0, $3041db3296945e6e$export$baf26146a414f24a)(0, 0);\n    this._transaction = null;\n    this._nextTransaction = null;\n    this._transactionQueue = [];\n    var _options_transitionDuration;\n    // Set options from passed object if given\n    this.transitionDuration = (_options_transitionDuration = options.transitionDuration) !== null && _options_transitionDuration !== void 0 ? _options_transitionDuration : 500;\n    this.anchorScrollPosition = options.anchorScrollPosition || false;\n    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n    this.shouldOverscan = options.shouldOverscan !== false;\n    for (var _i3 = 0, _arr2 = [\"delegate\", \"size\", \"layout\", \"collection\"]; _i3 < _arr2.length; _i3++) {\n      var key = _arr2[_i3];\n      if (options[key]) this[key] = options[key];\n    }\n  }\n  _createClass($38b9490c1cca8fc4$export$89be5a243e59c4b2, [{\n    key: \"_setContentSize\",\n    value: function _setContentSize(size) {\n      this._contentSize = size;\n      this.delegate.setContentSize(size);\n    }\n  }, {\n    key: \"_setContentOffset\",\n    value: function _setContentOffset(offset) {\n      var rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n      this.delegate.setVisibleRect(rect);\n    }\n    /**\n    * Get the size of the scrollable content.\n    */\n  }, {\n    key: \"contentSize\",\n    get: function get() {\n      return this._contentSize;\n    }\n    /**\n    * Get the collection view's currently visible rectangle.\n    */\n  }, {\n    key: \"visibleRect\",\n    get: function get() {\n      return this._visibleRect;\n    }\n    /**\n    * Set the collection view's currently visible rectangle.\n    */,\n    set: function set(rect) {\n      this._setVisibleRect(rect);\n    }\n  }, {\n    key: \"_setVisibleRect\",\n    value: function _setVisibleRect(rect) {\n      var forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var current = this._visibleRect;\n      // Ignore if the rects are equal\n      if (rect.equals(current)) return;\n      if (this.shouldOverscan) this._overscanManager.setVisibleRect(rect);\n      var shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n      this._resetAnimatedContentOffset();\n      this._visibleRect = rect;\n      if (shouldInvalidate) this.relayout({\n        offsetChanged: !rect.pointEquals(current),\n        sizeChanged: !rect.sizeEquals(current)\n      });else this.updateSubviews(forceUpdate);\n    }\n  }, {\n    key: \"collection\",\n    get: function get() {\n      return this._collection;\n    },\n    set: function set(data) {\n      this._setData(data);\n    }\n  }, {\n    key: \"_setData\",\n    value: function _setData(data) {\n      var _this = this;\n      if (data === this._collection) return;\n      if (this._collection) this._runTransaction(function () {\n        _this._collection = data;\n      }, this.transitionDuration > 0);else {\n        this._collection = data;\n        this.reloadData();\n      }\n    }\n    /**\n    * Reloads the data from the data source and relayouts the collection view.\n    * Does not animate any changes. Equivalent to re-assigning the same data source\n    * to the collection view.\n    */\n  }, {\n    key: \"reloadData\",\n    value: function reloadData() {\n      this.relayout({\n        contentChanged: true\n      });\n    }\n    /**\n    * Returns the item with the given key.\n    */\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this._collection ? this._collection.getItem(key) : null;\n    }\n    /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  }, {\n    key: \"persistedKeys\",\n    get: function get() {\n      return this._persistedKeys;\n    }\n    /** The set of persisted keys are always present in the DOM, even if not currently in view. */,\n    set: function set(persistedKeys) {\n      if (!(0, $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64)(persistedKeys, this._persistedKeys)) {\n        this._persistedKeys = persistedKeys;\n        this.updateSubviews();\n      }\n    }\n    /** Returns whether the given key, or an ancestor, is persisted. */\n  }, {\n    key: \"isPersistedKey\",\n    value: function isPersistedKey(key) {\n      // Quick check if the key is directly in the set of persisted keys.\n      if (this._persistedKeys.has(key)) return true;\n      // If not, check if the key is an ancestor of any of the persisted keys.\n      var _iterator4 = _createForOfIteratorHelper(this._persistedKeys),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var k = _step4.value;\n          while (k != null) {\n            var layoutInfo = this.layout.getLayoutInfo(k);\n            if (!layoutInfo) break;\n            k = layoutInfo.parentKey;\n            if (k === key) return true;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return false;\n    }\n    /**\n    * Get the collection view's layout.\n    */\n  }, {\n    key: \"layout\",\n    get: function get() {\n      return this._layout;\n    }\n    /**\n    * Set the collection view's layout.\n    */,\n    set: function set(layout) {\n      this.setLayout(layout);\n    }\n    /**\n    * Sets the collection view's layout, optionally with an animated transition\n    * from the current layout to the new layout.\n    * @param layout The layout to switch to.\n    * @param animated Whether to animate the layout change.\n    */\n  }, {\n    key: \"setLayout\",\n    value: function setLayout(layout) {\n      var _this2 = this;\n      var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (layout === this._layout) return;\n      var applyLayout = function applyLayout() {\n        if (_this2._layout)\n          // @ts-ignore\n          _this2._layout.virtualizer = null;\n        layout.virtualizer = _this2;\n        _this2._layout = layout;\n      };\n      if (animated)\n        // Animated layout transitions are really simple, thanks to our transaction support.\n        // We just set the layout inside a transaction action, which runs after the initial\n        // layout infos for the animation are retrieved from the previous layout. Then, the\n        // final layout infos are retrieved from the new layout, and animations occur.\n        this._runTransaction(applyLayout);else {\n        applyLayout();\n        this.relayout();\n      }\n    }\n  }, {\n    key: \"_getReuseType\",\n    value: function _getReuseType(layoutInfo, content) {\n      if (layoutInfo.type === \"item\" && content) {\n        var type = this.delegate.getType ? this.delegate.getType(content) : \"item\";\n        var reuseType = type === \"item\" ? \"item\" : layoutInfo.type + \"_\" + type;\n        return {\n          type: type,\n          reuseType: reuseType\n        };\n      }\n      return {\n        type: layoutInfo.type,\n        reuseType: layoutInfo.type\n      };\n    }\n  }, {\n    key: \"getReusableView\",\n    value: function getReusableView(layoutInfo) {\n      var content = this.getItem(layoutInfo.key);\n      var _this$_getReuseType = this._getReuseType(layoutInfo, content),\n        reuseType = _this$_getReuseType.reuseType;\n      if (!this._reusableViews[reuseType]) this._reusableViews[reuseType] = [];\n      var reusable = this._reusableViews[reuseType];\n      var view = reusable.length > 0 ? reusable.pop() : new (0, $ad1d98aa8f0c31b4$export$1a5223887c560441)(this);\n      view.viewType = reuseType;\n      if (!this._animatedContentOffset.isOrigin()) {\n        layoutInfo = layoutInfo.copy();\n        layoutInfo.rect.x += this._animatedContentOffset.x;\n        layoutInfo.rect.y += this._animatedContentOffset.y;\n      }\n      view.layoutInfo = layoutInfo;\n      this._renderView(view);\n      return view;\n    }\n  }, {\n    key: \"_renderView\",\n    value: function _renderView(reusableView) {\n      var _reusableView$layoutI = reusableView.layoutInfo,\n        type = _reusableView$layoutI.type,\n        key = _reusableView$layoutI.key;\n      reusableView.content = this.getItem(key);\n      reusableView.rendered = this._renderContent(type, reusableView.content);\n    }\n  }, {\n    key: \"_renderContent\",\n    value: function _renderContent(type, content) {\n      var cached = this._renderedContent.get(content);\n      if (cached != null) return cached;\n      var rendered = this.delegate.renderView(type, content);\n      if (content) this._renderedContent.set(content, rendered);\n      return rendered;\n    }\n    /**\n    * Returns an array of all currently visible views, including both\n    * item views and supplementary views.\n    */\n  }, {\n    key: \"visibleViews\",\n    get: function get() {\n      return Array.from(this._visibleViews.values());\n    }\n    /**\n    * Gets the visible view for the given type and key. Returns null if\n    * the view is not currently visible.\n    *\n    * @param key The key of the view to retrieve.\n    */\n  }, {\n    key: \"getView\",\n    value: function getView(key) {\n      return this._visibleViews.get(key) || null;\n    }\n    /**\n    * Returns an array of visible views matching the given type.\n    * @param type The view type to find.\n    */\n  }, {\n    key: \"getViewsOfType\",\n    value: function getViewsOfType(type) {\n      return this.visibleViews.filter(function (v) {\n        return v.layoutInfo && v.layoutInfo.type === type;\n      });\n    }\n    /**\n    * Returns the key for the given view. Returns null\n    * if the view is not currently visible.\n    */\n  }, {\n    key: \"keyForView\",\n    value: function keyForView(view) {\n      if (view && view.layoutInfo) return view.layoutInfo.key;\n      return null;\n    }\n    /**\n    * Returns the key for the item view currently at the given point.\n    */\n  }, {\n    key: \"keyAtPoint\",\n    value: function keyAtPoint(point) {\n      var rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(point.x, point.y, 1, 1);\n      var layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n      // Layout may return multiple layout infos in the case of\n      // persisted keys, so find the first one that actually intersects.\n      var _iterator5 = _createForOfIteratorHelper(layoutInfos),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var layoutInfo = _step5.value;\n          if (layoutInfo.rect.intersects(rect)) return layoutInfo.key;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return null;\n    }\n    /**\n    * Cleanup for when the Virtualizer will be unmounted.\n    */\n  }, {\n    key: \"willUnmount\",\n    value: function willUnmount() {\n      cancelAnimationFrame(this._relayoutRaf);\n    }\n    /**\n    * Triggers a layout invalidation, and updates the visible subviews.\n    */\n  }, {\n    key: \"relayout\",\n    value: function relayout() {\n      var _this3 = this;\n      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // Ignore relayouts while animating the scroll position\n      if (this._scrollAnimation || typeof requestAnimationFrame === \"undefined\") return;\n      // If we already scheduled a relayout, extend the invalidation\n      // context so we coalesce multiple relayouts in the same frame.\n      if (this._invalidationContext) {\n        Object.assign(this._invalidationContext, context);\n        return;\n      }\n      this._invalidationContext = context;\n      this._relayoutRaf = requestAnimationFrame(function () {\n        _this3._relayoutRaf = null;\n        _this3.relayoutNow();\n      });\n    }\n    /**\n    * Performs a relayout immediately. Prefer {@link relayout} over this method\n    * where possible, since it coalesces multiple layout passes in the same tick.\n    */\n  }, {\n    key: \"relayoutNow\",\n    value: function relayoutNow() {\n      var _this4 = this;\n      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._invalidationContext || {};\n      // Cancel the scheduled relayout, since we're doing it now.\n      if (this._relayoutRaf) {\n        cancelAnimationFrame(this._relayoutRaf);\n        this._relayoutRaf = null;\n        // Update the provided context with the current invalidationContext since we are cancelling\n        // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)\n        context = _objectSpread(_objectSpread({}, this._invalidationContext), context);\n      }\n      // Reset the invalidation context\n      this._invalidationContext = null;\n      // Do nothing if we don't have a layout or content, or we are\n      // in the middle of an animated scroll transition.\n      if (!this.layout || !this._collection || this._scrollAnimation) return;\n      var scrollAnchor = this._getScrollAnchor();\n      // Trigger the beforeLayout hook, if provided\n      if (typeof context.beforeLayout === \"function\") context.beforeLayout();\n      // Validate the layout\n      this.layout.validate(context);\n      this._setContentSize(this.layout.getContentSize());\n      // Trigger the afterLayout hook, if provided\n      if (typeof context.afterLayout === \"function\") context.afterLayout();\n      // Adjust scroll position based on scroll anchor, and constrain.\n      // If the content changed, scroll to the top.\n      var visibleRect = this.getVisibleRect();\n      var restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n      var contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n      var contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n      contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n      contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n      var hasLayoutUpdates = false;\n      if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n        // If this is an animated relayout, we do not immediately scroll because it would be jittery.\n        // Save the difference between the current and new content offsets, and apply it to the\n        // individual content items instead. At the end of the animation, we'll reset and set the\n        // scroll offset for real. This ensures jitter-free animation since we don't need to sync\n        // the scroll animation and the content animation.\n        if (context.animated || !this._animatedContentOffset.isOrigin()) {\n          this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n          this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n          hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n        } else this._setContentOffset(new (0, $3041db3296945e6e$export$baf26146a414f24a)(contentOffsetX, contentOffsetY));\n      } else hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n      // Apply layout infos, unless this is coming from an animated transaction\n      if (!(context.transaction && context.animated)) this._applyLayoutInfos();\n      // Wait for animations, and apply the afterAnimation hook, if provided\n      if (context.animated && hasLayoutUpdates) {\n        this._enableTransitions();\n        var done = function done() {\n          _this4._disableTransitions();\n          // Reset scroll position after animations (see above comment).\n          if (!_this4._animatedContentOffset.isOrigin()) {\n            // Get the content offset to scroll to, taking _animatedContentOffset into account.\n            var _this4$getVisibleRect = _this4.getVisibleRect(),\n              x = _this4$getVisibleRect.x,\n              y = _this4$getVisibleRect.y;\n            _this4._resetAnimatedContentOffset();\n            _this4._setContentOffset(new (0, $3041db3296945e6e$export$baf26146a414f24a)(x, y));\n          }\n          if (typeof context.afterAnimation === \"function\") context.afterAnimation();\n        };\n        // Sometimes the animation takes slightly longer than expected.\n        setTimeout(done, this.transitionDuration + 100);\n        return;\n      } else if (typeof context.afterAnimation === \"function\") context.afterAnimation();\n    }\n    /**\n    * Corrects DOM order of visible views to match item order of collection.\n    */\n  }, {\n    key: \"_correctItemOrder\",\n    value: function _correctItemOrder() {\n      // Defer until after scrolling and animated transactions are complete\n      if (this._isScrolling || this._transaction) return;\n      var _iterator6 = _createForOfIteratorHelper(this._visibleLayoutInfos.keys()),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var key = _step6.value;\n          var view = this._visibleViews.get(key);\n          this._children.delete(view);\n          this._children.add(view);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"_enableTransitions\",\n    value: function _enableTransitions() {\n      this.delegate.beginAnimations();\n    }\n  }, {\n    key: \"_disableTransitions\",\n    value: function _disableTransitions() {\n      this.delegate.endAnimations();\n    }\n  }, {\n    key: \"_getScrollAnchor\",\n    value: function _getScrollAnchor() {\n      if (!this.anchorScrollPosition) return null;\n      var visibleRect = this.getVisibleRect();\n      // Ask the delegate to provide a scroll anchor, if possible\n      if (this.delegate.getScrollAnchor) {\n        var key = this.delegate.getScrollAnchor(visibleRect);\n        if (key != null) {\n          var layoutInfo = this.layout.getLayoutInfo(key);\n          var corner = layoutInfo.rect.getCornerInRect(visibleRect);\n          if (corner) {\n            var key1 = layoutInfo.key;\n            var offset = layoutInfo.rect[corner].y - visibleRect.y;\n            return {\n              key: key1,\n              layoutInfo: layoutInfo,\n              corner: corner,\n              offset: offset\n            };\n          }\n        }\n      }\n      // No need to anchor the scroll position if it is at the top\n      if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) return null;\n      // Find a view with a visible corner that has the smallest distance to the top of the collection view\n      var cornerAnchor = null;\n      var _iterator7 = _createForOfIteratorHelper(this._visibleViews),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _step7$value = _slicedToArray(_step7.value, 2),\n            key2 = _step7$value[0],\n            view = _step7$value[1];\n          var layoutInfo1 = view.layoutInfo;\n          if (layoutInfo1 && layoutInfo1.rect.area > 0) {\n            var corner1 = layoutInfo1.rect.getCornerInRect(visibleRect);\n            if (corner1) {\n              var offset1 = layoutInfo1.rect[corner1].y - visibleRect.y;\n              if (!cornerAnchor || offset1 < cornerAnchor.offset) cornerAnchor = {\n                key: key2,\n                layoutInfo: layoutInfo1,\n                corner: corner1,\n                offset: offset1\n              };\n            }\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      return cornerAnchor;\n    }\n  }, {\n    key: \"_restoreScrollAnchor\",\n    value: function _restoreScrollAnchor(scrollAnchor, context) {\n      var contentOffset = this.getVisibleRect();\n      if (scrollAnchor) {\n        var _context_transaction;\n        var finalAnchor = ((_context_transaction = context.transaction) === null || _context_transaction === void 0 ? void 0 : _context_transaction.animated) ? context.transaction.finalMap.get(scrollAnchor.key) : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n        if (finalAnchor) {\n          var adjustment = finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y - scrollAnchor.offset;\n          contentOffset.y += adjustment;\n        }\n      }\n      return contentOffset;\n    }\n  }, {\n    key: \"getVisibleRect\",\n    value: function getVisibleRect() {\n      var v = this.visibleRect;\n      var x = v.x - this._animatedContentOffset.x;\n      var y = v.y - this._animatedContentOffset.y;\n      return new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(x, y, v.width, v.height);\n    }\n  }, {\n    key: \"getVisibleLayoutInfos\",\n    value: function getVisibleLayoutInfos() {\n      var rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n      this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n      return this._visibleLayoutInfos;\n    }\n  }, {\n    key: \"_getLayoutInfoMap\",\n    value: function _getLayoutInfoMap(rect) {\n      var copy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n      var map = new Map();\n      var _iterator8 = _createForOfIteratorHelper(layoutInfos),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var layoutInfo = _step8.value;\n          if (copy) layoutInfo = layoutInfo.copy();\n          map.set(layoutInfo.key, layoutInfo);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      return map;\n    }\n  }, {\n    key: \"updateSubviews\",\n    value: function updateSubviews() {\n      var _this5 = this;\n      var forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!this._collection) return;\n      var visibleLayoutInfos = this.getVisibleLayoutInfos();\n      var currentlyVisible = this._visibleViews;\n      var toAdd, toRemove, toUpdate;\n      // If this is a force update, remove and re-add all views.\n      // Otherwise, find and update the diff.\n      if (forceUpdate) {\n        toAdd = visibleLayoutInfos;\n        toRemove = currentlyVisible;\n        toUpdate = new Set();\n      } else {\n        var _ref = (0, $fc36f9a046a9ce79$export$acaf96a27438246b)(currentlyVisible, visibleLayoutInfos);\n        toAdd = _ref.toAdd;\n        toRemove = _ref.toRemove;\n        toUpdate = _ref.toUpdate;\n        var _iterator9 = _createForOfIteratorHelper(toUpdate),\n          _step9;\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var key = _step9.value;\n            var view = currentlyVisible.get(key);\n            if (!view || !view.layoutInfo) continue;\n            var item = this.getItem(visibleLayoutInfos.get(key).key);\n            if (view.content === item) toUpdate.delete(key);else {\n              // If the view type changes, delete and recreate the view instead of updating\n              var _this$_getReuseType2 = this._getReuseType(view.layoutInfo, item),\n                reuseType = _this$_getReuseType2.reuseType;\n              if (view.viewType !== reuseType) {\n                toUpdate.delete(key);\n                toAdd.add(key);\n                toRemove.add(key);\n              }\n            }\n          }\n          // We are done if the sets are equal\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n        if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n          if (this._transaction) this._applyLayoutInfos();\n          return;\n        }\n      }\n      // Track views that should be removed. They are not removed from\n      // the DOM immediately, since we may reuse and need to re-insert\n      // them back into the DOM anyway.\n      var removed = new Set();\n      var _iterator10 = _createForOfIteratorHelper(toRemove.keys()),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var key1 = _step10.value;\n          var view1 = this._visibleViews.get(key1);\n          if (view1) {\n            removed.add(view1);\n            this._visibleViews.delete(key1);\n            // If we are in the middle of a transaction, wait until the end\n            // of the animations to remove the views from the DOM. Also means\n            // we can't reuse those views immediately.\n            if (this._transaction) this._transaction.toRemove.set(key1, view1);else this.reuseView(view1);\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      var _iterator11 = _createForOfIteratorHelper(toAdd.keys()),\n        _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var key2 = _step11.value;\n          var layoutInfo = visibleLayoutInfos.get(key2);\n          var view2 = void 0;\n          // If we're in a transaction, and a layout change happens\n          // during the animations such that a view that was going\n          // to be removed is now not, we don't create a new view\n          // since the old one is still in the DOM, marked as toRemove.\n          if (this._transaction) {\n            // if transaction, get initial layout attributes for the animation\n            if (this._transaction.initialLayoutInfo.has(key2)) layoutInfo = this._transaction.initialLayoutInfo.get(key2);\n            view2 = this._transaction.toRemove.get(key2);\n            if (view2) {\n              this._transaction.toRemove.delete(key2);\n              this._applyLayoutInfo(view2, layoutInfo);\n            }\n          }\n          if (!view2) {\n            // Create or reuse a view for this row\n            view2 = this.getReusableView(layoutInfo);\n            // Add the view to the DOM if needed\n            if (!removed.has(view2)) this._children.add(view2);\n          }\n          this._visibleViews.set(key2, view2);\n          removed.delete(view2);\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n      var _iterator12 = _createForOfIteratorHelper(toUpdate),\n        _step12;\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var key3 = _step12.value;\n          var view3 = currentlyVisible.get(key3);\n          this._renderedContent.delete(key3);\n          this._renderView(view3);\n        }\n        // Remove the remaining rows to delete from the DOM\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n      if (!this._transaction) this.removeViews(removed);\n      this._correctItemOrder();\n      this._flushVisibleViews();\n      var hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n      if (hasLayoutUpdates) requestAnimationFrame(function () {\n        // If we're in a transaction, apply animations to visible views\n        // and \"to be removed\" views, which animate off screen.\n        if (_this5._transaction) requestAnimationFrame(function () {\n          return _this5._applyLayoutInfos();\n        });\n      });\n      return hasLayoutUpdates;\n    }\n  }, {\n    key: \"afterRender\",\n    value: function afterRender() {\n      if (this.shouldOverscan) this._overscanManager.collectMetrics();\n    }\n  }, {\n    key: \"_flushVisibleViews\",\n    value: function _flushVisibleViews() {\n      var _this6 = this;\n      // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy\n      // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy\n      // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper\n      // method to build the final tree.\n      var viewsByParentKey = new Map([[null, []]]);\n      var _iterator13 = _createForOfIteratorHelper(this._children),\n        _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var view = _step13.value;\n          var _view_layoutInfo, _viewsByParentKey_get, _view_layoutInfo1, _view_layoutInfo2, _view_layoutInfo3;\n          if (((_view_layoutInfo = view.layoutInfo) === null || _view_layoutInfo === void 0 ? void 0 : _view_layoutInfo.parentKey) != null && !viewsByParentKey.has(view.layoutInfo.parentKey)) viewsByParentKey.set(view.layoutInfo.parentKey, []);\n          (_viewsByParentKey_get = viewsByParentKey.get((_view_layoutInfo1 = view.layoutInfo) === null || _view_layoutInfo1 === void 0 ? void 0 : _view_layoutInfo1.parentKey)) === null || _viewsByParentKey_get === void 0 ? void 0 : _viewsByParentKey_get.push(view);\n          if (!viewsByParentKey.has((_view_layoutInfo2 = view.layoutInfo) === null || _view_layoutInfo2 === void 0 ? void 0 : _view_layoutInfo2.key)) viewsByParentKey.set((_view_layoutInfo3 = view.layoutInfo) === null || _view_layoutInfo3 === void 0 ? void 0 : _view_layoutInfo3.key, []);\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n      var buildTree = function buildTree(parent, views) {\n        return views.map(function (view) {\n          var children = viewsByParentKey.get(view.layoutInfo.key);\n          return _this6.delegate.renderWrapper(parent, view, children, function (childViews) {\n            return buildTree(view, childViews);\n          });\n        });\n      };\n      var children = buildTree(null, viewsByParentKey.get(null));\n      this.delegate.setVisibleViews(children);\n    }\n  }, {\n    key: \"_applyLayoutInfo\",\n    value: function _applyLayoutInfo(view, layoutInfo) {\n      if (view.layoutInfo === layoutInfo) return false;\n      view.layoutInfo = layoutInfo;\n      return true;\n    }\n  }, {\n    key: \"_applyLayoutInfos\",\n    value: function _applyLayoutInfos() {\n      var updated = false;\n      // Apply layout infos to visible views\n      var _iterator14 = _createForOfIteratorHelper(this._visibleViews.values()),\n        _step14;\n      try {\n        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n          var view = _step14.value;\n          var cur = view.layoutInfo;\n          if ((cur === null || cur === void 0 ? void 0 : cur.key) != null) {\n            var layoutInfo = this.layout.getLayoutInfo(cur.key);\n            if (this._applyLayoutInfo(view, layoutInfo)) updated = true;\n          }\n        }\n        // Apply final layout infos for views that will be removed\n      } catch (err) {\n        _iterator14.e(err);\n      } finally {\n        _iterator14.f();\n      }\n      if (this._transaction) {\n        var _iterator15 = _createForOfIteratorHelper(this._transaction.toRemove.values()),\n          _step15;\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n            var view1 = _step15.value;\n            var cur1 = view1.layoutInfo;\n            if ((cur1 === null || cur1 === void 0 ? void 0 : cur1.key) != null) {\n              var layoutInfo1 = this.layout.getLayoutInfo(cur1.key);\n              if (this._applyLayoutInfo(view1, layoutInfo1)) updated = true;\n            }\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n        var _iterator16 = _createForOfIteratorHelper(this._transaction.removed.values()),\n          _step16;\n        try {\n          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n            var view2 = _step16.value;\n            var cur2 = view2.layoutInfo;\n            var layoutInfo2 = this._transaction.finalLayoutInfo.get(cur2.key) || cur2;\n            layoutInfo2 = this.layout.getFinalLayoutInfo(layoutInfo2.copy());\n            if (this._applyLayoutInfo(view2, layoutInfo2)) updated = true;\n          }\n        } catch (err) {\n          _iterator16.e(err);\n        } finally {\n          _iterator16.f();\n        }\n      }\n      if (updated) this._flushVisibleViews();\n    }\n  }, {\n    key: \"_hasLayoutUpdates\",\n    value: function _hasLayoutUpdates() {\n      if (!this._transaction) return false;\n      var _iterator17 = _createForOfIteratorHelper(this._visibleViews.values()),\n        _step17;\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var view = _step17.value;\n          var cur = view.layoutInfo;\n          if (!cur) return true;\n          var layoutInfo = this.layout.getLayoutInfo(cur.key);\n          if (\n          // Uses equals rather than pointEquals so that width/height changes are taken into account\n          !cur.rect.equals(layoutInfo.rect) || cur.opacity !== layoutInfo.opacity || cur.transform !== layoutInfo.transform) return true;\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n      return false;\n    }\n  }, {\n    key: \"reuseView\",\n    value: function reuseView(view) {\n      view.prepareForReuse();\n      this._reusableViews[view.viewType].push(view);\n    }\n  }, {\n    key: \"removeViews\",\n    value: function removeViews(toRemove) {\n      var _iterator18 = _createForOfIteratorHelper(toRemove),\n        _step18;\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var view = _step18.value;\n          this._children.delete(view);\n        }\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n    }\n  }, {\n    key: \"updateItemSize\",\n    value: function updateItemSize(key, size) {\n      // TODO: we should be able to invalidate a single index path\n      // @ts-ignore\n      if (!this.layout.updateItemSize) return;\n      // If the scroll position is currently animating, add the update\n      // to a queue to be processed after the animation is complete.\n      if (this._scrollAnimation) {\n        this._sizeUpdateQueue.set(key, size);\n        return;\n      }\n      // @ts-ignore\n      var changed = this.layout.updateItemSize(key, size);\n      if (changed) this.relayout();\n    }\n  }, {\n    key: \"startScrolling\",\n    value: function startScrolling() {\n      this._isScrolling = true;\n    }\n  }, {\n    key: \"endScrolling\",\n    value: function endScrolling() {\n      this._isScrolling = false;\n      this._correctItemOrder();\n      this._flushVisibleViews();\n    }\n  }, {\n    key: \"_resetAnimatedContentOffset\",\n    value: function _resetAnimatedContentOffset() {\n      // Reset the animated content offset of subviews. See comment in relayoutNow for details.\n      if (!this._animatedContentOffset.isOrigin()) {\n        this._animatedContentOffset = new (0, $3041db3296945e6e$export$baf26146a414f24a)(0, 0);\n        this._applyLayoutInfos();\n      }\n    }\n    /**\n    * Scrolls the item with the given key into view, optionally with an animation.\n    * @param key The key of the item to scroll into view.\n    * @param duration The duration of the scroll animation.\n    */\n  }, {\n    key: \"scrollToItem\",\n    value: function scrollToItem(key, options) {\n      // key can be 0, so check if null or undefined\n      if (key == null) return;\n      var layoutInfo = this.layout.getLayoutInfo(key);\n      if (!layoutInfo) return;\n      var _options$duration = options.duration,\n        duration = _options$duration === void 0 ? 300 : _options$duration,\n        _options$shouldScroll = options.shouldScrollX,\n        shouldScrollX = _options$shouldScroll === void 0 ? true : _options$shouldScroll,\n        _options$shouldScroll2 = options.shouldScrollY,\n        shouldScrollY = _options$shouldScroll2 === void 0 ? true : _options$shouldScroll2,\n        _options$offsetX = options.offsetX,\n        offsetX = _options$offsetX === void 0 ? 0 : _options$offsetX,\n        _options$offsetY = options.offsetY,\n        offsetY = _options$offsetY === void 0 ? 0 : _options$offsetY;\n      var x = this.visibleRect.x;\n      var y = this.visibleRect.y;\n      var minX = layoutInfo.rect.x - offsetX;\n      var minY = layoutInfo.rect.y - offsetY;\n      var maxX = x + this.visibleRect.width;\n      var maxY = y + this.visibleRect.height;\n      if (shouldScrollX) {\n        if (minX <= x || maxX === 0) x = minX;else if (layoutInfo.rect.maxX > maxX) x += layoutInfo.rect.maxX - maxX;\n      }\n      if (shouldScrollY) {\n        if (minY <= y || maxY === 0) y = minY;else if (layoutInfo.rect.maxY > maxY) y += layoutInfo.rect.maxY - maxY;\n      }\n      return this.scrollTo(new (0, $3041db3296945e6e$export$baf26146a414f24a)(x, y), duration);\n    }\n    /**\n    * Performs an animated scroll to the given offset.\n    * @param offset - The offset to scroll to.\n    * @param duration The duration of the animation.\n    * @returns A promise that resolves when the animation is complete.\n    */\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(offset) {\n      var _this7 = this;\n      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n      // Cancel the current scroll animation\n      if (this._scrollAnimation) {\n        this._scrollAnimation.cancel();\n        this._scrollAnimation = null;\n      }\n      // Set the content offset synchronously if the duration is zero\n      if (duration <= 0 || this.visibleRect.pointEquals(offset)) {\n        this._setContentOffset(offset);\n        return Promise.resolve();\n      }\n      this.startScrolling();\n      this._scrollAnimation = (0, $3eb131dcf37ad5f8$export$dc0b63720788090c)(this.visibleRect, offset, duration, (0, $3eb131dcf37ad5f8$export$57636bb43b1ccbb0), function (offset) {\n        _this7._setContentOffset(offset);\n      });\n      this._scrollAnimation.then(function () {\n        _this7._scrollAnimation = null;\n        // Process view size updates that occurred during the animation.\n        // Only views that are still visible will be actually updated.\n        var _iterator19 = _createForOfIteratorHelper(_this7._sizeUpdateQueue),\n          _step19;\n        try {\n          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n            var _step19$value = _slicedToArray(_step19.value, 2),\n              key = _step19$value[0],\n              size = _step19$value[1];\n            _this7.updateItemSize(key, size);\n          }\n        } catch (err) {\n          _iterator19.e(err);\n        } finally {\n          _iterator19.f();\n        }\n        _this7._sizeUpdateQueue.clear();\n        _this7.relayout();\n        _this7._processTransactionQueue();\n        _this7.endScrolling();\n      });\n      return this._scrollAnimation;\n    }\n  }, {\n    key: \"_runTransaction\",\n    value: function _runTransaction(action, animated) {\n      this._startTransaction();\n      if (this._nextTransaction) this._nextTransaction.actions.push(action);\n      this._endTransaction(animated);\n    }\n  }, {\n    key: \"_startTransaction\",\n    value: function _startTransaction() {\n      if (!this._nextTransaction) this._nextTransaction = new (0, $8e135e531d8dcb66$export$febc5573c75cefb0)();\n      this._nextTransaction.level++;\n    }\n  }, {\n    key: \"_endTransaction\",\n    value: function _endTransaction(animated) {\n      if (!this._nextTransaction) return false;\n      // Save whether the transaction should be animated.\n      if (animated != null) this._nextTransaction.animated = animated;\n      // If we haven't reached level 0, we are still in a\n      // nested transaction. Wait for the parent to end.\n      if (--this._nextTransaction.level > 0) return false;\n      // Do nothing for empty transactions\n      if (this._nextTransaction.actions.length === 0) {\n        this._nextTransaction = null;\n        return false;\n      }\n      // Default animations to true\n      if (this._nextTransaction.animated == null) this._nextTransaction.animated = true;\n      // Enqueue the transaction\n      this._transactionQueue.push(this._nextTransaction);\n      this._nextTransaction = null;\n      this._processTransactionQueue();\n      return true;\n    }\n  }, {\n    key: \"_processTransactionQueue\",\n    value: function _processTransactionQueue() {\n      // If the current transaction is animating, wait until the end\n      // to process the next transaction.\n      if (this._transaction || this._scrollAnimation) return;\n      var next = this._transactionQueue.shift();\n      if (next) this._performTransaction(next);\n    }\n  }, {\n    key: \"_getContentRect\",\n    value: function _getContentRect() {\n      return new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(0, 0, this.contentSize.width, this.contentSize.height);\n    }\n  }, {\n    key: \"_performTransaction\",\n    value: function _performTransaction(transaction) {\n      var _this8 = this;\n      this._transaction = transaction;\n      this.relayoutNow({\n        transaction: transaction,\n        animated: transaction.animated,\n        beforeLayout: function beforeLayout() {\n          // Get the initial layout infos for all views before the updates\n          // so we can figure out which views to add and remove.\n          if (transaction.animated) transaction.initialMap = _this8._getLayoutInfoMap(_this8._getContentRect(), true);\n          // Apply the actions that occurred during this transaction\n          var _iterator20 = _createForOfIteratorHelper(transaction.actions),\n            _step20;\n          try {\n            for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n              var action = _step20.value;\n              action();\n            }\n          } catch (err) {\n            _iterator20.e(err);\n          } finally {\n            _iterator20.f();\n          }\n        },\n        afterLayout: function afterLayout() {\n          // Get the final layout infos after the updates\n          if (transaction.animated) {\n            transaction.finalMap = _this8._getLayoutInfoMap(_this8._getContentRect());\n            _this8._setupTransactionAnimations(transaction);\n          } else _this8._transaction = null;\n        },\n        afterAnimation: function afterAnimation() {\n          // Remove and reuse views when animations are done\n          if (transaction.toRemove.size > 0 || transaction.removed.size > 0) {\n            var _iterator21 = _createForOfIteratorHelper((0, $fc36f9a046a9ce79$export$cfc14088dfefce5f)(transaction.toRemove.values(), transaction.removed.values())),\n              _step21;\n            try {\n              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n                var view = _step21.value;\n                _this8._children.delete(view);\n                _this8.reuseView(view);\n              }\n            } catch (err) {\n              _iterator21.e(err);\n            } finally {\n              _iterator21.f();\n            }\n          }\n          _this8._transaction = null;\n          // Ensure DOM order is correct for accessibility after animations are complete\n          _this8._correctItemOrder();\n          _this8._flushVisibleViews();\n          _this8._processTransactionQueue();\n        }\n      });\n    }\n  }, {\n    key: \"_setupTransactionAnimations\",\n    value: function _setupTransactionAnimations(transaction) {\n      var initialMap = transaction.initialMap,\n        finalMap = transaction.finalMap;\n      // Store initial and final layout infos for animations\n      var _iterator22 = _createForOfIteratorHelper(initialMap),\n        _step22;\n      try {\n        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n          var _step22$value = _slicedToArray(_step22.value, 2),\n            key = _step22$value[0],\n            layoutInfo = _step22$value[1];\n          if (finalMap.has(key))\n            // Store the initial layout info for use during animations.\n            transaction.initialLayoutInfo.set(key, layoutInfo);else\n            // This view was removed. Store the layout info for use\n            // in Layout#getFinalLayoutInfo during animations.\n            transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);\n        }\n        // Get initial layout infos for views that were added\n      } catch (err) {\n        _iterator22.e(err);\n      } finally {\n        _iterator22.f();\n      }\n      var _iterator23 = _createForOfIteratorHelper(finalMap),\n        _step23;\n      try {\n        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n          var _step23$value = _slicedToArray(_step23.value, 2),\n            key1 = _step23$value[0],\n            layoutInfo1 = _step23$value[1];\n          if (!initialMap.has(key1)) {\n            var initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo1.copy());\n            transaction.initialLayoutInfo.set(key1, initialLayoutInfo);\n          }\n        }\n        // Figure out which views were removed.\n      } catch (err) {\n        _iterator23.e(err);\n      } finally {\n        _iterator23.f();\n      }\n      var _iterator24 = _createForOfIteratorHelper(this._visibleViews),\n        _step24;\n      try {\n        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;)\n        // If an item has a width of 0, there is no need to remove it from the _visibleViews.\n        // Removing an item with  width of 0 can cause a loop where the item gets added, removed,\n        // added, removed... etc in a loop.\n        {\n          var _step24$value = _slicedToArray(_step24.value, 2),\n            key2 = _step24$value[0],\n            view = _step24$value[1];\n          if (!finalMap.has(key2) && view.layoutInfo.rect.width > 0) {\n            transaction.removed.set(key2, view);\n            this._visibleViews.delete(key2);\n            // In case something weird happened, where we have a view but no\n            // initial layout info, use the one attached to the view.\n            if (view.layoutInfo) {\n              if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator24.e(err);\n      } finally {\n        _iterator24.f();\n      }\n    }\n  }]);\n  return $38b9490c1cca8fc4$export$89be5a243e59c4b2;\n}();\nfunction $fc0b13b484ac1194$export$1505db82fe357e65(opts) {\n  var _ref2 = (0, $8D3nr$useState)([]),\n    _ref3 = _slicedToArray(_ref2, 2),\n    visibleViews = _ref3[0],\n    setVisibleViews = _ref3[1];\n  var _ref4 = (0, $8D3nr$useState)(new (0, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec)()),\n    _ref5 = _slicedToArray(_ref4, 2),\n    contentSize = _ref5[0],\n    setContentSize = _ref5[1];\n  var _ref6 = (0, $8D3nr$useState)(false),\n    _ref7 = _slicedToArray(_ref6, 2),\n    isAnimating = _ref7[0],\n    setAnimating = _ref7[1];\n  var _ref8 = (0, $8D3nr$useState)(false),\n    _ref9 = _slicedToArray(_ref8, 2),\n    isScrolling = _ref9[0],\n    setScrolling = _ref9[1];\n  var virtualizer = (0, $8D3nr$useMemo)(function () {\n    return new (0, $38b9490c1cca8fc4$export$89be5a243e59c4b2)();\n  }, []);\n  virtualizer.delegate = {\n    setVisibleViews: setVisibleViews,\n    setVisibleRect: function setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n    setContentSize: setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: function beginAnimations() {\n      return setAnimating(true);\n    },\n    endAnimations: function endAnimations() {\n      return setAnimating(false);\n    },\n    getScrollAnchor: opts.getScrollAnchor\n  };\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n  (0, $8D3nr$useLayoutEffect)(function () {\n    virtualizer.afterRender();\n  });\n  // eslint-disable-next-line arrow-body-style\n  (0, $8D3nr$useEffect)(function () {\n    return function () {\n      return virtualizer.willUnmount();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var setVisibleRect = (0, $8D3nr$useCallback)(function (rect) {\n    virtualizer.visibleRect = rect;\n  }, [virtualizer]);\n  var startScrolling = (0, $8D3nr$useCallback)(function () {\n    virtualizer.startScrolling();\n    setScrolling(true);\n  }, [virtualizer]);\n  var endScrolling = (0, $8D3nr$useCallback)(function () {\n    virtualizer.endScrolling();\n    setScrolling(false);\n  }, [virtualizer]);\n  var state = (0, $8D3nr$useMemo)(function () {\n    return {\n      virtualizer: virtualizer,\n      visibleViews: visibleViews,\n      setVisibleRect: setVisibleRect,\n      contentSize: contentSize,\n      isAnimating: isAnimating,\n      isScrolling: isScrolling,\n      startScrolling: startScrolling,\n      endScrolling: endScrolling\n    };\n  }, [virtualizer, visibleViews, setVisibleRect, contentSize, isAnimating, isScrolling, startScrolling, endScrolling]);\n  return state;\n}\nexport { $c74cda7d31af1253$export$c84671f46d6a1ca as Layout, $d7fd61009c21d0bb$export$7e0eeb9da702a085 as LayoutInfo, $3041db3296945e6e$export$baf26146a414f24a as Point, $60423f92c7f9ad87$export$c79fc6492f3af13d as Rect, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec as Size, $ad1d98aa8f0c31b4$export$1a5223887c560441 as ReusableView, $fc0b13b484ac1194$export$1505db82fe357e65 as useVirtualizerState };","map":{"version":3,"mappings":"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","names":["$fc36f9a046a9ce79$export$cfc14088dfefce5f","$c74cda7d31af1253$export$c84671f46d6a1ca","newRect","oldRect","width","height","invalidationContext","layoutInfo","$d7fd61009c21d0bb$export$7e0eeb9da702a085","type","key","rect","parentKey","estimatedSize","isSticky","opacity","transform","zIndex","allowOverflow","res","copy","$3041db3296945e6e$export$baf26146a414f24a","x","y","point","$60423f92c7f9ad87$export$c79fc6492f3af13d","maxX","maxY","containsPoint","size","other","Math","min","max","intersects","$ee1bfa90a957fb8a$export$cb6da89c6af1a8ec","$ad1d98aa8f0c31b4$var$KEY","$ad1d98aa8f0c31b4$export$1a5223887c560441","virtualizer","content","rendered","$3eb131dcf37ad5f8$var$perf","window","performance","$3eb131dcf37ad5f8$var$perfNow","now","webkitNow","msNow","mozNow","$3eb131dcf37ad5f8$var$getTime","bind","Date","getTime","$3eb131dcf37ad5f8$var$fixTs","$3eb131dcf37ad5f8$export$dc0b63720788090c","begin","end","duration","ease","fn","canceled","raf_id","promise","Promise","start","diffX","diffY","requestAnimationFrame","run","t","delta","resolve","proceed","cancel","cancelAnimationFrame","$3eb131dcf37ad5f8$export$77860c106b4a6a2e","$3eb131dcf37ad5f8$export$57636bb43b1ccbb0","sin","PI","$fc36f9a046a9ce79$export$37a26b283fd7740e","a","b","Set","keys","has","add","$fc36f9a046a9ce79$export$acaf96a27438246b","toRemove","toAdd","toUpdate","iterators","iterator","$fc36f9a046a9ce79$export$6897c284b6f9f4dc","object","$fc36f9a046a9ce79$export$a8d0d0c8d1c5df64","$364191b3decf3697$var$RollingAverage","sample","count","value","$364191b3decf3697$export$4455ee6afb38dcbb","time","startTime","averageTime","addSample","visibleRect","velocity","averagePerf","o","abs","overscanY","o1","overscanX","overscanned","round","$8e135e531d8dcb66$export$febc5573c75cefb0","Map","$38b9490c1cca8fc4$export$89be5a243e59c4b2","options","_contentSize","_visibleRect","_reusableViews","_visibleLayoutInfos","_visibleViews","_renderedContent","WeakMap","_children","_invalidationContext","_overscanManager","_persistedKeys","_scrollAnimation","_isScrolling","_sizeUpdateQueue","_animatedContentOffset","_transaction","_nextTransaction","_transactionQueue","_options_transitionDuration","transitionDuration","anchorScrollPosition","anchorScrollPositionAtTop","shouldOverscan","delegate","setContentSize","offset","setVisibleRect","_setVisibleRect","forceUpdate","current","equals","shouldInvalidate","layout","_resetAnimatedContentOffset","relayout","offsetChanged","pointEquals","sizeChanged","sizeEquals","updateSubviews","_collection","data","_setData","_runTransaction","reloadData","contentChanged","getItem","persistedKeys","k","getLayoutInfo","_layout","setLayout","animated","applyLayout","getType","reuseType","_getReuseType","reusable","view","length","pop","viewType","isOrigin","_renderView","reusableView","_renderContent","cached","get","renderView","set","Array","from","values","visibleViews","filter","v","layoutInfos","getVisibleLayoutInfos","_relayoutRaf","context","Object","assign","relayoutNow","scrollAnchor","_getScrollAnchor","beforeLayout","validate","_setContentSize","getContentSize","afterLayout","getVisibleRect","restoredScrollAnchor","_restoreScrollAnchor","contentOffsetX","contentOffsetY","contentSize","hasLayoutUpdates","_setContentOffset","transaction","_applyLayoutInfos","_enableTransitions","done","_disableTransitions","afterAnimation","setTimeout","delete","beginAnimations","endAnimations","getScrollAnchor","corner","getCornerInRect","key1","cornerAnchor","key2","layoutInfo1","area","corner1","offset1","contentOffset","_context_transaction","finalAnchor","finalMap","adjustment","getOverscannedRect","_getLayoutInfoMap","map","visibleLayoutInfos","currentlyVisible","item","removed","view1","reuseView","view2","initialLayoutInfo","_applyLayoutInfo","getReusableView","key3","view3","removeViews","_correctItemOrder","_flushVisibleViews","_hasLayoutUpdates","collectMetrics","viewsByParentKey","_view_layoutInfo","_viewsByParentKey_get","_view_layoutInfo1","_view_layoutInfo2","_view_layoutInfo3","push","buildTree","parent","views","children","renderWrapper","childViews","setVisibleViews","updated","cur","cur1","cur2","layoutInfo2","finalLayoutInfo","getFinalLayoutInfo","prepareForReuse","updateItemSize","changed","shouldScrollX","shouldScrollY","offsetX","offsetY","minX","minY","scrollTo","startScrolling","then","clear","_processTransactionQueue","endScrolling","action","_startTransaction","actions","_endTransaction","level","next","shift","_performTransaction","initialMap","_getContentRect","_setupTransactionAnimations","getInitialLayoutInfo","$fc0b13b484ac1194$export$1505db82fe357e65","opts","isAnimating","setAnimating","isScrolling","setScrolling","onVisibleRectChange","collection","afterRender","willUnmount","state"],"sources":["C:\\Users\\gonca\\Downloads\\my-app\\my-app\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\utils.ts","C:\\Users\\gonca\\Downloads\\my-app\\my-app\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\index.ts","C:\\Users\\gonca\\Downloads\\my-app\\my-app\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\Layout.ts","C:\\Users\\gonca\\Downloads\\my-app\\my-app\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\LayoutInfo.ts","C:\\Users\\gonca\\Downloads\\my-app\\my-app\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\Point.ts","C:\\Users\\gonca\\Downloads\\my-app\\my-app\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\Rect.ts","C:\\Users\\gonca\\Downloads\\my-app\\my-app\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\Size.ts","C:\\Users\\gonca\\Downloads\\my-app\\my-app\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\ReusableView.ts","C:\\Users\\gonca\\Downloads\\my-app\\my-app\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\useVirtualizerState.ts","C:\\Users\\gonca\\Downloads\\my-app\\my-app\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\Virtualizer.ts","C:\\Users\\gonca\\Downloads\\my-app\\my-app\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\tween.ts","C:\\Users\\gonca\\Downloads\\my-app\\my-app\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\OverscanManager.ts","C:\\Users\\gonca\\Downloads\\my-app\\my-app\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\Transaction.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport function keyDiff<T>(a: Map<T, any>, b: Map<T, any>): Set<T> {\n  let res = new Set<T>();\n\n  for (let key of a.keys()) {\n    if (!b.has(key)) {\n      res.add(key);\n    }\n  }\n\n  return res;\n}\n\n/**\n * Returns the key difference between two maps. Returns a set of\n * keys to add to and remove from a to make it equal to b.\n * @private\n */\nexport function difference<T>(a: Map<T, any>, b: Map<T, any>) {\n  let toRemove = keyDiff(a, b);\n  let toAdd = keyDiff(b, a);\n  let toUpdate = new Set;\n  for (let key of a.keys()) {\n    if (b.has(key)) {\n      toUpdate.add(key);\n    }\n  }\n  return {toRemove, toAdd, toUpdate};\n}\n\n/**\n * Returns an iterator that yields the items in all of the given iterators.\n * @private\n */\nexport function* concatIterators<T>(...iterators: Iterable<T>[]) {\n  for (let iterator of iterators) {\n    yield* iterator;\n  }\n}\n\n/**\n * Inverts the keys and values of an object.\n * @private\n */\nexport function invert(object) {\n  let res = {};\n  for (let key in object) {\n    res[object[key]] = key;\n  }\n\n  return res;\n}\n\n/** Returns whether two sets are equal. */\nexport function isSetEqual<T>(a: Set<T>, b: Set<T>): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  for (let key of a) {\n    if (!b.has(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {InvalidationContext} from './types';\nexport type {VirtualizerState} from './useVirtualizerState';\nexport type {RectCorner} from './Rect';\n\nexport {Layout} from './Layout';\nexport {LayoutInfo} from './LayoutInfo';\nexport {Point} from './Point';\nexport {Rect} from './Rect';\nexport {Size} from './Size';\nexport {ReusableView} from './ReusableView';\nexport {useVirtualizerState} from './useVirtualizerState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {InvalidationContext} from './types';\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\n// import {Point} from './Point';\nimport {Rect} from './Rect';\nimport {Size} from './Size';\nimport {Virtualizer} from './Virtualizer';\n// import { DragTarget, DropTarget } from '@react-types/shared';\n\n/**\n * [CollectionView]{@link CollectionView} supports arbitrary layout objects, which compute what views are visible, and how\n * to position and style them. However, layouts do not create the views themselves directly. Instead,\n * layouts produce lightweight {@link LayoutInfo} objects which describe various properties of a view,\n * such as its position and size. The {@link CollectionView} is then responsible for creating the actual\n * views as needed, based on this layout information.\n *\n * Every layout extends from the {@link Layout} abstract base class. Layouts must implement a minimum of the\n * two methods listed below. All other methods can be optionally overridden to implement custom behavior.\n *\n * @see {@link getVisibleLayoutInfos}\n * @see {@link getLayoutInfo}\n */\nexport abstract class Layout<T extends object> {\n  /** The CollectionView the layout is currently attached to. */\n  virtualizer: Virtualizer<T, any, any>;\n\n  /**\n   * Returns whether the layout should invalidate in response to\n   * visible rectangle changes. By default, it only invalidates\n   * when the collection view's size changes. Return true always\n   * to make the layout invalidate while scrolling (e.g. sticky headers).\n   */\n  shouldInvalidate(newRect: Rect, oldRect: Rect): boolean {\n    // By default, invalidate when the size changes\n    return newRect.width !== oldRect.width\n        || newRect.height !== oldRect.height;\n  }\n\n  /**\n   * This method allows the layout to perform any pre-computation\n   * it needs to in order to prepare {@link LayoutInfo}s for retrieval.\n   * Called by the collection view before {@link getVisibleLayoutInfos}\n   * or {@link getLayoutInfo} are called.\n   */\n  validate(invalidationContext: InvalidationContext<T, any>) {} // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Returns an array of {@link LayoutInfo} objects which are inside the given rectangle.\n   * Should be implemented by subclasses.\n   * @param rect The rectangle that should contain the returned LayoutInfo objects.\n   */\n  abstract getVisibleLayoutInfos(rect: Rect): LayoutInfo[];\n\n  /**\n   * Returns a {@link LayoutInfo} for the given key.\n   * Should be implemented by subclasses.\n   * @param key The key of the LayoutInfo to retrieve.\n   */\n  abstract getLayoutInfo(key: Key): LayoutInfo;\n\n  /**\n   * Returns size of the content. By default, it returns collectionView's size.\n   */\n  abstract getContentSize(): Size;\n\n  /**\n   * Returns a {@link DragTarget} describing a view at the given point to be dragged.\n   * Return `null` to cancel the drag. The default implementation returns the view at the given point.\n   * @param point The point at which the drag occurred.\n   */\n  // getDragTarget(point: Point): DragTarget | null {\n  //   let target = this.virtualizer.keyAtPoint(point);\n  //   if (!target) {\n  //     return null;\n  //   }\n\n  //   return {\n  //     type: 'item',\n  //     key: target\n  //   };\n  // }\n\n  /**\n   * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`\n   * to reject the drop. The dropped items will be inserted before the resulting target.\n   * @param point The point at which the drop occurred.\n   */\n  // getDropTarget(point: Point): DropTarget | null {\n  //   return null;\n  // }\n\n  /**\n   * Returns the starting attributes for an animated insertion.\n   * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.\n   * The default implementation just returns its input.\n   *\n   * @param layoutInfo The proposed LayoutInfo for this view.\n   */\n  getInitialLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n\n  /**\n   * Returns the ending attributes for an animated removal.\n   * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}\n   * to the one returned by this method. The default implementation returns its input.\n   *\n   * @param layoutInfo The original LayoutInfo for this view.\n   */\n  getFinalLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {Rect} from './Rect';\n\n/**\n * Instances of this lightweight class are created by {@link Layout} subclasses\n * to represent each view in the {@link CollectionView}. LayoutInfo objects describe\n * various properties of a view, such as its position and size, and style information.\n * The collection view uses this information when creating actual views to display.\n */\nexport class LayoutInfo {\n  /**\n   * A string representing the view type. Should be `'item'` for item views.\n   * Other types are used by supplementary views.\n   */\n  type: string;\n\n  /**\n   * A unique key for this view. For item views, it should match the content key.\n   */\n  key: Key;\n\n  /**\n   * The key for a parent layout info, if any.\n   */\n  parentKey: Key | null;\n\n  /**\n   * The rectangle describing the size and position of this view.\n   */\n  rect: Rect;\n\n  /**\n   * Whether the size is estimated. `false` by default.\n   */\n  estimatedSize: boolean;\n\n  /**\n   * Whether the layout info sticks to the viewport when scrolling.\n   */\n  isSticky: boolean;\n\n  /**\n   * The view's opacity. 1 by default.\n   */\n  opacity: number;\n\n  /**\n   * A CSS transform string to apply to the view. `null` by default.\n   */\n  transform: string | null;\n\n  /**\n   * The z-index of the view. 0 by default.\n   */\n  zIndex: number;\n\n  /**\n   * Whether the layout info allows its contents to overflow its container.\n   * @default false\n   */\n  allowOverflow: boolean;\n\n  /**\n   * @param type A string representing the view type. Should be `'item'` for item views.\n                            Other types are used by supplementary views.\n   * @param key The unique key for this view.\n   * @param rect The rectangle describing the size and position of this view.\n   */\n  constructor(type: string, key: Key, rect: Rect) {\n    this.type = type;\n    this.key = key;\n    this.parentKey = null;\n    this.rect = rect;\n    this.estimatedSize = false;\n    this.isSticky = false;\n    this.opacity = 1;\n    this.transform = null;\n    this.zIndex = 0;\n    this.allowOverflow = false;\n  }\n\n  /**\n   * Returns a copy of the LayoutInfo.\n   */\n  copy(): LayoutInfo {\n    let res = new LayoutInfo(this.type, this.key, this.rect.copy());\n    res.estimatedSize = this.estimatedSize;\n    res.opacity = this.opacity;\n    res.transform = this.transform;\n    res.parentKey = this.parentKey;\n    res.isSticky = this.isSticky;\n    res.zIndex = this.zIndex;\n    res.allowOverflow = this.allowOverflow;\n    return res;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Point {\n  /** The x-coordinate of the point. */\n  x: number;\n\n  /** The y-coordinate of the point. */\n  y: number;\n\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Returns a copy of this point.\n   */\n  copy(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Checks if two points are equal.\n   */\n  equals(point: Point): boolean {\n    return this.x === point.x && this.y === point.y;\n  }\n\n  /**\n   * Returns true if this point is the origin.\n   */\n  isOrigin(): boolean {\n    return this.x === 0 && this.y === 0;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Size} from './Size';\n\nexport type RectCorner = 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\n/**\n * Represents a rectangle.\n */\nexport class Rect {\n  /** The x-coordinate of the rectangle. */\n  x: number;\n\n  /** The y-coordinate of the rectangle. */\n  y: number;\n\n  /** The width of the rectangle. */\n  width: number;\n\n  /** The height of the rectangle. */\n  height: number;\n\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * The maximum x-coordinate in the rectangle.\n   */\n  get maxX(): number {\n    return this.x + this.width;\n  }\n\n  /**\n   * The maximum y-coordinate in the rectangle.\n   */\n  get maxY(): number {\n    return this.y + this.height;\n  }\n\n  /**\n   * The area of the rectangle.\n   */\n  get area(): number {\n    return this.width * this.height;\n  }\n\n  /**\n   * The top left corner of the rectangle.\n   */\n  get topLeft(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * The top right corner of the rectangle.\n   */\n  get topRight(): Point {\n    return new Point(this.maxX, this.y);\n  }\n\n  /**\n   * The bottom left corner of the rectangle.\n   */\n  get bottomLeft(): Point {\n    return new Point(this.x, this.maxY);\n  }\n\n  /**\n   * The bottom right corner of the rectangle.\n   */\n  get bottomRight(): Point {\n    return new Point(this.maxX, this.maxY);\n  }\n\n  /**\n   * Returns whether this rectangle intersects another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  intersects(rect: Rect): boolean {\n    return this.x <= rect.x + rect.width\n        && rect.x <= this.x + this.width\n        && this.y <= rect.y + rect.height\n        && rect.y <= this.y + this.height;\n  }\n\n  /**\n   * Returns whether this rectangle fully contains another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  containsRect(rect: Rect): boolean {\n    return this.x <= rect.x\n        && this.y <= rect.y\n        && this.maxX >= rect.maxX\n        && this.maxY >= rect.maxY;\n  }\n\n  /**\n   * Returns whether the rectangle contains the given point.\n   * @param point - The point to check.\n   */\n  containsPoint(point: Point): boolean {\n    return this.x <= point.x\n        && this.y <= point.y\n        && this.maxX >= point.x\n        && this.maxY >= point.y;\n  }\n\n  /**\n   * Returns the first corner of this rectangle (from top to bottom, left to right)\n   * that is contained in the given rectangle, or null of the rectangles do not intersect.\n   * @param rect - The rectangle to check.\n   */\n  getCornerInRect(rect: Rect): RectCorner | null {\n    for (let key of ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']) {\n      if (rect.containsPoint(this[key])) {\n        return key as RectCorner;\n      }\n    }\n\n    return null;\n  }\n\n  equals(rect: Rect) {\n    return rect.x === this.x\n        && rect.y === this.y\n        && rect.width === this.width\n        && rect.height === this.height;\n  }\n\n  pointEquals(point: Point | Rect) {\n    return this.x === point.x\n        && this.y === point.y;\n  }\n\n  sizeEquals(size: Size | Rect) {\n    return this.width === size.width\n        && this.height === size.height;\n  }\n\n  /**\n   * Returns the union of this Rect and another.\n   */\n  union(other: Rect) {\n    let x = Math.min(this.x, other.x);\n    let y = Math.min(this.y, other.y);\n    let width = Math.max(this.maxX, other.maxX) - x;\n    let height = Math.max(this.maxY, other.maxY) - y;\n    return new Rect(x, y, width, height);\n  }\n\n  /**\n   * Returns the intersection of this Rect with another.\n   * If the rectangles do not intersect, an all zero Rect is returned.\n   */\n  intersection(other: Rect): Rect {\n    if (!this.intersects(other)) {\n      return new Rect(0, 0, 0, 0);\n    }\n\n    let x = Math.max(this.x, other.x);\n    let y = Math.max(this.y, other.y);\n    return new Rect(\n      x,\n      y,\n      Math.min(this.maxX, other.maxX) - x,\n      Math.min(this.maxY, other.maxY) - y\n    );\n  }\n\n  /**\n   * Returns a copy of this rectangle.\n   */\n  copy(): Rect {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Size {\n  width: number;\n  height: number;\n\n  constructor(width = 0, height = 0) {\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Returns a copy of this size.\n   */\n  copy(): Size {\n    return new Size(this.width, this.height);\n  }\n\n  /**\n   * Returns whether this size is equal to another one.\n   */\n  equals(other: Size): boolean {\n    return this.width === other.width\n        && this.height === other.height;\n  }\n\n  /**\n   * The total area of the Size.\n   */\n  get area() {\n    return this.width * this.height;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {Virtualizer} from './Virtualizer';\n\nlet KEY = 0;\n\n/**\n * [CollectionView]{@link CollectionView} creates instances of the [ReusableView]{@link ReusableView} class to\n * represent views currently being displayed. ReusableViews manage a DOM node, handle\n * applying {@link LayoutInfo} objects to the view, and render content\n * as needed. Subclasses must implement the {@link render} method at a\n * minimum. Other methods can be overridden to customize behavior.\n */\nexport class ReusableView<T extends object, V> {\n  /** The CollectionVirtualizer this view is a part of. */\n  virtualizer: Virtualizer<T, V, unknown>;\n\n  /** The LayoutInfo this view is currently representing. */\n  layoutInfo: LayoutInfo | null;\n\n  /** The content currently being displayed by this view, set by the collection view. */\n  content: T;\n\n  rendered: V;\n\n  viewType: string;\n  key: Key;\n\n  constructor(virtualizer: Virtualizer<T, V, unknown>) {\n    this.virtualizer = virtualizer;\n    this.key = ++KEY;\n  }\n\n  /**\n   * Prepares the view for reuse. Called just before the view is removed from the DOM.\n   */\n  prepareForReuse() {\n    this.content = null;\n    this.rendered = null;\n    this.layoutInfo = null;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection} from '@react-types/shared';\nimport {Key, useCallback, useEffect, useMemo, useState} from 'react';\nimport {Layout} from './Layout';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {Virtualizer} from './Virtualizer';\n\ninterface VirtualizerProps<T extends object, V, W> {\n  renderView(type: string, content: T): V,\n  renderWrapper(\n    parent: ReusableView<T, V> | null,\n    reusableView: ReusableView<T, V>,\n    children: ReusableView<T, V>[],\n    renderChildren: (views: ReusableView<T, V>[]) => W[]\n  ): W,\n  layout: Layout<T>,\n  collection: Collection<T>,\n  onVisibleRectChange(rect: Rect): void,\n  getScrollAnchor?(rect: Rect): Key,\n  transitionDuration?: number\n}\n\nexport interface VirtualizerState<T extends object, V, W> {\n  visibleViews: W[],\n  setVisibleRect: (rect: Rect) => void,\n  contentSize: Size,\n  isAnimating: boolean,\n  virtualizer: Virtualizer<T, V, W>,\n  isScrolling: boolean,\n  startScrolling: () => void,\n  endScrolling: () => void\n}\n\nexport function useVirtualizerState<T extends object, V, W>(opts: VirtualizerProps<T, V, W>): VirtualizerState<T, V, W> {\n  let [visibleViews, setVisibleViews] = useState<W[]>([]);\n  let [contentSize, setContentSize] = useState(new Size());\n  let [isAnimating, setAnimating] = useState(false);\n  let [isScrolling, setScrolling] = useState(false);\n  let virtualizer = useMemo(() => new Virtualizer<T, V, W>(), []);\n\n  virtualizer.delegate = {\n    setVisibleViews,\n    setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n    setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: () => setAnimating(true),\n    endAnimations: () => setAnimating(false),\n    getScrollAnchor: opts.getScrollAnchor\n  };\n\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n\n  useLayoutEffect(() => {\n    virtualizer.afterRender();\n  });\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => virtualizer.willUnmount();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let setVisibleRect = useCallback((rect) => {\n    virtualizer.visibleRect = rect;\n  }, [virtualizer]);\n  let startScrolling = useCallback(() => {\n    virtualizer.startScrolling();\n    setScrolling(true);\n  }, [virtualizer]);\n  let endScrolling = useCallback(() => {\n    virtualizer.endScrolling();\n    setScrolling(false);\n  }, [virtualizer]);\n\n  let state = useMemo(() => ({\n    virtualizer,\n    visibleViews,\n    setVisibleRect,\n    contentSize,\n    isAnimating,\n    isScrolling,\n    startScrolling,\n    endScrolling\n  }), [\n    virtualizer,\n    visibleViews,\n    setVisibleRect,\n    contentSize,\n    isAnimating,\n    isScrolling,\n    startScrolling,\n    endScrolling\n  ]);\n\n  return state;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CancelablePromise, easeOut, tween} from './tween';\nimport {Collection} from '@react-types/shared';\nimport {concatIterators, difference, isSetEqual} from './utils';\nimport {\n  InvalidationContext,\n  ScrollAnchor,\n  ScrollToItemOptions,\n  VirtualizerDelegate,\n  VirtualizerOptions\n} from './types';\nimport {Key} from 'react';\nimport {Layout} from './Layout';\nimport {LayoutInfo} from './LayoutInfo';\nimport {OverscanManager} from './OverscanManager';\nimport {Point} from './Point';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {Transaction} from './Transaction';\n\n/**\n * The CollectionView class renders a scrollable collection of data using customizable layouts,\n * and manages animated updates to the data over time. It supports very large collections by\n * only rendering visible views to the DOM, reusing them as you scroll. Collection views can\n * present any type of view, including non-item views such as section headers and footers.\n * Optionally, the {@link EditableCollectionView} subclass can be used to enable user interaction\n * with the collection, including drag and drop, multiple selection, and keyboard interacton.\n *\n * Collection views get their data from a {@link DataSource} object that you provide. Items are\n * grouped into sections by the data source, and the collection view calls its methods to retrieve\n * the data. When data changes, the data source emits change events, and the collection view\n * updates as appropriate, optionally with an animated transition. There is one built-in data source\n * implementation, {@link ArrayDataSource}, which renders content from a 2d array.\n *\n * Collection views use {@link Layout} objects to compute what views should be visible, and how\n * to position and style them. This means that collection views can have their items arranged in\n * a stack, a grid, a circle, or any other layout you can think of. The layout can be changed\n * dynamically at runtime as well, optionally with an animated transition between the layouts.\n *\n * Layouts produce information on what views should appear in the collection view, but do not create\n * the views themselves directly. It is the responsibility of the {@link CollectionViewDelegate} object\n * to create instances of {@link ReusableView} subclasses which render the items into DOM nodes.\n * The delegate determines what type of view to display for each item, and creates instances of\n * views as needed by the collection view. Those views are then reused by the collection view as\n * the user scrolls through the content.\n */\nexport class Virtualizer<T extends object, V, W> {\n  /**\n   * The collection view delegate. The delegate is used by the collection view\n   * to create and configure views.\n   */\n  delegate: VirtualizerDelegate<T, V, W>;\n\n  /** The duration of animated layout changes, in milliseconds. Default is 500ms. */\n  transitionDuration: number;\n\n  /**\n   * Whether to enable scroll anchoring. This will attempt to restore the scroll position\n   * after layout changes outside the viewport. Default is off.\n   */\n  anchorScrollPosition: boolean;\n\n  /** Whether to anchor the scroll position when at the top of the content. Default is off. */\n  anchorScrollPositionAtTop: boolean;\n\n  /**\n   * Whether to overscan the visible area to pre-render items slightly outside and\n   * improve performance. Default is on.\n   */\n  shouldOverscan: boolean;\n\n  private _collection: Collection<T>;\n  private _layout: Layout<T>;\n  private _contentSize: Size;\n  private _visibleRect: Rect;\n  private _visibleLayoutInfos: Map<Key, LayoutInfo>;\n  private _reusableViews: {[type: string]: ReusableView<T, V>[]};\n  private _visibleViews: Map<Key, ReusableView<T, V>>;\n  private _renderedContent: WeakMap<T, V>;\n  private _children: Set<ReusableView<T, V>>;\n  private _invalidationContext: InvalidationContext<T, V> | null;\n  private _overscanManager: OverscanManager;\n  private _persistedKeys: Set<Key>;\n  private _relayoutRaf: number | null;\n  private _scrollAnimation: CancelablePromise<void> | null;\n  private _isScrolling: boolean;\n  private _sizeUpdateQueue: Map<Key, Size>;\n  private _animatedContentOffset: Point;\n  private _transaction: Transaction<T, V> | null;\n  private _nextTransaction: Transaction<T, V> | null;\n  private _transactionQueue: Transaction<T, V>[];\n\n  constructor(options: VirtualizerOptions<T, V, W> = {}) {\n    this._contentSize = new Size;\n    this._visibleRect = new Rect;\n\n    this._reusableViews = {};\n    this._visibleLayoutInfos = new Map();\n    this._visibleViews = new Map();\n    this._renderedContent = new WeakMap();\n    this._children = new Set();\n    this._invalidationContext = null;\n    this._overscanManager = new OverscanManager();\n    this._persistedKeys = new Set();\n\n    this._scrollAnimation = null;\n    this._isScrolling = false;\n    this._sizeUpdateQueue = new Map();\n    this._animatedContentOffset = new Point(0, 0);\n\n    this._transaction = null;\n    this._nextTransaction = null;\n    this._transactionQueue = [];\n\n    // Set options from passed object if given\n    this.transitionDuration = options.transitionDuration ?? 500;\n    this.anchorScrollPosition = options.anchorScrollPosition || false;\n    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n    this.shouldOverscan = options.shouldOverscan !== false;\n    for (let key of ['delegate', 'size', 'layout', 'collection']) {\n      if (options[key]) {\n        this[key] = options[key];\n      }\n    }\n  }\n\n  _setContentSize(size: Size) {\n    this._contentSize = size;\n    this.delegate.setContentSize(size);\n  }\n\n  _setContentOffset(offset: Point) {\n    let rect = new Rect(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n    this.delegate.setVisibleRect(rect);\n  }\n\n  /**\n   * Get the size of the scrollable content.\n   */\n  get contentSize(): Size {\n    return this._contentSize;\n  }\n\n  /**\n   * Get the collection view's currently visible rectangle.\n   */\n  get visibleRect(): Rect {\n    return this._visibleRect;\n  }\n\n  /**\n   * Set the collection view's currently visible rectangle.\n   */\n  set visibleRect(rect: Rect) {\n    this._setVisibleRect(rect);\n  }\n\n  _setVisibleRect(rect: Rect, forceUpdate = false) {\n    let current = this._visibleRect;\n\n    // Ignore if the rects are equal\n    if (rect.equals(current)) {\n      return;\n    }\n\n    if (this.shouldOverscan) {\n      this._overscanManager.setVisibleRect(rect);\n    }\n\n    let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n\n    this._resetAnimatedContentOffset();\n    this._visibleRect = rect;\n\n    if (shouldInvalidate) {\n      this.relayout({\n        offsetChanged: !rect.pointEquals(current),\n        sizeChanged: !rect.sizeEquals(current)\n      });\n    } else {\n      this.updateSubviews(forceUpdate);\n    }\n  }\n\n  get collection(): Collection<T> {\n    return this._collection;\n  }\n\n  set collection(data: Collection<T>) {\n    this._setData(data);\n  }\n\n  private _setData(data: Collection<T>) {\n    if (data === this._collection) {\n      return;\n    }\n\n    if (this._collection) {\n      this._runTransaction(() => {\n        this._collection = data;\n      }, this.transitionDuration > 0);\n    } else {\n      this._collection = data;\n      this.reloadData();\n    }\n  }\n\n  /**\n   * Reloads the data from the data source and relayouts the collection view.\n   * Does not animate any changes. Equivalent to re-assigning the same data source\n   * to the collection view.\n   */\n  reloadData() {\n    this.relayout({\n      contentChanged: true\n    });\n  }\n\n  /**\n   * Returns the item with the given key.\n   */\n  getItem(key: Key) {\n    return this._collection ? this._collection.getItem(key) : null;\n  }\n\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  get persistedKeys(): Set<Key> {\n    return this._persistedKeys;\n  }\n\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  set persistedKeys(persistedKeys: Set<Key>) {\n    if (!isSetEqual(persistedKeys, this._persistedKeys)) {\n      this._persistedKeys = persistedKeys;\n      this.updateSubviews();\n    }\n  }\n\n  /** Returns whether the given key, or an ancestor, is persisted. */\n  isPersistedKey(key: Key) {\n    // Quick check if the key is directly in the set of persisted keys.\n    if (this._persistedKeys.has(key)) {\n      return true;\n    }\n\n    // If not, check if the key is an ancestor of any of the persisted keys.\n    for (let k of this._persistedKeys) {\n      while (k != null) {\n        let layoutInfo = this.layout.getLayoutInfo(k);\n        if (!layoutInfo) {\n          break;\n        }\n\n        k = layoutInfo.parentKey;\n\n        if (k === key) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get the collection view's layout.\n   */\n  get layout(): Layout<T> {\n    return this._layout;\n  }\n\n  /**\n   * Set the collection view's layout.\n   */\n  set layout(layout: Layout<T>) {\n    this.setLayout(layout);\n  }\n\n  /**\n   * Sets the collection view's layout, optionally with an animated transition\n   * from the current layout to the new layout.\n   * @param layout The layout to switch to.\n   * @param animated Whether to animate the layout change.\n   */\n  setLayout(layout: Layout<T>, animated = false) {\n    if (layout === this._layout) {\n      return;\n    }\n\n    let applyLayout = () => {\n      if (this._layout) {\n        // @ts-ignore\n        this._layout.virtualizer = null;\n      }\n\n      layout.virtualizer = this;\n      this._layout = layout;\n    };\n\n    if (animated) {\n      // Animated layout transitions are really simple, thanks to our transaction support.\n      // We just set the layout inside a transaction action, which runs after the initial\n      // layout infos for the animation are retrieved from the previous layout. Then, the\n      // final layout infos are retrieved from the new layout, and animations occur.\n      this._runTransaction(applyLayout);\n    } else {\n      applyLayout();\n      this.relayout();\n    }\n  }\n\n  private _getReuseType(layoutInfo: LayoutInfo, content: T | null) {\n    if (layoutInfo.type === 'item' && content) {\n      let type = this.delegate.getType ? this.delegate.getType(content) : 'item';\n      let reuseType = type === 'item' ? 'item' : layoutInfo.type + '_' + type;\n      return {type, reuseType};\n    }\n\n    return {\n      type: layoutInfo.type,\n      reuseType: layoutInfo.type\n    };\n  }\n\n  getReusableView(layoutInfo: LayoutInfo): ReusableView<T, V> {\n    let content = this.getItem(layoutInfo.key);\n    let {reuseType} = this._getReuseType(layoutInfo, content);\n\n    if (!this._reusableViews[reuseType]) {\n      this._reusableViews[reuseType] = [];\n    }\n\n    let reusable = this._reusableViews[reuseType];\n    let view = reusable.length > 0\n      ? reusable.pop()\n      : new ReusableView<T, V>(this);\n\n    view.viewType = reuseType;\n\n    if (!this._animatedContentOffset.isOrigin()) {\n      layoutInfo = layoutInfo.copy();\n      layoutInfo.rect.x += this._animatedContentOffset.x;\n      layoutInfo.rect.y += this._animatedContentOffset.y;\n    }\n\n    view.layoutInfo = layoutInfo;\n\n    this._renderView(view);\n    return view;\n  }\n\n  private _renderView(reusableView: ReusableView<T, V>) {\n    let {type, key} = reusableView.layoutInfo;\n    reusableView.content = this.getItem(key);\n    reusableView.rendered = this._renderContent(type, reusableView.content);\n  }\n\n  private _renderContent(type: string, content: T) {\n    let cached = this._renderedContent.get(content);\n    if (cached != null) {\n      return cached;\n    }\n\n    let rendered = this.delegate.renderView(type, content);\n    if (content) {\n      this._renderedContent.set(content, rendered);\n    }\n    return rendered;\n  }\n\n  /**\n   * Returns an array of all currently visible views, including both\n   * item views and supplementary views.\n   */\n  get visibleViews(): ReusableView<T, V>[] {\n    return Array.from(this._visibleViews.values());\n  }\n\n  /**\n   * Gets the visible view for the given type and key. Returns null if\n   * the view is not currently visible.\n   *\n   * @param key The key of the view to retrieve.\n   */\n  getView(key: Key): ReusableView<T, V> | null {\n    return this._visibleViews.get(key) || null;\n  }\n\n  /**\n   * Returns an array of visible views matching the given type.\n   * @param type The view type to find.\n   */\n  getViewsOfType(type: string): ReusableView<T, V>[] {\n    return this.visibleViews.filter(v => v.layoutInfo && v.layoutInfo.type === type);\n  }\n\n  /**\n   * Returns the key for the given view. Returns null\n   * if the view is not currently visible.\n   */\n  keyForView(view: ReusableView<T, V>): Key | null {\n    if (view && view.layoutInfo) {\n      return view.layoutInfo.key;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns the key for the item view currently at the given point.\n   */\n  keyAtPoint(point: Point): Key | null {\n    let rect = new Rect(point.x, point.y, 1, 1);\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n\n    // Layout may return multiple layout infos in the case of\n    // persisted keys, so find the first one that actually intersects.\n    for (let layoutInfo of layoutInfos) {\n      if (layoutInfo.rect.intersects(rect)) {\n        return layoutInfo.key;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Cleanup for when the Virtualizer will be unmounted.\n   */\n  willUnmount() {\n    cancelAnimationFrame(this._relayoutRaf);\n  }\n\n  /**\n   * Triggers a layout invalidation, and updates the visible subviews.\n   */\n  relayout(context: InvalidationContext<T, V> = {}) {\n    // Ignore relayouts while animating the scroll position\n    if (this._scrollAnimation || typeof requestAnimationFrame === 'undefined') {\n      return;\n    }\n\n    // If we already scheduled a relayout, extend the invalidation\n    // context so we coalesce multiple relayouts in the same frame.\n    if (this._invalidationContext) {\n      Object.assign(this._invalidationContext, context);\n      return;\n    }\n\n    this._invalidationContext = context;\n    this._relayoutRaf = requestAnimationFrame(() => {\n      this._relayoutRaf = null;\n      this.relayoutNow();\n    });\n  }\n\n  /**\n   * Performs a relayout immediately. Prefer {@link relayout} over this method\n   * where possible, since it coalesces multiple layout passes in the same tick.\n   */\n  relayoutNow(context: InvalidationContext<T, V> = this._invalidationContext || {}) {\n    // Cancel the scheduled relayout, since we're doing it now.\n    if (this._relayoutRaf) {\n      cancelAnimationFrame(this._relayoutRaf);\n      this._relayoutRaf = null;\n      // Update the provided context with the current invalidationContext since we are cancelling\n      // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)\n      context = {...this._invalidationContext, ...context};\n    }\n\n    // Reset the invalidation context\n    this._invalidationContext = null;\n\n    // Do nothing if we don't have a layout or content, or we are\n    // in the middle of an animated scroll transition.\n    if (!this.layout || !this._collection || this._scrollAnimation) {\n      return;\n    }\n\n    let scrollAnchor = this._getScrollAnchor();\n\n    // Trigger the beforeLayout hook, if provided\n    if (typeof context.beforeLayout === 'function') {\n      context.beforeLayout();\n    }\n\n    // Validate the layout\n    this.layout.validate(context);\n    this._setContentSize(this.layout.getContentSize());\n\n    // Trigger the afterLayout hook, if provided\n    if (typeof context.afterLayout === 'function') {\n      context.afterLayout();\n    }\n\n    // Adjust scroll position based on scroll anchor, and constrain.\n    // If the content changed, scroll to the top.\n    let visibleRect = this.getVisibleRect();\n    let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n    let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n    let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n    contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n    contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n\n    let hasLayoutUpdates = false;\n    if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n      // If this is an animated relayout, we do not immediately scroll because it would be jittery.\n      // Save the difference between the current and new content offsets, and apply it to the\n      // individual content items instead. At the end of the animation, we'll reset and set the\n      // scroll offset for real. This ensures jitter-free animation since we don't need to sync\n      // the scroll animation and the content animation.\n      if (context.animated || !this._animatedContentOffset.isOrigin()) {\n        this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n        this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n        hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n      } else {\n        this._setContentOffset(new Point(contentOffsetX, contentOffsetY));\n      }\n    } else {\n      hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n    }\n\n    // Apply layout infos, unless this is coming from an animated transaction\n    if (!(context.transaction && context.animated)) {\n      this._applyLayoutInfos();\n    }\n\n    // Wait for animations, and apply the afterAnimation hook, if provided\n    if (context.animated && hasLayoutUpdates) {\n      this._enableTransitions();\n\n      let done = () => {\n        this._disableTransitions();\n\n        // Reset scroll position after animations (see above comment).\n        if (!this._animatedContentOffset.isOrigin()) {\n          // Get the content offset to scroll to, taking _animatedContentOffset into account.\n          let {x, y} = this.getVisibleRect();\n          this._resetAnimatedContentOffset();\n          this._setContentOffset(new Point(x, y));\n        }\n\n        if (typeof context.afterAnimation === 'function') {\n          context.afterAnimation();\n        }\n      };\n\n      // Sometimes the animation takes slightly longer than expected.\n      setTimeout(done, this.transitionDuration + 100);\n      return;\n    } else if (typeof context.afterAnimation === 'function') {\n      context.afterAnimation();\n    }\n  }\n\n  /**\n   * Corrects DOM order of visible views to match item order of collection.\n   */\n  private _correctItemOrder() {\n    // Defer until after scrolling and animated transactions are complete\n    if (this._isScrolling || this._transaction) {\n      return;\n    }\n\n    for (let key of this._visibleLayoutInfos.keys()) {\n      let view = this._visibleViews.get(key);\n      this._children.delete(view);\n      this._children.add(view);\n    }\n  }\n\n  private _enableTransitions() {\n    this.delegate.beginAnimations();\n  }\n\n  private _disableTransitions() {\n    this.delegate.endAnimations();\n  }\n\n  private _getScrollAnchor(): ScrollAnchor | null {\n    if (!this.anchorScrollPosition) {\n      return null;\n    }\n\n    let visibleRect = this.getVisibleRect();\n\n    // Ask the delegate to provide a scroll anchor, if possible\n    if (this.delegate.getScrollAnchor) {\n      let key = this.delegate.getScrollAnchor(visibleRect);\n      if (key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(key);\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n        if (corner) {\n          let key = layoutInfo.key;\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          return {key, layoutInfo, corner, offset};\n        }\n      }\n    }\n\n    // No need to anchor the scroll position if it is at the top\n    if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) {\n      return null;\n    }\n\n    // Find a view with a visible corner that has the smallest distance to the top of the collection view\n    let cornerAnchor: ScrollAnchor | null = null;\n\n    for (let [key, view] of this._visibleViews) {\n      let layoutInfo = view.layoutInfo;\n      if (layoutInfo && layoutInfo.rect.area > 0) {\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n\n        if (corner) {\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          if (!cornerAnchor || (offset < cornerAnchor.offset)) {\n            cornerAnchor = {key, layoutInfo, corner, offset};\n          }\n        }\n      }\n    }\n\n    return cornerAnchor;\n  }\n\n  private _restoreScrollAnchor(scrollAnchor: ScrollAnchor | null, context: InvalidationContext<T, V>) {\n    let contentOffset = this.getVisibleRect();\n\n    if (scrollAnchor) {\n      let finalAnchor = context.transaction?.animated\n        ? context.transaction.finalMap.get(scrollAnchor.key)\n        : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n\n      if (finalAnchor) {\n        let adjustment = (finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y) - scrollAnchor.offset;\n        contentOffset.y += adjustment;\n      }\n    }\n\n    return contentOffset;\n  }\n\n  getVisibleRect(): Rect {\n    let v = this.visibleRect;\n    let x = v.x - this._animatedContentOffset.x;\n    let y = v.y - this._animatedContentOffset.y;\n    return new Rect(x, y, v.width, v.height);\n  }\n\n  getVisibleLayoutInfos() {\n    let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n    this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n    return this._visibleLayoutInfos;\n  }\n\n  private _getLayoutInfoMap(rect: Rect, copy = false) {\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n    let map = new Map;\n\n    for (let layoutInfo of layoutInfos) {\n      if (copy) {\n        layoutInfo = layoutInfo.copy();\n      }\n\n      map.set(layoutInfo.key, layoutInfo);\n    }\n\n    return map;\n  }\n\n  updateSubviews(forceUpdate = false) {\n    if (!this._collection) {\n      return;\n    }\n\n    let visibleLayoutInfos = this.getVisibleLayoutInfos();\n    let currentlyVisible = this._visibleViews;\n    let toAdd, toRemove, toUpdate;\n\n    // If this is a force update, remove and re-add all views.\n    // Otherwise, find and update the diff.\n    if (forceUpdate) {\n      toAdd = visibleLayoutInfos;\n      toRemove = currentlyVisible;\n      toUpdate = new Set();\n    } else {\n      ({toAdd, toRemove, toUpdate} = difference(currentlyVisible, visibleLayoutInfos));\n\n      for (let key of toUpdate) {\n        let view = currentlyVisible.get(key);\n        if (!view || !view.layoutInfo) {\n          continue;\n        }\n\n        let item = this.getItem(visibleLayoutInfos.get(key).key);\n        if (view.content === item) {\n          toUpdate.delete(key);\n        } else {\n          // If the view type changes, delete and recreate the view instead of updating\n          let {reuseType} = this._getReuseType(view.layoutInfo, item);\n          if (view.viewType !== reuseType) {\n            toUpdate.delete(key);\n            toAdd.add(key);\n            toRemove.add(key);\n          }\n        }\n      }\n\n      // We are done if the sets are equal\n      if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n        if (this._transaction) {\n          this._applyLayoutInfos();\n        }\n\n        return;\n      }\n    }\n\n    // Track views that should be removed. They are not removed from\n    // the DOM immediately, since we may reuse and need to re-insert\n    // them back into the DOM anyway.\n    let removed = new Set<ReusableView<T, V>>();\n\n    for (let key of toRemove.keys()) {\n      let view = this._visibleViews.get(key);\n      if (view) {\n        removed.add(view);\n        this._visibleViews.delete(key);\n\n        // If we are in the middle of a transaction, wait until the end\n        // of the animations to remove the views from the DOM. Also means\n        // we can't reuse those views immediately.\n        if (this._transaction) {\n          this._transaction.toRemove.set(key, view);\n        } else {\n          this.reuseView(view);\n        }\n      }\n    }\n\n    for (let key of toAdd.keys()) {\n      let layoutInfo = visibleLayoutInfos.get(key);\n      let view: ReusableView<T, V> | void;\n\n      // If we're in a transaction, and a layout change happens\n      // during the animations such that a view that was going\n      // to be removed is now not, we don't create a new view\n      // since the old one is still in the DOM, marked as toRemove.\n      if (this._transaction) {\n        // if transaction, get initial layout attributes for the animation\n        if (this._transaction.initialLayoutInfo.has(key)) {\n          layoutInfo = this._transaction.initialLayoutInfo.get(key);\n        }\n\n        view = this._transaction.toRemove.get(key);\n        if (view) {\n          this._transaction.toRemove.delete(key);\n          this._applyLayoutInfo(view, layoutInfo);\n        }\n      }\n\n      if (!view) {\n        // Create or reuse a view for this row\n        view = this.getReusableView(layoutInfo);\n\n        // Add the view to the DOM if needed\n        if (!removed.has(view)) {\n          this._children.add(view);\n        }\n      }\n\n      this._visibleViews.set(key, view);\n      removed.delete(view);\n    }\n\n    for (let key of toUpdate) {\n      let view = currentlyVisible.get(key) as ReusableView<T, V>;\n      this._renderedContent.delete(key);\n      this._renderView(view);\n    }\n\n    // Remove the remaining rows to delete from the DOM\n    if (!this._transaction) {\n      this.removeViews(removed);\n    }\n\n    this._correctItemOrder();\n    this._flushVisibleViews();\n\n    let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n    if (hasLayoutUpdates) {\n      requestAnimationFrame(() => {\n        // If we're in a transaction, apply animations to visible views\n        // and \"to be removed\" views, which animate off screen.\n        if (this._transaction) {\n          requestAnimationFrame(() => this._applyLayoutInfos());\n        }\n      });\n    }\n\n    return hasLayoutUpdates;\n  }\n\n  afterRender() {\n    if (this.shouldOverscan) {\n      this._overscanManager.collectMetrics();\n    }\n  }\n\n  private _flushVisibleViews() {\n    // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy\n    // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy\n    // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper\n    // method to build the final tree.\n    let viewsByParentKey = new Map([[null, []]]);\n    for (let view of this._children) {\n      if (view.layoutInfo?.parentKey != null && !viewsByParentKey.has(view.layoutInfo.parentKey)) {\n        viewsByParentKey.set(view.layoutInfo.parentKey, []);\n      }\n\n      viewsByParentKey.get(view.layoutInfo?.parentKey)?.push(view);\n      if (!viewsByParentKey.has(view.layoutInfo?.key)) {\n        viewsByParentKey.set(view.layoutInfo?.key, []);\n      }\n    }\n\n    let buildTree = (parent: ReusableView<T, V>, views: ReusableView<T, V>[]): W[] => views.map(view => {\n      let children = viewsByParentKey.get(view.layoutInfo.key);\n      return this.delegate.renderWrapper(\n        parent,\n        view,\n        children,\n        (childViews) => buildTree(view, childViews)\n      );\n    });\n\n    let children = buildTree(null, viewsByParentKey.get(null));\n    this.delegate.setVisibleViews(children);\n  }\n\n  private _applyLayoutInfo(view: ReusableView<T, V>, layoutInfo: LayoutInfo) {\n    if (view.layoutInfo === layoutInfo) {\n      return false;\n    }\n\n    view.layoutInfo = layoutInfo;\n    return true;\n  }\n\n  private _applyLayoutInfos() {\n    let updated = false;\n\n    // Apply layout infos to visible views\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (cur?.key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    // Apply final layout infos for views that will be removed\n    if (this._transaction) {\n      for (let view of this._transaction.toRemove.values()) {\n        let cur = view.layoutInfo;\n        if (cur?.key != null) {\n          let layoutInfo = this.layout.getLayoutInfo(cur.key);\n          if (this._applyLayoutInfo(view, layoutInfo)) {\n            updated = true;\n          }\n        }\n      }\n\n      for (let view of this._transaction.removed.values()) {\n        let cur = view.layoutInfo;\n        let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;\n        layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    if (updated) {\n      this._flushVisibleViews();\n    }\n  }\n\n  private _hasLayoutUpdates() {\n    if (!this._transaction) {\n      return false;\n    }\n\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (!cur) {\n        return true;\n      }\n\n      let layoutInfo = this.layout.getLayoutInfo(cur.key);\n      if (\n        // Uses equals rather than pointEquals so that width/height changes are taken into account\n        !cur.rect.equals(layoutInfo.rect) ||\n        cur.opacity !== layoutInfo.opacity ||\n        cur.transform !== layoutInfo.transform\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  reuseView(view: ReusableView<T, V>) {\n    view.prepareForReuse();\n    this._reusableViews[view.viewType].push(view);\n  }\n\n  removeViews(toRemove: Set<ReusableView<T, V>>) {\n    for (let view of toRemove) {\n      this._children.delete(view);\n    }\n  }\n\n  updateItemSize(key: Key, size: Size) {\n    // TODO: we should be able to invalidate a single index path\n    // @ts-ignore\n    if (!this.layout.updateItemSize) {\n      return;\n    }\n\n    // If the scroll position is currently animating, add the update\n    // to a queue to be processed after the animation is complete.\n    if (this._scrollAnimation) {\n      this._sizeUpdateQueue.set(key, size);\n      return;\n    }\n\n    // @ts-ignore\n    let changed = this.layout.updateItemSize(key, size);\n    if (changed) {\n      this.relayout();\n    }\n  }\n\n  startScrolling() {\n    this._isScrolling = true;\n  }\n\n  endScrolling() {\n    this._isScrolling = false;\n    this._correctItemOrder();\n    this._flushVisibleViews();\n  }\n\n  private _resetAnimatedContentOffset() {\n    // Reset the animated content offset of subviews. See comment in relayoutNow for details.\n    if (!this._animatedContentOffset.isOrigin()) {\n      this._animatedContentOffset = new Point(0, 0);\n      this._applyLayoutInfos();\n    }\n  }\n\n  /**\n   * Scrolls the item with the given key into view, optionally with an animation.\n   * @param key The key of the item to scroll into view.\n   * @param duration The duration of the scroll animation.\n   */\n  scrollToItem(key: Key, options?: ScrollToItemOptions) {\n    // key can be 0, so check if null or undefined\n    if (key == null) {\n      return;\n    }\n\n    let layoutInfo = this.layout.getLayoutInfo(key);\n    if (!layoutInfo) {\n      return;\n    }\n\n    let {\n      duration = 300,\n      shouldScrollX = true,\n      shouldScrollY = true,\n      offsetX = 0,\n      offsetY = 0\n    } = options;\n\n    let x = this.visibleRect.x;\n    let y = this.visibleRect.y;\n    let minX = layoutInfo.rect.x - offsetX;\n    let minY = layoutInfo.rect.y - offsetY;\n    let maxX = x + this.visibleRect.width;\n    let maxY = y + this.visibleRect.height;\n\n    if (shouldScrollX) {\n      if (minX <= x || maxX === 0) {\n        x = minX;\n      } else if (layoutInfo.rect.maxX > maxX) {\n        x += layoutInfo.rect.maxX - maxX;\n      }\n    }\n\n    if (shouldScrollY) {\n      if (minY <= y || maxY === 0) {\n        y = minY;\n      } else if (layoutInfo.rect.maxY > maxY) {\n        y += layoutInfo.rect.maxY - maxY;\n      }\n    }\n\n    return this.scrollTo(new Point(x, y), duration);\n  }\n\n  /**\n   * Performs an animated scroll to the given offset.\n   * @param offset - The offset to scroll to.\n   * @param duration The duration of the animation.\n   * @returns A promise that resolves when the animation is complete.\n   */\n  scrollTo(offset: Point, duration: number = 300): Promise<void> {\n    // Cancel the current scroll animation\n    if (this._scrollAnimation) {\n      this._scrollAnimation.cancel();\n      this._scrollAnimation = null;\n    }\n\n    // Set the content offset synchronously if the duration is zero\n    if (duration <= 0 || this.visibleRect.pointEquals(offset)) {\n      this._setContentOffset(offset);\n      return Promise.resolve();\n    }\n\n    this.startScrolling();\n\n    this._scrollAnimation = tween(this.visibleRect, offset, duration, easeOut, offset => {this._setContentOffset(offset);});\n    this._scrollAnimation.then(() => {\n      this._scrollAnimation = null;\n\n      // Process view size updates that occurred during the animation.\n      // Only views that are still visible will be actually updated.\n      for (let [key, size] of this._sizeUpdateQueue) {\n        this.updateItemSize(key, size);\n      }\n\n      this._sizeUpdateQueue.clear();\n      this.relayout();\n      this._processTransactionQueue();\n      this.endScrolling();\n    });\n\n    return this._scrollAnimation;\n  }\n\n  private _runTransaction(action: () => void, animated?: boolean) {\n    this._startTransaction();\n    if (this._nextTransaction) {\n      this._nextTransaction.actions.push(action);\n    }\n    this._endTransaction(animated);\n  }\n\n  private _startTransaction() {\n    if (!this._nextTransaction) {\n      this._nextTransaction = new Transaction;\n    }\n\n    this._nextTransaction.level++;\n  }\n\n  private _endTransaction(animated?: boolean) {\n    if (!this._nextTransaction) {\n      return false;\n    }\n\n    // Save whether the transaction should be animated.\n    if (animated != null) {\n      this._nextTransaction.animated = animated;\n    }\n\n    // If we haven't reached level 0, we are still in a\n    // nested transaction. Wait for the parent to end.\n    if (--this._nextTransaction.level > 0) {\n      return false;\n    }\n\n    // Do nothing for empty transactions\n    if (this._nextTransaction.actions.length === 0) {\n      this._nextTransaction = null;\n      return false;\n    }\n\n    // Default animations to true\n    if (this._nextTransaction.animated == null) {\n      this._nextTransaction.animated = true;\n    }\n\n    // Enqueue the transaction\n    this._transactionQueue.push(this._nextTransaction);\n    this._nextTransaction = null;\n\n    this._processTransactionQueue();\n    return true;\n  }\n\n  private _processTransactionQueue() {\n    // If the current transaction is animating, wait until the end\n    // to process the next transaction.\n    if (this._transaction || this._scrollAnimation) {\n      return;\n    }\n\n    let next = this._transactionQueue.shift();\n    if (next) {\n      this._performTransaction(next);\n    }\n  }\n\n  private _getContentRect(): Rect {\n    return new Rect(0, 0, this.contentSize.width, this.contentSize.height);\n  }\n\n  private _performTransaction(transaction: Transaction<T, V>) {\n    this._transaction = transaction;\n\n    this.relayoutNow({\n      transaction: transaction,\n      animated: transaction.animated,\n\n      beforeLayout: () => {\n        // Get the initial layout infos for all views before the updates\n        // so we can figure out which views to add and remove.\n        if (transaction.animated) {\n          transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);\n        }\n\n        // Apply the actions that occurred during this transaction\n        for (let action of transaction.actions) {\n          action();\n        }\n      },\n\n      afterLayout: () => {\n        // Get the final layout infos after the updates\n        if (transaction.animated) {\n          transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());\n          this._setupTransactionAnimations(transaction);\n        } else {\n          this._transaction = null;\n        }\n      },\n\n      afterAnimation: () => {\n        // Remove and reuse views when animations are done\n        if (transaction.toRemove.size > 0 || transaction.removed.size > 0) {\n          for (let view of concatIterators(transaction.toRemove.values(), transaction.removed.values())) {\n            this._children.delete(view);\n            this.reuseView(view);\n          }\n        }\n\n        this._transaction = null;\n\n        // Ensure DOM order is correct for accessibility after animations are complete\n        this._correctItemOrder();\n        this._flushVisibleViews();\n\n        this._processTransactionQueue();\n      }\n    });\n  }\n\n  private _setupTransactionAnimations(transaction: Transaction<T, V>) {\n    let {initialMap, finalMap} = transaction;\n\n    // Store initial and final layout infos for animations\n    for (let [key, layoutInfo] of initialMap) {\n      if (finalMap.has(key)) {\n        // Store the initial layout info for use during animations.\n        transaction.initialLayoutInfo.set(key, layoutInfo);\n      } else {\n        // This view was removed. Store the layout info for use\n        // in Layout#getFinalLayoutInfo during animations.\n        transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);\n      }\n    }\n\n    // Get initial layout infos for views that were added\n    for (let [key, layoutInfo] of finalMap) {\n      if (!initialMap.has(key)) {\n        let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo.copy());\n        transaction.initialLayoutInfo.set(key, initialLayoutInfo);\n      }\n    }\n\n    // Figure out which views were removed.\n    for (let [key, view] of this._visibleViews) {\n      // If an item has a width of 0, there is no need to remove it from the _visibleViews.\n      // Removing an item with  width of 0 can cause a loop where the item gets added, removed,\n      // added, removed... etc in a loop.\n      if (!finalMap.has(key) && view.layoutInfo.rect.width > 0) {\n        transaction.removed.set(key, view);\n        this._visibleViews.delete(key);\n\n        // In case something weird happened, where we have a view but no\n        // initial layout info, use the one attached to the view.\n        if (view.layoutInfo) {\n          if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) {\n            transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n          }\n        }\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\n\n// use high res timer if available\nlet perf = typeof window !== 'undefined' ? window.performance : null;\n// @ts-ignore\nlet perfNow = perf && (perf.now || perf.webkitNow || perf.msNow || perf.mozNow);\nlet getTime = perfNow ? perfNow.bind(perf) : function () {\n  return Date.now ? Date.now() : new Date().getTime();\n};\n\nlet fixTs: boolean;\n\nexport interface CancelablePromise<T> extends Promise<T> {\n  cancel(): void\n}\n\nexport function tween(begin, end, duration, ease, fn): CancelablePromise<void> {\n  let canceled = false;\n  let raf_id: number;\n\n  let promise = new Promise(resolve => {\n    let start = getTime();\n    let diffX = end.x - begin.x;\n    let diffY = end.y - begin.y;\n\n    raf_id = requestAnimationFrame(function run(t) {\n      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.\n      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n      if (fixTs == null) {\n        fixTs = t > 1e12 !== getTime() > 1e12;\n      }\n\n      if (fixTs) {\n        t = getTime();\n      }\n\n      // check if we're done\n      let delta = t - start;\n      if (delta > duration) {\n        fn(end);\n        resolve();\n      } else {\n        // call frame callback after computing eased time and get the next frame\n        let proceed = fn(new Point(\n          begin.x + diffX * ease(delta / duration),\n          begin.y + diffY * ease(delta / duration)\n        ));\n\n        if (proceed !== false && !canceled) {\n          raf_id = requestAnimationFrame(run);\n        }\n      }\n    });\n  }) as CancelablePromise<void>;\n\n  promise.cancel = function () {\n    canceled = true;\n    cancelAnimationFrame(raf_id);\n  };\n\n  return promise;\n}\n\n// easing functions\nexport function linearEasing(t) {\n  return t;\n}\n\nexport function easeOut(t) {\n  return Math.sin(t * Math.PI / 2);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Rect} from './Rect';\n\nclass RollingAverage {\n  private count: number = 0;\n  value: number = 0;\n  \n  addSample(sample: number) {\n    this.count++;\n    this.value += (sample - this.value) / this.count;\n  }\n}\n\nexport class OverscanManager {\n  private startTime = 0;\n  private averagePerf = new RollingAverage();\n  private averageTime = new RollingAverage();\n  private velocity = new Point(5, 5);\n  private overscanX = new RollingAverage();\n  private overscanY = new RollingAverage();\n  private visibleRect = new Rect();\n  \n  setVisibleRect(rect: Rect) {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averageTime.addSample(time);\n\n      if (rect.x !== this.visibleRect.x && time > 0) {\n        this.velocity.x = (rect.x - this.visibleRect.x) / time;\n      }\n\n      if (rect.y !== this.visibleRect.y && time > 0) {\n        this.velocity.y = (rect.y - this.visibleRect.y) / time;\n      }\n    }\n\n    this.startTime = performance.now();\n    this.visibleRect = rect;\n  }\n\n  collectMetrics() {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averagePerf.addSample(time);\n    }\n\n    if (this.visibleRect.height > 0) {\n      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanY.addSample(o);\n    }\n\n    if (this.visibleRect.width > 0) {\n      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanX.addSample(o);\n    }\n  }\n\n  getOverscannedRect() {\n    let overscanned = this.visibleRect.copy();\n\n    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n    if (this.velocity.y > 0) {\n      overscanned.y -= overscanY * 0.2;\n      overscanned.height += overscanY + overscanY * 0.2;\n    } else {\n      overscanned.y -= overscanY;\n      overscanned.height += overscanY + overscanY * 0.2;\n    }\n\n    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n    if (this.velocity.x > 0) {\n      overscanned.x -= overscanX * 0.2;\n      overscanned.width += overscanX + overscanX * 0.2;\n    } else {\n      overscanned.x -= overscanX;\n      overscanned.width += overscanX + overscanX * 0.2;\n    }\n\n    return overscanned;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {ReusableView} from './ReusableView';\n\ntype LayoutInfoMap = Map<Key, LayoutInfo>;\nexport class Transaction<T extends object, V> {\n  level = 0;\n  actions: (() => void)[] = [];\n  animated = true;\n  initialMap: LayoutInfoMap = new Map();\n  finalMap: LayoutInfoMap = new Map();\n  initialLayoutInfo: LayoutInfoMap = new Map();\n  finalLayoutInfo: LayoutInfoMap = new Map();\n  removed: Map<Key, ReusableView<T, V>> = new Map();\n  toRemove: Map<Key, ReusableView<T, V>> = new Map();\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}