{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/gonca/Downloads/my-app/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/gonca/Downloads/my-app/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"C:/Users/gonca/Downloads/my-app/my-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/gonca/Downloads/my-app/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/gonca/Downloads/my-app/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _toConsumableArray from \"C:/Users/gonca/Downloads/my-app/my-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { useMemo as $cAn5f$useMemo, useEffect as $cAn5f$useEffect } from \"react\";\nimport { useMultipleSelectionState as $cAn5f$useMultipleSelectionState, SelectionManager as $cAn5f$SelectionManager } from \"@react-stately/selection\";\nimport $cAn5f$swchelperssrc_define_propertymjs from \"@swc/helpers/src/_define_property.mjs\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $62967d126f3aa823$export$4007ac09ff9c68ed(props) {\n  var collection = props.collection,\n    focusMode = props.focusMode;\n  var selectionState = (0, $cAn5f$useMultipleSelectionState)(props);\n  var disabledKeys = (0, $cAn5f$useMemo)(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n  var setFocusedKey = selectionState.setFocusedKey;\n  selectionState.setFocusedKey = function (key, child) {\n    // If focusMode is cell and an item is focused, focus a child cell instead.\n    if (focusMode === \"cell\" && key != null) {\n      var item = collection.getItem(key);\n      if ((item === null || item === void 0 ? void 0 : item.type) === \"item\") {\n        var _children_, _children_1;\n        var children = _toConsumableArray(item.childNodes);\n        if (child === \"last\") key = (_children_ = children[children.length - 1]) === null || _children_ === void 0 ? void 0 : _children_.key;else key = (_children_1 = children[0]) === null || _children_1 === void 0 ? void 0 : _children_1.key;\n      }\n    }\n    setFocusedKey(key, child);\n  };\n  // Reset focused key if that item is deleted from the collection.\n  (0, $cAn5f$useEffect)(function () {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);\n  }, [collection, selectionState]);\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    isKeyboardNavigationDisabled: false,\n    selectionManager: new (0, $cAn5f$SelectionManager)(collection, selectionState)\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $16805b1b18093c5f$var$_Symbol_iterator = Symbol.iterator;\nvar $16805b1b18093c5f$export$de3fdf6493c353d = /*#__PURE__*/function () {\n  function $16805b1b18093c5f$export$de3fdf6493c353d(opts) {\n    var _this = this;\n    _classCallCheck(this, $16805b1b18093c5f$export$de3fdf6493c353d);\n    (0, $cAn5f$swchelperssrc_define_propertymjs)(this, \"keyMap\", new Map());\n    this.keyMap = new Map();\n    this.columnCount = opts === null || opts === void 0 ? void 0 : opts.columnCount;\n    this.rows = [];\n    var visit = function visit(node) {\n      // If the node is the same object as the previous node for the same key,\n      // we can skip this node and its children. We always visit columns though,\n      // because we depend on order to build the columns array.\n      var prevNode = _this.keyMap.get(node.key);\n      if (opts.visitNode) node = opts.visitNode(node);\n      _this.keyMap.set(node.key, node);\n      var childKeys = new Set();\n      var last;\n      var _iterator = _createForOfIteratorHelper(node.childNodes),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          if (child.type === \"cell\" && child.parentKey == null)\n            // if child is a cell parent key isn't already established by the collection, match child node to parent row\n            child.parentKey = node.key;\n          childKeys.add(child.key);\n          if (last) {\n            last.nextKey = child.key;\n            child.prevKey = last.key;\n          } else child.prevKey = null;\n          visit(child);\n          last = child;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (last) last.nextKey = null;\n      // Remove deleted nodes and their children from the key map\n      if (prevNode) {\n        var _iterator2 = _createForOfIteratorHelper(prevNode.childNodes),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var child1 = _step2.value;\n            if (!childKeys.has(child1.key)) remove(child1);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    };\n    var remove = function remove(node) {\n      _this.keyMap.delete(node.key);\n      var _iterator3 = _createForOfIteratorHelper(node.childNodes),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var child = _step3.value;\n          if (_this.keyMap.get(child.key) === child) remove(child);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    };\n    var last;\n    opts.items.forEach(function (node, i) {\n      var rowNode = _objectSpread(_objectSpread({\n        level: 0,\n        key: \"row-\" + i,\n        type: \"row\",\n        value: undefined,\n        hasChildNodes: true,\n        childNodes: _toConsumableArray(node.childNodes),\n        rendered: undefined,\n        textValue: undefined\n      }, node), {}, {\n        index: i\n      });\n      if (last) {\n        last.nextKey = rowNode.key;\n        rowNode.prevKey = last.key;\n      } else rowNode.prevKey = null;\n      _this.rows.push(rowNode);\n      visit(rowNode);\n      last = rowNode;\n    });\n    if (last) last.nextKey = null;\n  }\n  _createClass($16805b1b18093c5f$export$de3fdf6493c353d, [{\n    key: $16805b1b18093c5f$var$_Symbol_iterator,\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n      return _regeneratorRuntime().wrap(function value$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            return _context.delegateYield(_toConsumableArray(this.rows), \"t0\", 1);\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"size\",\n    get: function get() {\n      return _toConsumableArray(this.rows).length;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return this.keyMap.keys();\n    }\n  }, {\n    key: \"getKeyBefore\",\n    value: function getKeyBefore(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.prevKey : null;\n    }\n  }, {\n    key: \"getKeyAfter\",\n    value: function getKeyAfter(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.nextKey : null;\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      var _;\n      return (_ = _toConsumableArray(this.rows)[0]) === null || _ === void 0 ? void 0 : _.key;\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      var _rows_;\n      var rows = _toConsumableArray(this.rows);\n      return (_rows_ = rows[rows.length - 1]) === null || _rows_ === void 0 ? void 0 : _rows_.key;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.keyMap.get(key);\n    }\n  }, {\n    key: \"at\",\n    value: function at(idx) {\n      var keys = _toConsumableArray(this.getKeys());\n      return this.getItem(keys[idx]);\n    }\n  }]);\n  return $16805b1b18093c5f$export$de3fdf6493c353d;\n}();\nexport { $62967d126f3aa823$export$4007ac09ff9c68ed as useGridState, $16805b1b18093c5f$export$de3fdf6493c353d as GridCollection };","map":{"version":3,"mappings":"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","names":["$62967d126f3aa823$export$4007ac09ff9c68ed","props","collection","focusMode","selectionState","disabledKeys","Set","setFocusedKey","key","child","item","getItem","type","_children_","_children_1","children","childNodes","length","focusedKey","isKeyboardNavigationDisabled","selectionManager","$16805b1b18093c5f$var$_Symbol_iterator","iterator","$16805b1b18093c5f$export$de3fdf6493c353d","opts","Map","keyMap","columnCount","rows","visit","node","prevNode","get","visitNode","set","childKeys","last","parentKey","add","nextKey","prevKey","child1","has","remove","delete","items","forEach","i","rowNode","level","value","undefined","hasChildNodes","rendered","textValue","index","push","keys","_","_rows_","idx","getKeys"],"sources":["C:\\Users\\gonca\\Downloads\\my-app\\my-app\\node_modules\\@react-stately\\grid\\dist\\packages\\@react-stately\\grid\\src\\index.ts","C:\\Users\\gonca\\Downloads\\my-app\\my-app\\node_modules\\@react-stately\\grid\\dist\\packages\\@react-stately\\grid\\src\\useGridState.ts","C:\\Users\\gonca\\Downloads\\my-app\\my-app\\node_modules\\@react-stately\\grid\\dist\\packages\\@react-stately\\grid\\src\\GridCollection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useGridState} from './useGridState';\nexport {GridCollection} from './GridCollection';\n\nexport type {GridStateOptions, GridState} from './useGridState';\n","import {GridCollection} from '@react-types/grid';\nimport {Key, useEffect, useMemo} from 'react';\nimport {MultipleSelectionStateProps, SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\n\nexport interface GridState<T, C extends GridCollection<T>> {\n  collection: C,\n  /** A set of keys for rows that are disabled. */\n  disabledKeys: Set<Key>,\n  /** A selection manager to read and update row selection state. */\n  selectionManager: SelectionManager,\n  /** Whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  isKeyboardNavigationDisabled: boolean\n}\n\nexport interface GridStateOptions<T, C extends GridCollection<T>> extends MultipleSelectionStateProps {\n  collection: C,\n  disabledKeys?: Iterable<Key>,\n  focusMode?: 'row' | 'cell'\n}\n\n/**\n * Provides state management for a grid component. Handles row selection and focusing a grid cell's focusable child if applicable.\n */\nexport function useGridState<T extends object, C extends GridCollection<T>>(props: GridStateOptions<T, C>): GridState<T, C> {\n  let {collection, focusMode} = props;\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n      props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n    , [props.disabledKeys]);\n\n  let setFocusedKey = selectionState.setFocusedKey;\n  selectionState.setFocusedKey = (key, child) => {\n    // If focusMode is cell and an item is focused, focus a child cell instead.\n    if (focusMode === 'cell' && key != null) {\n      let item = collection.getItem(key);\n      if (item?.type === 'item') {\n        let children = [...item.childNodes];\n        if (child === 'last') {\n          key = children[children.length - 1]?.key;\n        } else {\n          key = children[0]?.key;\n        }\n      }\n    }\n\n    setFocusedKey(key, child);\n  };\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [collection, selectionState]);\n\n  return {\n    collection,\n    disabledKeys,\n    isKeyboardNavigationDisabled: false,\n    selectionManager: new SelectionManager(collection, selectionState)\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {GridNode, GridRow, GridCollection as IGridCollection} from '@react-types/grid';\nimport {Key} from 'react';\n\n\ninterface GridCollectionOptions<T> {\n  columnCount: number,\n  items: GridRow<T>[],\n  visitNode?: (cell: GridNode<T>) => GridNode<T>\n}\n\nexport class GridCollection<T> implements IGridCollection<T> {\n  keyMap: Map<Key, GridNode<T>> = new Map();\n  columnCount: number;\n  rows: GridNode<T>[];\n\n  constructor(opts?: GridCollectionOptions<T>) {\n    this.keyMap = new Map();\n    this.columnCount = opts?.columnCount;\n    this.rows = [];\n\n    let visit = (node: GridNode<T>) => {\n      // If the node is the same object as the previous node for the same key,\n      // we can skip this node and its children. We always visit columns though,\n      // because we depend on order to build the columns array.\n      let prevNode = this.keyMap.get(node.key);\n      if (opts.visitNode) {\n        node = opts.visitNode(node);\n      }\n\n      this.keyMap.set(node.key, node);\n\n      let childKeys = new Set();\n      let last: GridNode<T>;\n      for (let child of node.childNodes) {\n        if (child.type === 'cell' && child.parentKey == null) {\n          // if child is a cell parent key isn't already established by the collection, match child node to parent row\n          child.parentKey = node.key;\n        }\n        childKeys.add(child.key);\n\n        if (last) {\n          last.nextKey = child.key;\n          child.prevKey = last.key;\n        } else {\n          child.prevKey = null;\n        }\n\n        visit(child);\n        last = child;\n      }\n\n      if (last) {\n        last.nextKey = null;\n      }\n\n      // Remove deleted nodes and their children from the key map\n      if (prevNode) {\n        for (let child of prevNode.childNodes) {\n          if (!childKeys.has(child.key)) {\n            remove(child);\n          }\n        }\n      }\n    };\n\n    let remove = (node: GridNode<T>) => {\n      this.keyMap.delete(node.key);\n      for (let child of node.childNodes) {\n        if (this.keyMap.get(child.key) === child) {\n          remove(child);\n        }\n      }\n    };\n\n    let last: GridNode<T>;\n    opts.items.forEach((node, i) => {\n      let rowNode = {\n        level: 0,\n        key: 'row-' + i,\n        type: 'row',\n        value: undefined,\n        hasChildNodes: true,\n        childNodes: [...node.childNodes],\n        rendered: undefined,\n        textValue: undefined,\n        ...node,\n        index: i\n      } as GridNode<T>;\n\n      if (last) {\n        last.nextKey = rowNode.key;\n        rowNode.prevKey = last.key;\n      } else {\n        rowNode.prevKey = null;\n      }\n\n      this.rows.push(rowNode);\n      visit(rowNode);\n\n      last = rowNode;\n    });\n\n    if (last) {\n      last.nextKey = null;\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* [...this.rows];\n  }\n\n  get size() {\n    return [...this.rows].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.rows][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.rows];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}