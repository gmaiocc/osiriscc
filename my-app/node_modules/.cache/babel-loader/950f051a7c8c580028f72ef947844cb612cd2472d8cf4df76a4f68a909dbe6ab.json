{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createForOfIteratorHelper from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { Section as $6555104ff085bef4$re_export$Section, useCollection as $1BfjW$useCollection } from \"@react-stately/collections\";\nimport $1BfjW$react, { useRef as $1BfjW$useRef, useState as $1BfjW$useState, useCallback as $1BfjW$useCallback, useMemo as $1BfjW$useMemo } from \"react\";\nimport { useGridState as $1BfjW$useGridState, GridCollection as $1BfjW$GridCollection } from \"@react-stately/grid\";\nfunction $30561577df230a30$export$f61abf052f87399f(widths) {\n  return Array.from(widths).map(function (e) {\n    return e[1];\n  }).reduce(function (acc, cur) {\n    return acc + cur;\n  }, 0);\n}\nfunction $30561577df230a30$export$1994a077b98ee0d5(width) {\n  return width != null && (!isNaN(width) || String(width).match(/^(\\d+)(?=%$)/) !== null);\n}\nfunction $30561577df230a30$var$parseFractionalUnit(width) {\n  if (!width) return 1;\n  var match = width.match(/^(\\d+)(?=fr$)/);\n  // if width is the incorrect format, just deafult it to a 1fr\n  if (!match) {\n    console.warn(\"width: \".concat(width, \" is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')\"), 'defaulting to \\'1fr\\'');\n    return 1;\n  }\n  return parseInt(match[0], 10);\n}\nfunction $30561577df230a30$export$7bbad27896f7ae9f(width, tableWidth) {\n  if (typeof width === 'string') {\n    var match = width.match(/^(\\d+)(?=%$)/);\n    if (!match) throw new Error('Only percentages or numbers are supported for static column widths');\n    return tableWidth * (parseInt(match[0], 10) / 100);\n  }\n  return width;\n}\nfunction $30561577df230a30$export$59185c62a7544aa0(maxWidth, tableWidth) {\n  return maxWidth != null ? $30561577df230a30$export$7bbad27896f7ae9f(maxWidth, tableWidth) : Number.MAX_SAFE_INTEGER;\n}\nfunction $30561577df230a30$export$f556054ce4358701(minWidth, tableWidth) {\n  return minWidth != null ? $30561577df230a30$export$7bbad27896f7ae9f(minWidth, tableWidth) : 75;\n}\nfunction $30561577df230a30$var$mapDynamicColumns(dynamicColumns, availableSpace, tableWidth) {\n  var fractions = dynamicColumns.reduce(function (sum, column) {\n    return sum + $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth);\n  }, 0);\n  var columns = dynamicColumns.map(function (column, index) {\n    var targetWidth = $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth) * availableSpace / fractions;\n    var delta = Math.max($30561577df230a30$export$f556054ce4358701(column.props.minWidth, tableWidth) - targetWidth, targetWidth - $30561577df230a30$export$59185c62a7544aa0(column.props.maxWidth, tableWidth));\n    return _objectSpread(_objectSpread({}, column), {}, {\n      index: index,\n      delta: delta\n    });\n  });\n  return columns;\n}\nfunction $30561577df230a30$var$findDynamicColumnWidths(dynamicColumns, availableSpace, tableWidth) {\n  var fractions = dynamicColumns.reduce(function (sum, col) {\n    return sum + $30561577df230a30$var$parseFractionalUnit(col.props.defaultWidth);\n  }, 0);\n  var columns = dynamicColumns.map(function (column) {\n    var targetWidth = $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth) * availableSpace / fractions;\n    var width = Math.max($30561577df230a30$export$f556054ce4358701(column.props.minWidth, tableWidth), Math.min(Math.floor(targetWidth), $30561577df230a30$export$59185c62a7544aa0(column.props.maxWidth, tableWidth)));\n    column.calculatedWidth = width;\n    availableSpace -= width;\n    fractions -= $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth);\n    return column;\n  });\n  return columns;\n}\nfunction $30561577df230a30$export$a870e6692ac5ccb2(dynamicColumns, availableSpace, tableWidth) {\n  var columns = $30561577df230a30$var$mapDynamicColumns(dynamicColumns, availableSpace, tableWidth);\n  columns.sort(function (a, b) {\n    return b.delta - a.delta;\n  });\n  columns = $30561577df230a30$var$findDynamicColumnWidths(columns, availableSpace, tableWidth);\n  columns.sort(function (a, b) {\n    return a.index - b.index;\n  });\n  return columns;\n}\nfunction $292bc4e09cd0eb62$export$cb895dcf85db1319(props, state) {\n  var getDefaultWidth = props.getDefaultWidth,\n    _props$tableWidth = props.tableWidth,\n    defaultTableWidth = _props$tableWidth === void 0 ? null : _props$tableWidth;\n  var columns1 = state.columns;\n  var columnsRef = $1BfjW$useRef([]);\n  var tableWidth = $1BfjW$useRef(defaultTableWidth);\n  var isResizing = $1BfjW$useRef(null);\n  var startResizeContentWidth = $1BfjW$useRef();\n  var _$1BfjW$useState = $1BfjW$useState(new Map(columns1.map(function (col) {\n      return [col.key, 0];\n    }))),\n    _$1BfjW$useState2 = _slicedToArray(_$1BfjW$useState, 2),\n    columnWidths = _$1BfjW$useState2[0],\n    setColumnWidths = _$1BfjW$useState2[1];\n  var columnWidthsRef = $1BfjW$useRef(columnWidths);\n  var affectedColumnWidthsRef = $1BfjW$useRef([]);\n  var _$1BfjW$useState3 = $1BfjW$useState(new Set()),\n    _$1BfjW$useState4 = _slicedToArray(_$1BfjW$useState3, 2),\n    resizedColumns = _$1BfjW$useState4[0],\n    setResizedColumns = _$1BfjW$useState4[1];\n  var resizedColumnsRef = $1BfjW$useRef(resizedColumns);\n  var _$1BfjW$useState5 = $1BfjW$useState(null),\n    _$1BfjW$useState6 = _slicedToArray(_$1BfjW$useState5, 2),\n    currentlyResizingColumn = _$1BfjW$useState6[0],\n    setCurrentlyResizingColumn = _$1BfjW$useState6[1];\n  function setColumnWidthsForRef(newWidths) {\n    columnWidthsRef.current = newWidths;\n    // new map so that change detection is triggered\n    setColumnWidths(newWidths);\n  }\n  /*\n  returns the resolved column width in this order:\n  previously calculated width -> controlled width prop -> uncontrolled defaultWidth prop -> dev assigned width -> default dynamic width\n  */\n  var getResolvedColumnWidth = $1BfjW$useCallback(function (column) {\n    var columnProps = column.props;\n    var _width, ref, ref1;\n    return (resizedColumns === null || resizedColumns === void 0 ? void 0 : resizedColumns.has(column.key)) ? columnWidthsRef.current.get(column.key) : (ref1 = (ref = (_width = columnProps.width) !== null && _width !== void 0 ? _width : columnProps.defaultWidth) !== null && ref !== void 0 ? ref : getDefaultWidth === null || getDefaultWidth === void 0 ? void 0 : getDefaultWidth(column.props)) !== null && ref1 !== void 0 ? ref1 : '1fr';\n  }, [getDefaultWidth, resizedColumns]);\n  var getStaticAndDynamicColumns = $1BfjW$useCallback(function (columns) {\n    return columns.reduce(function (acc, column) {\n      var width = getResolvedColumnWidth(column);\n      return $30561577df230a30$export$1994a077b98ee0d5(width) ? _objectSpread(_objectSpread({}, acc), {}, {\n        staticColumns: [].concat(_toConsumableArray(acc.staticColumns), [column])\n      }) : _objectSpread(_objectSpread({}, acc), {}, {\n        dynamicColumns: [].concat(_toConsumableArray(acc.dynamicColumns), [column])\n      });\n    }, {\n      staticColumns: [],\n      dynamicColumns: []\n    });\n  }, [getResolvedColumnWidth]);\n  var buildColumnWidths = $1BfjW$useCallback(function (affectedColumns, availableSpace) {\n    var widths = new Map();\n    var remainingSpace = availableSpace;\n    var _getStaticAndDynamicC = getStaticAndDynamicColumns(affectedColumns),\n      staticColumns = _getStaticAndDynamicC.staticColumns,\n      dynamicColumns = _getStaticAndDynamicC.dynamicColumns;\n    staticColumns.forEach(function (column) {\n      var width = getResolvedColumnWidth(column);\n      var w = $30561577df230a30$export$7bbad27896f7ae9f(width, tableWidth.current);\n      widths.set(column.key, w);\n      remainingSpace -= w;\n    });\n    // dynamic columns\n    if (dynamicColumns.length > 0) {\n      var newColumnWidths = $30561577df230a30$export$a870e6692ac5ccb2(dynamicColumns, remainingSpace, tableWidth.current);\n      var _iterator = _createForOfIteratorHelper(newColumnWidths),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var column = _step.value;\n          widths.set(column.key, column.calculatedWidth);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    return widths;\n  }, [getStaticAndDynamicColumns, getResolvedColumnWidth]);\n  var prevColKeys = columnsRef.current.map(function (col) {\n    return col.key;\n  });\n  var colKeys = columns1.map(function (col) {\n    return col.key;\n  });\n  // if the columns change, need to rebuild widths.\n  if (prevColKeys.length !== colKeys.length || !colKeys.every(function (col, i) {\n    return col === prevColKeys[i];\n  })) {\n    columnsRef.current = columns1;\n    var widths = buildColumnWidths(columns1, tableWidth.current);\n    setColumnWidthsForRef(widths);\n  }\n  function setTableWidth(width) {\n    if (width && width !== tableWidth.current) {\n      tableWidth.current = width;\n      if (!isResizing.current) {\n        var _widths = buildColumnWidths(columns1, width);\n        setColumnWidthsForRef(_widths);\n      }\n    }\n  }\n  function onColumnResizeStart(column) {\n    setCurrentlyResizingColumn(column.key);\n    isResizing.current = true;\n    startResizeContentWidth.current = $30561577df230a30$export$f61abf052f87399f(columnWidthsRef.current);\n  }\n  function onColumnResize(column, width) {\n    var widthsObj = resizeColumn(column, width);\n    affectedColumnWidthsRef.current = widthsObj;\n    props.onColumnResize && props.onColumnResize(affectedColumnWidthsRef.current);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  function onColumnResizeEnd(column) {\n    props.onColumnResizeEnd && isResizing.current && props.onColumnResizeEnd(affectedColumnWidthsRef.current);\n    setCurrentlyResizingColumn(null);\n    isResizing.current = false;\n    affectedColumnWidthsRef.current = [];\n    var widths = new Map(columnWidthsRef.current);\n    setColumnWidthsForRef(widths);\n  }\n  function resizeColumn(column1, newWidth) {\n    var boundedWidth = Math.max($30561577df230a30$export$f556054ce4358701(column1.props.minWidth, tableWidth.current), Math.min(Math.floor(newWidth), $30561577df230a30$export$59185c62a7544aa0(column1.props.maxWidth, tableWidth.current)));\n    // copy the columnWidths map and set the new width for the column being resized\n    var widths = new Map(columnWidthsRef.current);\n    widths.set(column1.key, boundedWidth);\n    // keep track of all columns that have been sized\n    resizedColumnsRef.current.add(column1.key);\n    setResizedColumns(resizedColumnsRef.current);\n    // get the columns affected by resize and remaining space\n    var resizeIndex = columnsRef.current.findIndex(function (col) {\n      return col.key === column1.key;\n    });\n    var affectedColumns = columnsRef.current.slice(resizeIndex + 1);\n    // we only care about the columns that CAN be resized, we ignore static columns.\n    var _getStaticAndDynamicC2 = getStaticAndDynamicColumns(affectedColumns),\n      dynamicColumns = _getStaticAndDynamicC2.dynamicColumns;\n    // available space for affected columns\n    var availableSpace = columnsRef.current.reduce(function (acc, column, index) {\n      if (index <= resizeIndex || $30561577df230a30$export$1994a077b98ee0d5(getResolvedColumnWidth(column))) return acc - widths.get(column.key);\n      return acc;\n    }, tableWidth.current);\n    // merge the unaffected column widths and the recalculated column widths\n    var recalculatedColumnWidths = buildColumnWidths(dynamicColumns, availableSpace);\n    widths = new Map([].concat(_toConsumableArray(widths), _toConsumableArray(recalculatedColumnWidths)));\n    setColumnWidthsForRef(widths);\n    /*\n    when getting recalculated columns above, the column being resized is not considered \"recalculated\"\n    so we need to add it to the list of affected columns\n    */\n    var allAffectedColumns = [[column1.key, boundedWidth]].concat(_toConsumableArray(recalculatedColumnWidths)).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        width = _ref2[1];\n      return {\n        key: key,\n        width: width\n      };\n    });\n    return allAffectedColumns;\n  }\n  var ref2;\n  // This function is regenerated whenever columnWidthsRef.current changes in order to get the new correct ref value.\n  var getColumnWidth = $1BfjW$useCallback(function (key) {\n    return (ref2 = columnWidthsRef.current.get(key)) !== null && ref2 !== void 0 ? ref2 : 0;\n  }, [columnWidthsRef.current]);\n  var getColumnMinWidth = $1BfjW$useCallback(function (key) {\n    var columnIndex = columns1.findIndex(function (col) {\n      return col.key === key;\n    });\n    if (columnIndex === -1) return;\n    return $30561577df230a30$export$f556054ce4358701(columns1[columnIndex].props.minWidth, tableWidth.current);\n  }, [columns1]);\n  var getColumnMaxWidth = $1BfjW$useCallback(function (key) {\n    var columnIndex = columns1.findIndex(function (col) {\n      return col.key === key;\n    });\n    if (columnIndex === -1) return;\n    return $30561577df230a30$export$59185c62a7544aa0(columns1[columnIndex].props.maxWidth, tableWidth.current);\n  }, [columns1]);\n  return {\n    columnWidths: columnWidthsRef,\n    setTableWidth: setTableWidth,\n    onColumnResize: onColumnResize,\n    onColumnResizeStart: onColumnResizeStart,\n    onColumnResizeEnd: onColumnResizeEnd,\n    getColumnWidth: getColumnWidth,\n    getColumnMinWidth: getColumnMinWidth,\n    getColumnMaxWidth: getColumnMaxWidth,\n    currentlyResizingColumn: currentlyResizingColumn\n  };\n}\nvar $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\nfunction $788781baa30117fa$var$buildHeaderRows(keyMap, columnNodes) {\n  var columns = [];\n  var seen = new Map();\n  var _iterator2 = _createForOfIteratorHelper(columnNodes),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var column = _step2.value;\n      var parentKey = column.parentKey;\n      var col = [column];\n      while (parentKey) {\n        var parent = keyMap.get(parentKey);\n        // If we've already seen this parent, than it is shared\n        // with a previous column. If the current column is taller\n        // than the previous column, than we need to shift the parent\n        // in the previous column so it's level with the current column.\n        if (seen.has(parent)) {\n          parent.colspan++;\n          var _seen$get = seen.get(parent),\n            _column = _seen$get.column,\n            index = _seen$get.index;\n          if (index > col.length) break;\n          for (var _i3 = index; _i3 < col.length; _i3++) _column.splice(_i3, 0, null);\n          // Adjust shifted indices\n          for (var i1 = col.length; i1 < _column.length; i1++) if (_column[i1] && seen.has(_column[i1])) seen.get(_column[i1]).index = i1;\n        } else {\n          parent.colspan = 1;\n          col.push(parent);\n          seen.set(parent, {\n            column: col,\n            index: col.length - 1\n          });\n        }\n        parentKey = parent.parentKey;\n      }\n      columns.push(col);\n      column.index = columns.length - 1;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  var maxLength = Math.max.apply(Math, _toConsumableArray(columns.map(function (c) {\n    return c.length;\n  })));\n  var headerRows = Array(maxLength).fill(0).map(function () {\n    return [];\n  });\n  // Convert columns into rows.\n  var colIndex = 0;\n  for (var _i = 0, _columns = columns; _i < _columns.length; _i++) {\n    var column1 = _columns[_i];\n    var _i2 = maxLength - 1;\n    var _iterator3 = _createForOfIteratorHelper(column1),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var item = _step3.value;\n        if (item) {\n          // Fill the space up until the current column with a placeholder\n          var row = headerRows[_i2];\n          var rowLength = row.reduce(function (p, c) {\n            return p + c.colspan;\n          }, 0);\n          if (rowLength < colIndex) {\n            var placeholder = {\n              type: 'placeholder',\n              key: 'placeholder-' + item.key,\n              colspan: colIndex - rowLength,\n              index: rowLength,\n              value: null,\n              rendered: null,\n              level: _i2,\n              hasChildNodes: false,\n              childNodes: [],\n              textValue: null\n            };\n            if (row.length > 0) {\n              row[row.length - 1].nextKey = placeholder.key;\n              placeholder.prevKey = row[row.length - 1].key;\n            }\n            row.push(placeholder);\n          }\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = item.key;\n            item.prevKey = row[row.length - 1].key;\n          }\n          item.level = _i2;\n          item.colIndex = colIndex;\n          row.push(item);\n        }\n        _i2--;\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    colIndex++;\n  }\n  // Add placeholders at the end of each row that is shorter than the maximum\n  var i = 0;\n  var _iterator4 = _createForOfIteratorHelper(headerRows),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var row1 = _step4.value;\n      var _rowLength = row1.reduce(function (p, c) {\n        return p + c.colspan;\n      }, 0);\n      if (_rowLength < columnNodes.length) {\n        var _placeholder = {\n          type: 'placeholder',\n          key: 'placeholder-' + row1[row1.length - 1].key,\n          colspan: columnNodes.length - _rowLength,\n          index: _rowLength,\n          value: null,\n          rendered: null,\n          level: i,\n          hasChildNodes: false,\n          childNodes: [],\n          textValue: null,\n          prevKey: row1[row1.length - 1].key\n        };\n        row1.push(_placeholder);\n      }\n      i++;\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return headerRows.map(function (childNodes, index) {\n    var row = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index: index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes: childNodes,\n      textValue: null\n    };\n    return row;\n  });\n}\nvar tmp = Symbol.iterator;\nvar $788781baa30117fa$export$596e1b2e2cf93690 = /*#__PURE__*/function (_$1BfjW$GridCollectio) {\n  _inherits($788781baa30117fa$export$596e1b2e2cf93690, _$1BfjW$GridCollectio);\n  var _super = _createSuper($788781baa30117fa$export$596e1b2e2cf93690);\n  function $788781baa30117fa$export$596e1b2e2cf93690(nodes, prev, opts) {\n    var _this;\n    _classCallCheck(this, $788781baa30117fa$export$596e1b2e2cf93690);\n    var rowHeaderColumnKeys = new Set();\n    var body;\n    var columns = [];\n    // Add cell for selection checkboxes if needed.\n    if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {\n      var rowHeaderColumn = {\n        type: 'column',\n        key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n      columns.unshift(rowHeaderColumn);\n    }\n    var rows = [];\n    var columnKeyMap = new Map();\n    var visit = function visit(node) {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            columns.push(node);\n            if (node.props.isRowHeader) rowHeaderColumnKeys.add(node.key);\n          }\n          break;\n        case 'item':\n          rows.push(node);\n          return;\n        // do not go into childNodes\n      }\n      var _iterator5 = _createForOfIteratorHelper(node.childNodes),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var child = _step5.value;\n          visit(child);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    };\n    var _iterator6 = _createForOfIteratorHelper(nodes),\n      _step6;\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var node1 = _step6.value;\n        visit(node1);\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n    var headerRows = $788781baa30117fa$var$buildHeaderRows(columnKeyMap, columns);\n    headerRows.forEach(function (row, i) {\n      return rows.splice(i, 0, row);\n    });\n    _this = _super.call(this, {\n      columnCount: columns.length,\n      items: rows,\n      visitNode: function visitNode(node) {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    _this.columns = columns;\n    _this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    _this.body = body;\n    _this.headerRows = headerRows;\n    // Default row header column to the first one.\n    if (_this.rowHeaderColumnKeys.size === 0) _this.rowHeaderColumnKeys.add(_this.columns[(opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) ? 1 : 0].key);\n    return _this;\n  }\n  _createClass($788781baa30117fa$export$596e1b2e2cf93690, [{\n    key: tmp,\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n      return _regeneratorRuntime().wrap(function value$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            return _context.delegateYield(this.body.childNodes, \"t0\", 1);\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"size\",\n    get: function get() {\n      return _toConsumableArray(this.body.childNodes).length;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return this.keyMap.keys();\n    }\n  }, {\n    key: \"getKeyBefore\",\n    value: function getKeyBefore(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.prevKey : null;\n    }\n  }, {\n    key: \"getKeyAfter\",\n    value: function getKeyAfter(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.nextKey : null;\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      var ref;\n      return (ref = _toConsumableArray(this.body.childNodes)[0]) === null || ref === void 0 ? void 0 : ref.key;\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      var ref;\n      var rows = _toConsumableArray(this.body.childNodes);\n      return (ref = rows[rows.length - 1]) === null || ref === void 0 ? void 0 : ref.key;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.keyMap.get(key);\n    }\n  }, {\n    key: \"at\",\n    value: function at(idx) {\n      var keys = _toConsumableArray(this.getKeys());\n      return this.getItem(keys[idx]);\n    }\n  }]);\n  return $788781baa30117fa$export$596e1b2e2cf93690;\n}($1BfjW$GridCollection);\nvar $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending',\n  descending: 'ascending'\n};\nfunction $4a0dd036d492cee4$export$907bcc6c48325fd6(props) {\n  var _$1BfjW$useState7 = $1BfjW$useState(false),\n    _$1BfjW$useState8 = _slicedToArray(_$1BfjW$useState7, 2),\n    isKeyboardNavigationDisabled = _$1BfjW$useState8[0],\n    setKeyboardNavigationDisabled = _$1BfjW$useState8[1];\n  var _props$selectionMode = props.selectionMode,\n    selectionMode = _props$selectionMode === void 0 ? 'none' : _props$selectionMode;\n  var context = $1BfjW$useMemo(function () {\n    return {\n      showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n      selectionMode: selectionMode,\n      columns: []\n    };\n  }, [props.children, props.showSelectionCheckboxes, selectionMode]);\n  var collection = $1BfjW$useCollection(props, function (nodes, prev) {\n    return new $788781baa30117fa$export$596e1b2e2cf93690(nodes, prev, context);\n  }, context);\n  var _$1BfjW$useGridState = $1BfjW$useGridState(_objectSpread(_objectSpread({}, props), {}, {\n      collection: collection\n    })),\n    disabledKeys = _$1BfjW$useGridState.disabledKeys,\n    selectionManager = _$1BfjW$useGridState.selectionManager;\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    isKeyboardNavigationDisabled: collection.size === 0 || isKeyboardNavigationDisabled,\n    setKeyboardNavigationDisabled: setKeyboardNavigationDisabled,\n    sort: function sort(columnKey, direction) {\n      var ref;\n      props.onSortChange({\n        column: columnKey,\n        direction: direction !== null && direction !== void 0 ? direction : ((ref = props.sortDescriptor) === null || ref === void 0 ? void 0 : ref.column) === columnKey ? $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : 'ascending'\n      });\n    }\n  };\n}\nfunction $312ae3b56a94a86e$var$TableHeader(props) {\n  return null;\n}\n$312ae3b56a94a86e$var$TableHeader.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props) {\n  var children, columns, _iterator7, _step7, column, _columns2;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        children = props.children, columns = props.columns;\n        if (!(typeof children === 'function')) {\n          _context2.next = 23;\n          break;\n        }\n        if (columns) {\n          _context2.next = 4;\n          break;\n        }\n        throw new Error('props.children was a function but props.columns is missing');\n      case 4:\n        _iterator7 = _createForOfIteratorHelper(columns);\n        _context2.prev = 5;\n        _iterator7.s();\n      case 7:\n        if ((_step7 = _iterator7.n()).done) {\n          _context2.next = 13;\n          break;\n        }\n        column = _step7.value;\n        _context2.next = 11;\n        return {\n          type: 'column',\n          value: column,\n          renderer: children\n        };\n      case 11:\n        _context2.next = 7;\n        break;\n      case 13:\n        _context2.next = 18;\n        break;\n      case 15:\n        _context2.prev = 15;\n        _context2.t0 = _context2[\"catch\"](5);\n        _iterator7.e(_context2.t0);\n      case 18:\n        _context2.prev = 18;\n        _iterator7.f();\n        return _context2.finish(18);\n      case 21:\n        _context2.next = 26;\n        break;\n      case 23:\n        _columns2 = [];\n        $1BfjW$react.Children.forEach(children, function (column) {\n          _columns2.push({\n            type: 'column',\n            element: column\n          });\n        });\n        return _context2.delegateYield(_columns2, \"t1\", 26);\n      case 26:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, getCollectionNode, null, [[5, 15, 18, 21]]);\n});\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */ // We don't want getCollectionNode to show up in the type definition\nvar $312ae3b56a94a86e$export$f850895b287ef28e = $312ae3b56a94a86e$var$TableHeader;\nfunction $4ae5314bf50db1a3$var$TableBody(props) {\n  return null;\n}\n$4ae5314bf50db1a3$var$TableBody.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props) {\n  var children, items1;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        children = props.children, items1 = props.items;\n        _context4.next = 3;\n        return {\n          type: 'body',\n          hasChildNodes: true,\n          props: props,\n          childNodes: /*#__PURE__*/_regeneratorRuntime().mark(function childNodes() {\n            var _iterator8, _step8, item, items;\n            return _regeneratorRuntime().wrap(function childNodes$(_context3) {\n              while (1) switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (!(typeof children === 'function')) {\n                    _context3.next = 22;\n                    break;\n                  }\n                  if (items1) {\n                    _context3.next = 3;\n                    break;\n                  }\n                  throw new Error('props.children was a function but props.items is missing');\n                case 3:\n                  _iterator8 = _createForOfIteratorHelper(items1);\n                  _context3.prev = 4;\n                  _iterator8.s();\n                case 6:\n                  if ((_step8 = _iterator8.n()).done) {\n                    _context3.next = 12;\n                    break;\n                  }\n                  item = _step8.value;\n                  _context3.next = 10;\n                  return {\n                    type: 'item',\n                    value: item,\n                    renderer: children\n                  };\n                case 10:\n                  _context3.next = 6;\n                  break;\n                case 12:\n                  _context3.next = 17;\n                  break;\n                case 14:\n                  _context3.prev = 14;\n                  _context3.t0 = _context3[\"catch\"](4);\n                  _iterator8.e(_context3.t0);\n                case 17:\n                  _context3.prev = 17;\n                  _iterator8.f();\n                  return _context3.finish(17);\n                case 20:\n                  _context3.next = 25;\n                  break;\n                case 22:\n                  items = [];\n                  $1BfjW$react.Children.forEach(children, function (item) {\n                    items.push({\n                      type: 'item',\n                      element: item\n                    });\n                  });\n                  return _context3.delegateYield(items, \"t1\", 25);\n                case 25:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }, childNodes, null, [[4, 14, 17, 20]]);\n          })\n        };\n      case 3:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, getCollectionNode);\n});\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */ // We don't want getCollectionNode to show up in the type definition\nvar $4ae5314bf50db1a3$export$76ccd210b9029917 = $4ae5314bf50db1a3$var$TableBody;\nfunction $1cd244557c2f97d5$var$Column(props) {\n  return null;\n}\n$1cd244557c2f97d5$var$Column.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props, context1) {\n  var title, children, childColumns1, rendered, textValue, fullNodes, updateContext;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context6) {\n    while (1) switch (_context6.prev = _context6.next) {\n      case 0:\n        title = props.title, children = props.children, childColumns1 = props.childColumns;\n        rendered = title || children;\n        textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n        _context6.next = 5;\n        return {\n          type: 'column',\n          hasChildNodes: !!childColumns1 || title && $1BfjW$react.Children.count(children) > 0,\n          rendered: rendered,\n          textValue: textValue,\n          props: props,\n          childNodes: /*#__PURE__*/_regeneratorRuntime().mark(function childNodes() {\n            var _iterator9, _step9, child1, childColumns;\n            return _regeneratorRuntime().wrap(function childNodes$(_context5) {\n              while (1) switch (_context5.prev = _context5.next) {\n                case 0:\n                  if (!childColumns1) {\n                    _context5.next = 20;\n                    break;\n                  }\n                  _iterator9 = _createForOfIteratorHelper(childColumns1);\n                  _context5.prev = 2;\n                  _iterator9.s();\n                case 4:\n                  if ((_step9 = _iterator9.n()).done) {\n                    _context5.next = 10;\n                    break;\n                  }\n                  child1 = _step9.value;\n                  _context5.next = 8;\n                  return {\n                    type: 'column',\n                    value: child1\n                  };\n                case 8:\n                  _context5.next = 4;\n                  break;\n                case 10:\n                  _context5.next = 15;\n                  break;\n                case 12:\n                  _context5.prev = 12;\n                  _context5.t0 = _context5[\"catch\"](2);\n                  _iterator9.e(_context5.t0);\n                case 15:\n                  _context5.prev = 15;\n                  _iterator9.f();\n                  return _context5.finish(15);\n                case 18:\n                  _context5.next = 24;\n                  break;\n                case 20:\n                  if (!title) {\n                    _context5.next = 24;\n                    break;\n                  }\n                  childColumns = [];\n                  $1BfjW$react.Children.forEach(children, function (child) {\n                    childColumns.push({\n                      type: 'column',\n                      element: child\n                    });\n                  });\n                  return _context5.delegateYield(childColumns, \"t1\", 24);\n                case 24:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }, childNodes, null, [[2, 12, 15, 18]]);\n          }),\n          shouldInvalidate: function shouldInvalidate(newContext) {\n            // This is a bit of a hack, but it works.\n            // If this method is called, then there's a cached version of this node available.\n            // But, we need to keep the list of columns in the new context up to date.\n            updateContext(newContext);\n            return false;\n          }\n        };\n      case 5:\n        fullNodes = _context6.sent;\n        updateContext = function updateContext(context) {\n          // register leaf columns on the context so that <Row> can access them\n          var _iterator10 = _createForOfIteratorHelper(fullNodes),\n            _step10;\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var node = _step10.value;\n              if (!node.hasChildNodes) context.columns.push(node);\n            }\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n        };\n        updateContext(context1);\n      case 8:\n      case \"end\":\n        return _context6.stop();\n    }\n  }, getCollectionNode);\n});\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */ // We don't want getCollectionNode to show up in the type definition\nvar $1cd244557c2f97d5$export$816b5d811295e6bc = $1cd244557c2f97d5$var$Column;\nfunction $70d70eb16ea48428$var$Row(props) {\n  return null;\n}\n$70d70eb16ea48428$var$Row.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props, context) {\n  var children, textValue;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context8) {\n    while (1) switch (_context8.prev = _context8.next) {\n      case 0:\n        children = props.children, textValue = props.textValue;\n        _context8.next = 3;\n        return {\n          type: 'item',\n          props: props,\n          textValue: textValue,\n          'aria-label': props['aria-label'],\n          hasChildNodes: true,\n          childNodes: /*#__PURE__*/_regeneratorRuntime().mark(function childNodes() {\n            var _iterator11, _step11, column, cells;\n            return _regeneratorRuntime().wrap(function childNodes$(_context7) {\n              while (1) switch (_context7.prev = _context7.next) {\n                case 0:\n                  if (!(context.showSelectionCheckboxes && context.selectionMode !== 'none')) {\n                    _context7.next = 3;\n                    break;\n                  }\n                  _context7.next = 3;\n                  return {\n                    type: 'cell',\n                    key: 'header',\n                    props: {\n                      isSelectionCell: true\n                    }\n                  };\n                case 3:\n                  if (!(typeof children === 'function')) {\n                    _context7.next = 23;\n                    break;\n                  }\n                  _iterator11 = _createForOfIteratorHelper(context.columns);\n                  _context7.prev = 5;\n                  _iterator11.s();\n                case 7:\n                  if ((_step11 = _iterator11.n()).done) {\n                    _context7.next = 13;\n                    break;\n                  }\n                  column = _step11.value;\n                  _context7.next = 11;\n                  return {\n                    type: 'cell',\n                    element: children(column.key),\n                    key: column.key // this is combined with the row key by CollectionBuilder\n                  };\n                case 11:\n                  _context7.next = 7;\n                  break;\n                case 13:\n                  _context7.next = 18;\n                  break;\n                case 15:\n                  _context7.prev = 15;\n                  _context7.t0 = _context7[\"catch\"](5);\n                  _iterator11.e(_context7.t0);\n                case 18:\n                  _context7.prev = 18;\n                  _iterator11.f();\n                  return _context7.finish(18);\n                case 21:\n                  _context7.next = 28;\n                  break;\n                case 23:\n                  cells = [];\n                  $1BfjW$react.Children.forEach(children, function (cell) {\n                    cells.push({\n                      type: 'cell',\n                      element: cell\n                    });\n                  });\n                  if (!(cells.length !== context.columns.length)) {\n                    _context7.next = 27;\n                    break;\n                  }\n                  throw new Error(\"Cell count must match column count. Found \".concat(cells.length, \" cells and \").concat(context.columns.length, \" columns.\"));\n                case 27:\n                  return _context7.delegateYield(cells, \"t1\", 28);\n                case 28:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }, childNodes, null, [[5, 15, 18, 21]]);\n          }),\n          shouldInvalidate: function shouldInvalidate(newContext) {\n            // Invalidate all rows if the columns changed.\n            return newContext.columns.length !== context.columns.length || newContext.columns.some(function (c, i) {\n              return c.key !== context.columns[i].key;\n            }) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.selectionMode !== context.selectionMode;\n          }\n        };\n      case 3:\n      case \"end\":\n        return _context8.stop();\n    }\n  }, getCollectionNode);\n});\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */ // We don't want getCollectionNode to show up in the type definition\nvar $70d70eb16ea48428$export$b59bdbef9ce70de2 = $70d70eb16ea48428$var$Row;\nfunction $941d1d9a6a28982a$var$Cell(props) {\n  return null;\n}\n$941d1d9a6a28982a$var$Cell.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props) {\n  var children, textValue;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context9) {\n    while (1) switch (_context9.prev = _context9.next) {\n      case 0:\n        children = props.children;\n        textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n        _context9.next = 4;\n        return {\n          type: 'cell',\n          props: props,\n          rendered: children,\n          textValue: textValue,\n          'aria-label': props['aria-label'],\n          hasChildNodes: false\n        };\n      case 4:\n      case \"end\":\n        return _context9.stop();\n    }\n  }, getCollectionNode);\n});\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */ // We don't want getCollectionNode to show up in the type definition\nvar $941d1d9a6a28982a$export$f6f0c3fe4ec306ea = $941d1d9a6a28982a$var$Cell;\nexport { $292bc4e09cd0eb62$export$cb895dcf85db1319 as useTableColumnResizeState, $4a0dd036d492cee4$export$907bcc6c48325fd6 as useTableState, $312ae3b56a94a86e$export$f850895b287ef28e as TableHeader, $4ae5314bf50db1a3$export$76ccd210b9029917 as TableBody, $1cd244557c2f97d5$export$816b5d811295e6bc as Column, $70d70eb16ea48428$export$b59bdbef9ce70de2 as Row, $941d1d9a6a28982a$export$f6f0c3fe4ec306ea as Cell, $6555104ff085bef4$re_export$Section as Section };","map":{"version":3,"mappings":"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","names":["$30561577df230a30$export$f61abf052f87399f","widths","Array","from","map","e","reduce","acc","cur","$30561577df230a30$export$1994a077b98ee0d5","width","isNaN","String","match","$30561577df230a30$var$parseFractionalUnit","console","warn","parseInt","$30561577df230a30$export$7bbad27896f7ae9f","tableWidth","Error","$30561577df230a30$export$59185c62a7544aa0","maxWidth","Number","MAX_SAFE_INTEGER","$30561577df230a30$export$f556054ce4358701","minWidth","$30561577df230a30$var$mapDynamicColumns","dynamicColumns","availableSpace","fractions","sum","column","props","defaultWidth","columns","index","targetWidth","delta","Math","max","$30561577df230a30$var$findDynamicColumnWidths","col","min","floor","calculatedWidth","$30561577df230a30$export$a870e6692ac5ccb2","sort","a","b","$292bc4e09cd0eb62$export$cb895dcf85db1319","state","getDefaultWidth","defaultTableWidth","columns1","columnsRef","$1BfjW$useRef","isResizing","startResizeContentWidth","$1BfjW$useState","Map","key","columnWidths","setColumnWidths","columnWidthsRef","affectedColumnWidthsRef","Set","resizedColumns","setResizedColumns","resizedColumnsRef","currentlyResizingColumn","setCurrentlyResizingColumn","setColumnWidthsForRef","newWidths","current","getResolvedColumnWidth","$1BfjW$useCallback","columnProps","_width","ref","ref1","has","get","getStaticAndDynamicColumns","staticColumns","buildColumnWidths","affectedColumns","remainingSpace","forEach","w","set","length","newColumnWidths","prevColKeys","colKeys","every","i","setTableWidth","onColumnResizeStart","onColumnResize","widthsObj","resizeColumn","onColumnResizeEnd","column1","newWidth","boundedWidth","add","resizeIndex","findIndex","slice","recalculatedColumnWidths","allAffectedColumns","ref2","getColumnWidth","getColumnMinWidth","columnIndex","getColumnMaxWidth","$788781baa30117fa$var$ROW_HEADER_COLUMN_KEY","random","toString","$788781baa30117fa$var$buildHeaderRows","keyMap","columnNodes","seen","parentKey","parent","colspan","splice","i1","push","maxLength","c","headerRows","fill","colIndex","item","row","rowLength","p","placeholder","type","value","rendered","level","hasChildNodes","childNodes","textValue","nextKey","prevKey","row1","Symbol","iterator","$788781baa30117fa$export$596e1b2e2cf93690","nodes","prev","opts","rowHeaderColumnKeys","body","showSelectionCheckboxes","rowHeaderColumn","isSelectionCell","unshift","rows","columnKeyMap","visit","node","isRowHeader","child","node1","columnCount","items","visitNode","size","keys","idx","getKeys","getItem","$1BfjW$GridCollection","$4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION","ascending","descending","$4a0dd036d492cee4$export$907bcc6c48325fd6","isKeyboardNavigationDisabled","setKeyboardNavigationDisabled","selectionMode","context","$1BfjW$useMemo","children","collection","$1BfjW$useCollection","$1BfjW$useGridState","disabledKeys","selectionManager","sortDescriptor","columnKey","direction","onSortChange","$312ae3b56a94a86e$var$TableHeader","getCollectionNode","renderer","$1BfjW$react","Children","element","$312ae3b56a94a86e$export$f850895b287ef28e","$4ae5314bf50db1a3$var$TableBody","items1","$4ae5314bf50db1a3$export$76ccd210b9029917","$1cd244557c2f97d5$var$Column","context1","title","childColumns1","childColumns","count","child1","shouldInvalidate","newContext","updateContext","fullNodes","$1cd244557c2f97d5$export$816b5d811295e6bc","$70d70eb16ea48428$var$Row","cells","cell","some","$70d70eb16ea48428$export$b59bdbef9ce70de2","$941d1d9a6a28982a$var$Cell","$941d1d9a6a28982a$export$f6f0c3fe4ec306ea"],"sources":["C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\utils.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\useTableColumnResizeState.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableCollection.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\useTableState.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableHeader.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableBody.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\Column.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\Row.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\Cell.ts"],"sourcesContent":["import {GridNode} from '@react-types/grid';\nimport {Key} from 'react';\n\ntype mappedColumn<T> = GridNode<T> & {\n    index: number,\n    delta: number,\n    calculatedWidth?: number\n};\n\nexport function getContentWidth(widths: Map<Key, number>): number {\n  return Array.from(widths).map(e => e[1]).reduce((acc, cur) => acc + cur, 0);\n}\n\n// numbers and percents are considered static. *fr units or a lack of units are considered dynamic.\nexport function isStatic(width: number | string): boolean {\n  return width != null && (!isNaN(width as number) || (String(width)).match(/^(\\d+)(?=%$)/) !== null);\n}\n\nfunction parseFractionalUnit(width: string): number {\n  if (!width) {\n    return 1;\n  }\n  let match = width.match(/^(\\d+)(?=fr$)/);\n      // if width is the incorrect format, just deafult it to a 1fr\n  if (!match) {\n    console.warn(`width: ${width} is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')`,\n        'defaulting to \\'1fr\\'');\n    return 1;\n  }\n  return parseInt(match[0], 10);\n}\n\nexport function parseStaticWidth(width: number | string, tableWidth: number): number {\n  if (typeof width === 'string') {\n    let match = width.match(/^(\\d+)(?=%$)/);\n    if (!match) {\n      throw new Error('Only percentages or numbers are supported for static column widths');\n    }\n    return tableWidth * (parseInt(match[0], 10) / 100);\n  }\n  return width;\n}\n\n\nexport function getMaxWidth(maxWidth: number | string, tableWidth: number): number {\n  return maxWidth != null\n        ? parseStaticWidth(maxWidth, tableWidth)\n        : Number.MAX_SAFE_INTEGER;\n}\n\nexport function getMinWidth(minWidth: number | string, tableWidth: number): number {\n  return minWidth != null\n      ? parseStaticWidth(minWidth, tableWidth)\n      : 75;\n}\n\nfunction mapDynamicColumns<T>(dynamicColumns: GridNode<T>[], availableSpace: number, tableWidth: number): mappedColumn<T>[] {\n  let fractions = dynamicColumns.reduce(\n        (sum, column) => sum + parseFractionalUnit(column.props.defaultWidth),\n        0\n      );\n\n  let columns = dynamicColumns.map((column, index) => {\n    const targetWidth =\n          (parseFractionalUnit(column.props.defaultWidth) * availableSpace) / fractions;\n    const delta = Math.max(\n      getMinWidth(column.props.minWidth, tableWidth) - targetWidth,\n      targetWidth - getMaxWidth(column.props.maxWidth, tableWidth)\n    );\n\n    return {\n      ...column,\n      index,\n      delta\n    };\n  });\n\n  return columns;\n}\n\nfunction findDynamicColumnWidths<T>(dynamicColumns: mappedColumn<T>[], availableSpace: number, tableWidth: number): mappedColumn<T>[] {\n  let fractions = dynamicColumns.reduce(\n    (sum, col) => sum + parseFractionalUnit(col.props.defaultWidth),\n    0\n  );\n\n  const columns = dynamicColumns.map((column) => {\n    const targetWidth =\n      (parseFractionalUnit(column.props.defaultWidth) * availableSpace) / fractions;\n    let width = Math.max(\n      getMinWidth(column.props.minWidth, tableWidth),\n      Math.min(Math.floor(targetWidth), getMaxWidth(column.props.maxWidth, tableWidth))\n    );\n    column.calculatedWidth = width;\n    availableSpace -= width;\n    fractions -= parseFractionalUnit(column.props.defaultWidth);\n    return column;\n  });\n\n  return columns;\n}\n\nexport function getDynamicColumnWidths<T>(dynamicColumns: GridNode<T>[], availableSpace: number, tableWidth: number) {\n  let columns = mapDynamicColumns(dynamicColumns, availableSpace, tableWidth);\n\n  columns.sort((a, b) => b.delta - a.delta);\n  columns = findDynamicColumnWidths(columns, availableSpace, tableWidth);\n  columns.sort((a, b) => a.index - b.index);\n\n  return columns;\n}\n","\nimport {ColumnProps} from '@react-types/table';\nimport {getContentWidth, getDynamicColumnWidths, getMaxWidth, getMinWidth, isStatic, parseStaticWidth} from './utils';\nimport {GridNode} from '@react-types/grid';\nimport {Key, MutableRefObject, useCallback, useRef, useState} from 'react';\n\ninterface AffectedColumnWidth {\n  /** The column key. */\n  key: Key,\n  /** The column width. */\n  width: number\n}\ninterface AffectedColumnWidths extends Array<AffectedColumnWidth> {}\n\nexport interface TableColumnResizeState<T> {\n  /** A ref whose current value is the state of all the column widths. */\n  columnWidths: MutableRefObject<Map<Key, number>>,\n  /** Setter for the table width. */\n  setTableWidth: (width: number) => void,\n  /** Trigger a resize and recalculation. */\n  onColumnResize: (column: GridNode<T>, width: number) => void,\n  /** Callback for when onColumnResize has started. */\n  onColumnResizeStart: (column: GridNode<T>) => void,\n  /** Callback for when onColumnResize has ended. */\n  onColumnResizeEnd: (column: GridNode<T>) => void,\n  /** Getter for column width. */\n  getColumnWidth: (key: Key) => number,\n  /** Getter for column min width. */\n  getColumnMinWidth: (key: Key) => number,\n  /** Getter for column max widths. */\n  getColumnMaxWidth: (key: Key) => number,\n  /** Key of column currently being resized. */\n  currentlyResizingColumn: Key | null\n}\n\nexport interface TableColumnResizeStateProps {\n  /** Callback to determine what the default width of a column should be. */\n  getDefaultWidth?: (props) => string | number,\n  /** Callback that is invoked during the entirety of the resize event. */\n  onColumnResize?: (affectedColumnWidths: AffectedColumnWidths) => void,\n  /** Callback that is invoked when the resize event is ended. */\n  onColumnResizeEnd?: (affectedColumnWidths: AffectedColumnWidths) => void,\n  /** The default table width. */\n  tableWidth?: number\n}\n\ninterface ColumnState<T> {\n  columns: GridNode<T>[]\n}\n\nexport function useTableColumnResizeState<T>(props: TableColumnResizeStateProps, state: ColumnState<T>): TableColumnResizeState<T> {\n  const {getDefaultWidth, tableWidth: defaultTableWidth = null} = props;\n  const {columns} = state;\n  const columnsRef = useRef<GridNode<T>[]>([]);\n  const tableWidth = useRef<number>(defaultTableWidth);\n  const isResizing = useRef<boolean>(null);\n  const startResizeContentWidth = useRef<number>();\n\n  const [columnWidths, setColumnWidths] = useState<Map<Key, number>>(new Map(columns.map(col => [col.key, 0])));\n  const columnWidthsRef = useRef<Map<Key, number>>(columnWidths);\n  const affectedColumnWidthsRef = useRef<AffectedColumnWidths>([]);\n  const [resizedColumns, setResizedColumns] = useState<Set<Key>>(new Set());\n  const resizedColumnsRef = useRef<Set<Key>>(resizedColumns);\n\n  const [currentlyResizingColumn, setCurrentlyResizingColumn] = useState<Key>(null);\n\n  function setColumnWidthsForRef(newWidths: Map<Key, number>) {\n    columnWidthsRef.current = newWidths;\n    // new map so that change detection is triggered\n    setColumnWidths(newWidths);\n  }\n  /*\n    returns the resolved column width in this order:\n    previously calculated width -> controlled width prop -> uncontrolled defaultWidth prop -> dev assigned width -> default dynamic width\n  */\n  let getResolvedColumnWidth = useCallback((column: GridNode<T>): (number | string) => {\n    let columnProps = column.props as ColumnProps<T>;\n    return resizedColumns?.has(column.key) ? columnWidthsRef.current.get(column.key) : columnProps.width ?? columnProps.defaultWidth ?? getDefaultWidth?.(column.props) ?? '1fr';\n  }, [getDefaultWidth, resizedColumns]);\n\n  let getStaticAndDynamicColumns = useCallback((columns: GridNode<T>[]) : { staticColumns: GridNode<T>[], dynamicColumns: GridNode<T>[] } => columns.reduce((acc, column) => {\n    let width = getResolvedColumnWidth(column);\n    return isStatic(width) ? {...acc, staticColumns: [...acc.staticColumns, column]} : {...acc, dynamicColumns: [...acc.dynamicColumns, column]};\n  }, {staticColumns: [], dynamicColumns: []}), [getResolvedColumnWidth]);\n\n  let buildColumnWidths = useCallback((affectedColumns: GridNode<T>[], availableSpace: number): Map<Key, number> => {\n    const widths = new Map<Key, number>();\n    let remainingSpace = availableSpace;\n\n    const {staticColumns, dynamicColumns} = getStaticAndDynamicColumns(affectedColumns);\n\n    staticColumns.forEach(column => {\n      let width = getResolvedColumnWidth(column);\n      let w = parseStaticWidth(width, tableWidth.current);\n      widths.set(column.key, w);\n      remainingSpace -= w;\n    });\n\n    // dynamic columns\n    if (dynamicColumns.length > 0) {\n      const newColumnWidths = getDynamicColumnWidths(dynamicColumns, remainingSpace, tableWidth.current);\n      for (let column of newColumnWidths) {\n        widths.set(column.key, column.calculatedWidth);\n      }\n    }\n\n    return widths;\n  }, [getStaticAndDynamicColumns, getResolvedColumnWidth]);\n\n\n  const prevColKeys = columnsRef.current.map(col => col.key);\n  const colKeys = columns.map(col => col.key);\n  // if the columns change, need to rebuild widths.\n  if (prevColKeys.length !== colKeys.length || !colKeys.every((col, i) => col === prevColKeys[i])) {\n    columnsRef.current = columns;\n    const widths = buildColumnWidths(columns, tableWidth.current);\n    setColumnWidthsForRef(widths);\n  }\n\n  function setTableWidth(width: number) {\n    if (width && width !== tableWidth.current) {\n      tableWidth.current = width;\n      if (!isResizing.current) {\n        const widths = buildColumnWidths(columns, width);\n        setColumnWidthsForRef(widths);\n      }\n    }\n  }\n\n  function onColumnResizeStart(column: GridNode<T>) {\n    setCurrentlyResizingColumn(column.key);\n    isResizing.current = true;\n    startResizeContentWidth.current = getContentWidth(columnWidthsRef.current);\n  }\n\n  function onColumnResize(column: GridNode<T>, width: number) {\n    let widthsObj = resizeColumn(column, width);\n    affectedColumnWidthsRef.current = widthsObj;\n    props.onColumnResize && props.onColumnResize(affectedColumnWidthsRef.current);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  function onColumnResizeEnd(column: GridNode<T>) {\n    props.onColumnResizeEnd && isResizing.current && props.onColumnResizeEnd(affectedColumnWidthsRef.current);\n    setCurrentlyResizingColumn(null);\n    isResizing.current = false;\n    affectedColumnWidthsRef.current = [];\n\n    let widths = new Map<Key, number>(columnWidthsRef.current);\n    setColumnWidthsForRef(widths);\n  }\n\n  function resizeColumn(column: GridNode<T>, newWidth: number) : AffectedColumnWidths {\n    let boundedWidth =  Math.max(\n      getMinWidth(column.props.minWidth, tableWidth.current),\n      Math.min(Math.floor(newWidth), getMaxWidth(column.props.maxWidth, tableWidth.current)));\n\n    // copy the columnWidths map and set the new width for the column being resized\n    let widths = new Map<Key, number>(columnWidthsRef.current);\n    widths.set(column.key, boundedWidth);\n\n    // keep track of all columns that have been sized\n    resizedColumnsRef.current.add(column.key);\n    setResizedColumns(resizedColumnsRef.current);\n\n    // get the columns affected by resize and remaining space\n    const resizeIndex = columnsRef.current.findIndex(col => col.key === column.key);\n    let affectedColumns = columnsRef.current.slice(resizeIndex + 1);\n\n    // we only care about the columns that CAN be resized, we ignore static columns.\n    let {dynamicColumns} = getStaticAndDynamicColumns(affectedColumns);\n\n    // available space for affected columns\n    let availableSpace = columnsRef.current.reduce((acc, column, index) => {\n      if (index <= resizeIndex || isStatic(getResolvedColumnWidth(column))) {\n        return acc - widths.get(column.key);\n      }\n      return acc;\n    }, tableWidth.current);\n\n    // merge the unaffected column widths and the recalculated column widths\n    let recalculatedColumnWidths = buildColumnWidths(dynamicColumns, availableSpace);\n    widths = new Map<Key, number>([...widths, ...recalculatedColumnWidths]);\n\n    setColumnWidthsForRef(widths);\n\n    /*\n     when getting recalculated columns above, the column being resized is not considered \"recalculated\"\n     so we need to add it to the list of affected columns\n    */\n    let allAffectedColumns = ([[column.key, boundedWidth], ...recalculatedColumnWidths] as [Key, number][]).map(([key, width]) => ({key, width}));\n    return allAffectedColumns;\n  }\n\n  // This function is regenerated whenever columnWidthsRef.current changes in order to get the new correct ref value.\n  let getColumnWidth = useCallback((key: Key): number => columnWidthsRef.current.get(key) ?? 0, [columnWidthsRef.current]);\n\n  let getColumnMinWidth = useCallback((key: Key) => {\n    const columnIndex = columns.findIndex(col => col.key === key);\n    if (columnIndex === -1) {\n      return;\n    }\n    return getMinWidth(columns[columnIndex].props.minWidth, tableWidth.current);\n  }, [columns]);\n\n  let getColumnMaxWidth = useCallback((key: Key) => {\n    const columnIndex = columns.findIndex(col => col.key === key);\n    if (columnIndex === -1) {\n      return;\n    }\n    return getMaxWidth(columns[columnIndex].props.maxWidth, tableWidth.current);\n  }, [columns]);\n\n  return {\n    columnWidths: columnWidthsRef,\n    setTableWidth,\n    onColumnResize,\n    onColumnResizeStart,\n    onColumnResizeEnd,\n    getColumnWidth,\n    getColumnMinWidth,\n    getColumnMaxWidth,\n    currentlyResizingColumn\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {GridCollection} from '@react-stately/grid';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from 'react';\n\ninterface GridCollectionOptions {\n  showSelectionCheckboxes?: boolean\n}\n\nconst ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\n\nfunction buildHeaderRows<T>(keyMap: Map<Key, GridNode<T>>, columnNodes: GridNode<T>[]): GridNode<T>[] {\n  let columns: GridNode<T>[][] = [];\n  let seen = new Map();\n  for (let column of columnNodes) {\n    let parentKey = column.parentKey;\n    let col = [column];\n\n    while (parentKey) {\n      let parent: GridNode<T> = keyMap.get(parentKey);\n\n      // If we've already seen this parent, than it is shared\n      // with a previous column. If the current column is taller\n      // than the previous column, than we need to shift the parent\n      // in the previous column so it's level with the current column.\n      if (seen.has(parent)) {\n        parent.colspan++;\n\n        let {column, index} = seen.get(parent);\n        if (index > col.length) {\n          break;\n        }\n\n        for (let i = index; i < col.length; i++) {\n          column.splice(i, 0, null);\n        }\n\n        // Adjust shifted indices\n        for (let i = col.length; i < column.length; i++) {\n          if (column[i] && seen.has(column[i])) {\n            seen.get(column[i]).index = i;\n          }\n        }\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {column: col, index: col.length - 1});\n      }\n\n      parentKey = parent.parentKey;\n    }\n\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n\n  let maxLength = Math.max(...columns.map(c => c.length));\n  let headerRows = Array(maxLength).fill(0).map(() => []);\n\n  // Convert columns into rows.\n  let colIndex = 0;\n  for (let column of columns) {\n    let i = maxLength - 1;\n    for (let item of column) {\n      if (item) {\n        // Fill the space up until the current column with a placeholder\n        let row = headerRows[i];\n        let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n        if (rowLength < colIndex) {\n          let placeholder: GridNode<T> = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n\n          row.push(placeholder);\n        }\n\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n\n        item.level = i;\n        item.colIndex = colIndex;\n        row.push(item);\n      }\n\n      i--;\n    }\n\n    colIndex++;\n  }\n\n  // Add placeholders at the end of each row that is shorter than the maximum\n  let i = 0;\n  for (let row of headerRows) {\n    let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n    if (rowLength < columnNodes.length) {\n      let placeholder: GridNode<T> = {\n        type: 'placeholder',\n        key: 'placeholder-' + row[row.length - 1].key,\n        colspan: columnNodes.length - rowLength,\n        index: rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row[row.length - 1].key\n      };\n\n      row.push(placeholder);\n    }\n\n    i++;\n  }\n\n  return headerRows.map((childNodes, index) => {\n    let row: GridNode<T> = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes,\n      textValue: null\n    };\n\n    return row;\n  });\n}\n\nexport class TableCollection<T> extends GridCollection<T> {\n  headerRows: GridNode<T>[];\n  columns: GridNode<T>[];\n  rowHeaderColumnKeys: Set<Key>;\n  body: GridNode<T>;\n\n  constructor(nodes: Iterable<GridNode<T>>, prev?: TableCollection<T>, opts?: GridCollectionOptions) {\n    let rowHeaderColumnKeys: Set<Key> = new Set();\n    let body: GridNode<T>;\n    let columns = [];\n\n    // Add cell for selection checkboxes if needed.\n    if (opts?.showSelectionCheckboxes) {\n      let rowHeaderColumn: GridNode<T> = {\n        type: 'column',\n        key: ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n\n      columns.unshift(rowHeaderColumn);\n    }\n\n    let rows = [];\n    let columnKeyMap = new Map();\n    let visit = (node: GridNode<T>) => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            columns.push(node);\n\n            if (node.props.isRowHeader) {\n              rowHeaderColumnKeys.add(node.key);\n            }\n          }\n          break;\n        case 'item':\n          rows.push(node);\n          return; // do not go into childNodes\n      }\n      for (let child of node.childNodes) {\n        visit(child);\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let headerRows = buildHeaderRows(columnKeyMap, columns) as GridNode<T>[];\n    headerRows.forEach((row, i) => rows.splice(i, 0, row));\n\n    super({\n      columnCount: columns.length,\n      items: rows,\n      visitNode: node => {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    this.columns = columns;\n    this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    this.body = body;\n    this.headerRows = headerRows;\n\n    // Default row header column to the first one.\n    if (this.rowHeaderColumnKeys.size === 0) {\n      this.rowHeaderColumnKeys.add(this.columns[opts?.showSelectionCheckboxes ? 1 : 0].key);\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.body.childNodes;\n  }\n\n  get size() {\n    return [...this.body.childNodes].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.body.childNodes][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.body.childNodes];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, Node, SelectionMode, Sortable, SortDescriptor, SortDirection} from '@react-types/shared';\nimport {GridState, useGridState} from '@react-stately/grid';\nimport {TableCollection as ITableCollection} from '@react-types/table';\nimport {Key, useMemo, useState} from 'react';\nimport {MultipleSelectionStateProps} from '@react-stately/selection';\nimport {TableCollection} from './TableCollection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface TableState<T> extends GridState<T, ITableCollection<T>> {\n  /** A collection of rows and columns in the table. */\n  collection: ITableCollection<T>,\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes: boolean,\n  /** The current sorted column and direction. */\n  sortDescriptor: SortDescriptor,\n  /** Calls the provided onSortChange handler with the provided column key and sort direction. */\n  sort(columnKey: Key, direction?: 'ascending' | 'descending'): void,\n  /** Whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  isKeyboardNavigationDisabled: boolean,\n  /** Set whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  setKeyboardNavigationDisabled: (val: boolean) => void\n}\n\nexport interface CollectionBuilderContext<T> {\n  showSelectionCheckboxes: boolean,\n  selectionMode: SelectionMode,\n  columns: Node<T>[]\n}\n\nexport interface TableStateProps<T> extends CollectionBase<T>, MultipleSelectionStateProps, Sortable {\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes?: boolean\n}\n\nconst OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending' as SortDirection,\n  descending: 'ascending' as SortDirection\n};\n\n/**\n * Provides state management for a table component. Handles building a collection\n * of columns and rows from props. In addition, it tracks row selection and manages sort order changes.\n */\nexport function useTableState<T extends object>(props: TableStateProps<T>): TableState<T> {\n  let [isKeyboardNavigationDisabled, setKeyboardNavigationDisabled] = useState(false);\n  let {selectionMode = 'none'} = props;\n\n  let context = useMemo(() => ({\n    showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n    selectionMode,\n    columns: []\n  }), [props.children, props.showSelectionCheckboxes, selectionMode]);\n\n  let collection = useCollection<T, TableCollection<T>>(\n    props,\n    (nodes, prev) => new TableCollection(nodes, prev, context),\n    context\n  );\n  let {disabledKeys, selectionManager} = useGridState({...props, collection});\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    isKeyboardNavigationDisabled: collection.size === 0 || isKeyboardNavigationDisabled,\n    setKeyboardNavigationDisabled,\n    sort(columnKey: Key, direction?: 'ascending' | 'descending') {\n      props.onSortChange({\n        column: columnKey,\n        direction: direction ?? (props.sortDescriptor?.column === columnKey\n          ? OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction]\n          : 'ascending')\n      });\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableHeaderProps} from '@react-types/table';\n\nfunction TableHeader<T>(props: TableHeaderProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableHeader.getCollectionNode = function* getCollectionNode<T>(props: TableHeaderProps<T>): Generator<PartialNode<T>, void, any> {\n  let {children, columns} = props;\n  if (typeof children === 'function') {\n    if (!columns) {\n      throw new Error('props.children was a function but props.columns is missing');\n    }\n\n    for (let column of columns) {\n      yield {\n        type: 'column',\n        value: column,\n        renderer: children\n      };\n    }\n  } else {\n    let columns: PartialNode<T>[] = [];\n    React.Children.forEach(children, column => {\n      columns.push({\n        type: 'column',\n        element: column\n      });\n    });\n\n    yield* columns;\n  }\n};\n\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableHeader = TableHeader as <T>(props: TableHeaderProps<T>) => JSX.Element;\nexport {_TableHeader as TableHeader};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableBodyProps} from '@react-types/table';\n\nfunction TableBody<T>(props: TableBodyProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableBody.getCollectionNode = function* getCollectionNode<T>(props: TableBodyProps<T>): Generator<PartialNode<T>> {\n  let {children, items} = props;\n  yield {\n    type: 'body',\n    hasChildNodes: true,\n    props,\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items) {\n          throw new Error('props.children was a function but props.items is missing');\n        }\n\n        for (let item of items) {\n          yield {\n            type: 'item',\n            value: item,\n            renderer: children\n          };\n        }\n      } else {\n        let items: PartialNode<T>[] = [];\n        React.Children.forEach(children, item => {\n          items.push({\n            type: 'item',\n            element: item\n          });\n        });\n\n        yield* items;\n      }\n    }\n  };\n};\n\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableBody = TableBody as <T>(props: TableBodyProps<T>) => JSX.Element;\nexport {_TableBody as TableBody};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {ColumnProps} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\n\nfunction Column<T>(props: ColumnProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nColumn.getCollectionNode = function* getCollectionNode<T>(props: ColumnProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>, void, GridNode<T>[]> {\n  let {title, children, childColumns} = props;\n\n  let rendered = title || children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n\n  let fullNodes = yield {\n    type: 'column',\n    hasChildNodes: !!childColumns || (title && React.Children.count(children) > 0),\n    rendered,\n    textValue,\n    props,\n    *childNodes() {\n      if (childColumns) {\n        for (let child of childColumns) {\n          yield {\n            type: 'column',\n            value: child\n          };\n        }\n      } else if (title) {\n        let childColumns: PartialNode<T>[] = [];\n        React.Children.forEach(children, child => {\n          childColumns.push({\n            type: 'column',\n            element: child as ReactElement<ColumnProps<T>>\n          });\n        });\n\n        yield* childColumns;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // This is a bit of a hack, but it works.\n      // If this method is called, then there's a cached version of this node available.\n      // But, we need to keep the list of columns in the new context up to date.\n      updateContext(newContext);\n      return false;\n    }\n  };\n\n  let updateContext = (context: CollectionBuilderContext<T>) => {\n    // register leaf columns on the context so that <Row> can access them\n    for (let node of fullNodes) {\n      if (!node.hasChildNodes) {\n        context.columns.push(node);\n      }\n    }\n  };\n\n  updateContext(context);\n};\n\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Column = Column as <T>(props: ColumnProps<T>) => JSX.Element;\nexport {_Column as Column};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {RowProps} from '@react-types/table';\n\nfunction Row(props: RowProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nRow.getCollectionNode = function* getCollectionNode<T>(props: RowProps, context: CollectionBuilderContext<T>): Generator<PartialNode<T>> {\n  let {children, textValue} = props;\n\n  yield {\n    type: 'item',\n    props: props,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n    *childNodes() {\n      // Process cells first\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') {\n        yield {\n          type: 'cell',\n          key: 'header', // this is combined with the row key by CollectionBuilder\n          props: {\n            isSelectionCell: true\n          }\n        };\n      }\n\n      if (typeof children === 'function') {\n        for (let column of context.columns) {\n          yield {\n            type: 'cell',\n            element: children(column.key),\n            key: column.key // this is combined with the row key by CollectionBuilder\n          };\n        }\n      } else {\n        let cells: PartialNode<T>[] = [];\n        React.Children.forEach(children, cell => {\n          cells.push({\n            type: 'cell',\n            element: cell\n          });\n        });\n\n        if (cells.length !== context.columns.length) {\n          throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        }\n\n        yield* cells;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length ||\n        newContext.columns.some((c, i) => c.key !== context.columns[i].key) ||\n        newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes ||\n        newContext.selectionMode !== context.selectionMode;\n    }\n  };\n};\n\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Row = Row as (props: RowProps) => JSX.Element;\nexport {_Row as Row};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CellProps} from '@react-types/table';\nimport {PartialNode} from '@react-stately/collections';\nimport {ReactElement} from 'react';\n\nfunction Cell(props: CellProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nCell.getCollectionNode = function* getCollectionNode<T>(props: CellProps): Generator<PartialNode<T>> {\n  let {children} = props;\n\n  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n  yield {\n    type: 'cell',\n    props: props,\n    rendered: children,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: false\n  };\n};\n\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Cell = Cell as (props: CellProps) => JSX.Element;\nexport {_Cell as Cell};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}