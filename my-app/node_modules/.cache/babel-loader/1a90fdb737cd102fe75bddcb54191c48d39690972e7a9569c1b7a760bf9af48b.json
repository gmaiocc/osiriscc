{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\nconst _cacheMap = {};\n\n/**\n * Stores token, token status and a request queue for every client\n */\nclass TokenCache {\n  static cacheForEnvironment(environment, refreshToken) {\n    let key = environment.clientId;\n    if (refreshToken) {\n      key += `_${refreshToken}`;\n    }\n    if (!_cacheMap[key]) {\n      _cacheMap[key] = new TokenCache();\n    }\n    return _cacheMap[key];\n  }\n  constructor() {\n    this._token = null;\n    this._locked = false;\n    this._requests = [];\n    this._emitter = new EventEmitter();\n    this._emitter.setMaxListeners(0);\n  }\n\n  /**\n   * Gets the current token for the client\n   * @return {AccessToken|null} - The current token or null if there is none\n   */\n  getToken() {\n    return this._token;\n  }\n\n  /**\n   * Sets the token for the current client also setting its status to absent or valid if the token exist or not\n   * @param {AccessToken|null} token - The current token for the client or null to remove it\n   * @return {void}\n   */\n  setToken(token) {\n    this._token = token;\n  }\n  lock() {\n    this._locked = true;\n  }\n  unlock() {\n    this._locked = false;\n  }\n  isLocked() {\n    return this._locked;\n  }\n  isValid() {\n    return this.isPresent() && !this._token.isExpired();\n  }\n  isPresent() {\n    return Boolean(this._token);\n  }\n\n  /**\n   * Add a request to the queue and wait for the notify method to signal error or completion\n   * @param {Object} request - The request to be queued\n   * @return {Promise} - A promise that will resolve or rejects when the notify method is called\n   * */\n  wait(request) {\n    this._requests.push(request);\n    return new Promise((resolve, reject) => {\n      const completeHandler = req => {\n        if (request === req) {\n          this._emitter.removeListener('complete', completeHandler);\n          resolve(request);\n        }\n      };\n      const failHandler = err => {\n        this._emitter.removeListener('fail', failHandler);\n        reject(err);\n      };\n      this._emitter.on('complete', completeHandler);\n      this._emitter.on('fail', failHandler);\n    });\n  }\n\n  /**\n   * Flush the request queue resolving every call in the order they were added or rejects all calls if an error is provided\n   * @param {Array} [err] - An optional error that rejects all requests instead of resolving them\n   * @return {void} - void\n   */\n  notify(err) {\n    if (err) {\n      this._emitter.emit('fail', err);\n    } else {\n      this._requests.forEach(request => this._emitter.emit('complete', request));\n    }\n    this._requests = [];\n    this._emitter.removeAllListeners();\n  }\n}\nmodule.exports = {\n  TokenCache: TokenCache\n};","map":{"version":3,"names":["EventEmitter","require","_cacheMap","TokenCache","cacheForEnvironment","environment","refreshToken","key","clientId","constructor","_token","_locked","_requests","_emitter","setMaxListeners","getToken","setToken","token","lock","unlock","isLocked","isValid","isPresent","isExpired","Boolean","wait","request","push","Promise","resolve","reject","completeHandler","req","removeListener","failHandler","err","on","notify","emit","forEach","removeAllListeners","module","exports"],"sources":["C:/Users/gonca/my-app/node_modules/@paypal/checkout-server-sdk/lib/core/token_cache.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst _cacheMap = {};\n\n/**\n * Stores token, token status and a request queue for every client\n */\nclass TokenCache {\n\n  static cacheForEnvironment(environment, refreshToken) {\n    let key = environment.clientId;\n\n    if (refreshToken) {\n      key += `_${refreshToken}`;\n    }\n\n    if (!_cacheMap[key]) {\n      _cacheMap[key] = new TokenCache();\n    }\n\n    return _cacheMap[key];\n  }\n\n  constructor() {\n    this._token = null;\n    this._locked = false;\n    this._requests = [];\n    this._emitter = new EventEmitter();\n    this._emitter.setMaxListeners(0);\n  }\n\n  /**\n   * Gets the current token for the client\n   * @return {AccessToken|null} - The current token or null if there is none\n   */\n  getToken() {\n    return this._token;\n  }\n\n  /**\n   * Sets the token for the current client also setting its status to absent or valid if the token exist or not\n   * @param {AccessToken|null} token - The current token for the client or null to remove it\n   * @return {void}\n   */\n  setToken(token) {\n    this._token = token;\n  }\n\n  lock() {\n    this._locked = true;\n  }\n\n  unlock() {\n    this._locked = false;\n  }\n\n  isLocked() {\n    return this._locked;\n  }\n\n  isValid() {\n    return this.isPresent() && !this._token.isExpired();\n  }\n\n  isPresent() {\n    return Boolean(this._token);\n  }\n\n  /**\n   * Add a request to the queue and wait for the notify method to signal error or completion\n   * @param {Object} request - The request to be queued\n   * @return {Promise} - A promise that will resolve or rejects when the notify method is called\n   * */\n  wait(request) {\n    this._requests.push(request);\n    return new Promise((resolve, reject) => {\n      const completeHandler = (req) => {\n        if (request === req) {\n          this._emitter.removeListener('complete', completeHandler);\n          resolve(request);\n        }\n      };\n      const failHandler = (err) => {\n        this._emitter.removeListener('fail', failHandler);\n        reject(err);\n      };\n\n      this._emitter.on('complete', completeHandler);\n      this._emitter.on('fail', failHandler);\n    });\n  }\n\n  /**\n   * Flush the request queue resolving every call in the order they were added or rejects all calls if an error is provided\n   * @param {Array} [err] - An optional error that rejects all requests instead of resolving them\n   * @return {void} - void\n   */\n  notify(err) {\n    if (err) {\n      this._emitter.emit('fail', err);\n    } else {\n      this._requests.forEach(request => this._emitter.emit('complete', request));\n    }\n    this._requests = [];\n    this._emitter.removeAllListeners();\n  }\n}\n\nmodule.exports = {TokenCache: TokenCache};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}