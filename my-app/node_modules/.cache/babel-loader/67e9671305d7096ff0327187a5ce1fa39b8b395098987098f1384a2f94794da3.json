{"ast":null,"code":"import _objectSpread from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n/*\n* Copyright 2022 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\nvar $5b160d28a433310d$export$c17fa47878dc55b6 = /*#__PURE__*/function () {\n  function $5b160d28a433310d$export$c17fa47878dc55b6(messages) {\n    var defaultLocale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"en-US\";\n    _classCallCheck(this, $5b160d28a433310d$export$c17fa47878dc55b6);\n    // Clone messages so we don't modify the original object.\n    this.strings = _objectSpread({}, messages);\n    this.defaultLocale = defaultLocale;\n  }\n  _createClass($5b160d28a433310d$export$c17fa47878dc55b6, [{\n    key: \"getStringForLocale\",\n    value: /** Returns a localized string for the given key and locale. */function getStringForLocale(key, locale) {\n      var strings = this.strings[locale];\n      if (!strings) {\n        strings = $5b160d28a433310d$var$getStringsForLocale(locale, this.strings, this.defaultLocale);\n        this.strings[locale] = strings;\n      }\n      var string = strings[key];\n      if (!string) throw new Error(\"Could not find intl message \".concat(key, \" in \").concat(locale, \" locale\"));\n      return string;\n    }\n  }]);\n  return $5b160d28a433310d$export$c17fa47878dc55b6;\n}();\nfunction $5b160d28a433310d$var$getStringsForLocale(locale, strings) {\n  var defaultLocale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"en-US\";\n  // If there is an exact match, use it.\n  if (strings[locale]) return strings[locale];\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  var language = $5b160d28a433310d$var$getLanguage(locale);\n  if (strings[language]) return strings[language];\n  for (var key in strings) {\n    if (key.startsWith(language + \"-\")) return strings[key];\n  }\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\nfunction $5b160d28a433310d$var$getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale)\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  return locale.split(\"-\")[0];\n}\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $6db58dc88e78b024$var$pluralRulesCache = new Map();\nvar $6db58dc88e78b024$var$numberFormatCache = new Map();\nvar $6db58dc88e78b024$export$2f817fcdc4b89ae0 = /*#__PURE__*/function () {\n  function $6db58dc88e78b024$export$2f817fcdc4b89ae0(locale, strings) {\n    _classCallCheck(this, $6db58dc88e78b024$export$2f817fcdc4b89ae0);\n    this.locale = locale;\n    this.strings = strings;\n  }\n  _createClass($6db58dc88e78b024$export$2f817fcdc4b89ae0, [{\n    key: \"format\",\n    value: /** Formats a localized string for the given key with the provided variables. */function format(key, variables) {\n      var message = this.strings.getStringForLocale(key, this.locale);\n      return typeof message === \"function\" ? message(variables, this) : message;\n    }\n  }, {\n    key: \"plural\",\n    value: function plural(count, options) {\n      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cardinal\";\n      var opt = options[\"=\" + count];\n      if (opt) return typeof opt === \"function\" ? opt() : opt;\n      var key = this.locale + \":\" + type;\n      var pluralRules = $6db58dc88e78b024$var$pluralRulesCache.get(key);\n      if (!pluralRules) {\n        pluralRules = new Intl.PluralRules(this.locale, {\n          type: type\n        });\n        $6db58dc88e78b024$var$pluralRulesCache.set(key, pluralRules);\n      }\n      var selected = pluralRules.select(count);\n      opt = options[selected] || options.other;\n      return typeof opt === \"function\" ? opt() : opt;\n    }\n  }, {\n    key: \"number\",\n    value: function number(value) {\n      var numberFormat = $6db58dc88e78b024$var$numberFormatCache.get(this.locale);\n      if (!numberFormat) {\n        numberFormat = new Intl.NumberFormat(this.locale);\n        $6db58dc88e78b024$var$numberFormatCache.set(this.locale, numberFormat);\n      }\n      return numberFormat.format(value);\n    }\n  }, {\n    key: \"select\",\n    value: function select(options, value) {\n      var opt = options[value] || options.other;\n      return typeof opt === \"function\" ? opt() : opt;\n    }\n  }]);\n  return $6db58dc88e78b024$export$2f817fcdc4b89ae0;\n}();\nexport { $5b160d28a433310d$export$c17fa47878dc55b6 as LocalizedStringDictionary, $6db58dc88e78b024$export$2f817fcdc4b89ae0 as LocalizedStringFormatter };","map":{"version":3,"mappings":"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","names":["$5b160d28a433310d$export$c17fa47878dc55b6","messages","defaultLocale","strings","key","locale","$5b160d28a433310d$var$getStringsForLocale","string","Error","language","$5b160d28a433310d$var$getLanguage","startsWith","Intl","Locale","split","$6db58dc88e78b024$var$pluralRulesCache","Map","$6db58dc88e78b024$var$numberFormatCache","$6db58dc88e78b024$export$2f817fcdc4b89ae0","variables","message","getStringForLocale","count","options","type","opt","pluralRules","get","PluralRules","set","selected","select","other","value","numberFormat","NumberFormat","format"],"sources":["C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\string\\dist\\packages\\@internationalized\\string\\src\\index.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\string\\dist\\packages\\@internationalized\\string\\src\\LocalizedStringDictionary.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\string\\dist\\packages\\@internationalized\\string\\src\\LocalizedStringFormatter.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {Variables, LocalizedString} from './LocalizedStringFormatter';\nexport type {LocalizedStrings} from './LocalizedStringDictionary';\nexport {LocalizedStringDictionary} from './LocalizedStringDictionary';\nexport {LocalizedStringFormatter} from './LocalizedStringFormatter';\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {LocalizedString} from './LocalizedStringFormatter';\n\nexport type LocalizedStrings<K extends string, T extends LocalizedString> = {\n  [lang: string]: Record<K, T>\n};\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class LocalizedStringDictionary<K extends string = string, T extends LocalizedString = string> {\n  private strings: LocalizedStrings<K, T>;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings<K, T>, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    this.strings = {...messages};\n    this.defaultLocale = defaultLocale;\n  }\n\n  /** Returns a localized string for the given key and locale. */\n  getStringForLocale(key: K, locale: string): T {\n    let strings = this.strings[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.strings, this.defaultLocale);\n      this.strings[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n}\n\nfunction getStringsForLocale<K extends string, T extends LocalizedString>(locale: string, strings: LocalizedStrings<K, T>, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  if (strings[language]) {\n    return strings[language];\n  }\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {LocalizedStringDictionary} from './LocalizedStringDictionary';\n\nexport type Variables = Record<string, string | number | boolean> | undefined;\nexport type LocalizedString = string | ((args: Variables, formatter?: LocalizedStringFormatter<any, any>) => string);\ntype InternalString = string | (() => string);\n\nconst pluralRulesCache = new Map<string, Intl.PluralRules>();\nconst numberFormatCache = new Map<string, Intl.NumberFormat>();\n\n/**\n * Formats localized strings from a LocalizedStringDictionary. Supports interpolating variables,\n * selecting the correct pluralization, and formatting numbers for the locale.\n */\nexport class LocalizedStringFormatter<K extends string = string, T extends LocalizedString = string> {\n  private locale: string;\n  private strings: LocalizedStringDictionary<K, T>;\n\n  constructor(locale: string, strings: LocalizedStringDictionary<K, T>) {\n    this.locale = locale;\n    this.strings = strings;\n  }\n\n  /** Formats a localized string for the given key with the provided variables. */\n  format(key: K, variables?: Variables): string {\n    let message = this.strings.getStringForLocale(key, this.locale);\n    return typeof message === 'function' ? message(variables, this) : message;\n  }\n\n  protected plural(count: number, options: Record<string, InternalString>, type: Intl.PluralRuleType = 'cardinal') {\n    let opt = options['=' + count];\n    if (opt) {\n      return typeof opt === 'function' ? opt() : opt;\n    }\n\n    let key = this.locale + ':' + type;\n    let pluralRules = pluralRulesCache.get(key);\n    if (!pluralRules) {\n      pluralRules = new Intl.PluralRules(this.locale, {type});\n      pluralRulesCache.set(key, pluralRules);\n    }\n\n    let selected = pluralRules.select(count);\n    opt = options[selected] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n\n  protected number(value: number) {\n    let numberFormat = numberFormatCache.get(this.locale);\n    if (!numberFormat) {\n      numberFormat = new Intl.NumberFormat(this.locale);\n      numberFormatCache.set(this.locale, numberFormat);\n    }\n    return numberFormat.format(value);\n  }\n\n  protected select(options: Record<string, InternalString>, value: string) {\n    let opt = options[value] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}