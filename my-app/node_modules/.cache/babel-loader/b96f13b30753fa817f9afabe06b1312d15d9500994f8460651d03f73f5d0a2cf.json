{"ast":null,"code":"import _objectSpread from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _assertThisInitialized from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _get from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _createForOfIteratorHelper from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport $cUVuN$swchelperssrc_class_private_field_initmjs from \"@swc/helpers/src/_class_private_field_init.mjs\";\nimport $cUVuN$swchelperssrc_define_propertymjs from \"@swc/helpers/src/_define_property.mjs\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */ // Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $2b4dce13dd5a17fa$export$842a2cf37af977e1(amount, numerator) {\n  return amount - numerator * Math.floor(amount / numerator);\n}\nfunction $2b4dce13dd5a17fa$export$784d13d8ee351f07(date) {\n  if (date.era) return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.calendar, date.era, date.year, date.month, date.day);else return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.calendar, date.year, date.month, date.day);\n}\nfunction $2b4dce13dd5a17fa$export$27fa0172ae2644b3(date) {\n  if (date.era) return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);else return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n}\nvar $3b62074eb05584b2$var$EPOCH = 1721426; // 001/01/03 Julian C.E.\nfunction $3b62074eb05584b2$export$f297eb839006d339(era, year, month, day) {\n  year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year);\n  var y1 = year - 1;\n  var monthOffset = -2;\n  if (month <= 2) monthOffset = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) monthOffset = -1;\n  return $3b62074eb05584b2$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);\n}\nfunction $3b62074eb05584b2$export$553d7fa8e3805fc0(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\nfunction $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year) {\n  return era === \"BC\" ? 1 - year : year;\n}\nfunction $3b62074eb05584b2$export$4475b7e617eb123c(year) {\n  var era = \"AD\";\n  if (year <= 0) {\n    era = \"BC\";\n    year = 1 - year;\n  }\n  return [era, year];\n}\nvar $3b62074eb05584b2$var$daysInMonth = {\n  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n};\nvar $3b62074eb05584b2$export$80ee6245ec4f29ec = /*#__PURE__*/function () {\n  function $3b62074eb05584b2$export$80ee6245ec4f29ec() {\n    _classCallCheck(this, $3b62074eb05584b2$export$80ee6245ec4f29ec);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"gregory\");\n  }\n  _createClass($3b62074eb05584b2$export$80ee6245ec4f29ec, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var jd0 = jd;\n      var depoch = jd0 - $3b62074eb05584b2$var$EPOCH;\n      var quadricent = Math.floor(depoch / 146097);\n      var dqc = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(depoch, 146097);\n      var cent = Math.floor(dqc / 36524);\n      var dcent = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(dqc, 36524);\n      var quad = Math.floor(dcent / 1461);\n      var dquad = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(dcent, 1461);\n      var yindex = Math.floor(dquad / 365);\n      var extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n      var _$3b62074eb05584b2$ex = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear),\n        _$3b62074eb05584b2$ex2 = _slicedToArray(_$3b62074eb05584b2$ex, 2),\n        era = _$3b62074eb05584b2$ex2[0],\n        year = _$3b62074eb05584b2$ex2[1];\n      var yearDay = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, 1, 1);\n      var leapAdj = 2;\n      if (jd0 < $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 1)) leapAdj = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) leapAdj = 1;\n      var month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n      var day = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, month, 1) + 1;\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, month, day);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      return $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, date.month, date.day);\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      return $3b62074eb05584b2$var$daysInMonth[$3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? \"leapyear\" : \"standard\"][date.month - 1];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  }, {\n    key: \"getMonthsInYear\",\n    value: function getMonthsInYear(date) {\n      return 12;\n    }\n  }, {\n    key: \"getDaysInYear\",\n    value: function getDaysInYear(date) {\n      return $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 366 : 365;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra(date) {\n      return 9999;\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"BC\", \"AD\"];\n    }\n  }, {\n    key: \"isInverseEra\",\n    value: function isInverseEra(date) {\n      return date.era === \"BC\";\n    }\n  }, {\n    key: \"balanceDate\",\n    value: function balanceDate(date) {\n      if (date.year <= 0) {\n        date.era = date.era === \"BC\" ? \"AD\" : \"BC\";\n        date.year = 1 - date.year;\n      }\n    }\n  }]);\n  return $3b62074eb05584b2$export$80ee6245ec4f29ec;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Data from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\n// Locales starting on Sunday have been removed for compression.\nvar $2fe286d2fb449abb$export$7a5acbd77d414bd9 = {\n  \"001\": 1,\n  AD: 1,\n  AE: 6,\n  AF: 6,\n  AI: 1,\n  AL: 1,\n  AM: 1,\n  AN: 1,\n  AT: 1,\n  AX: 1,\n  AZ: 1,\n  BA: 1,\n  BE: 1,\n  BG: 1,\n  BH: 6,\n  BM: 1,\n  BN: 1,\n  BY: 1,\n  CH: 1,\n  CL: 1,\n  CM: 1,\n  CR: 1,\n  CY: 1,\n  CZ: 1,\n  DE: 1,\n  DJ: 6,\n  DK: 1,\n  DZ: 6,\n  EC: 1,\n  EE: 1,\n  EG: 6,\n  ES: 1,\n  FI: 1,\n  FJ: 1,\n  FO: 1,\n  FR: 1,\n  GB: 1,\n  GE: 1,\n  GF: 1,\n  GP: 1,\n  GR: 1,\n  HR: 1,\n  HU: 1,\n  IE: 1,\n  IQ: 6,\n  IR: 6,\n  IS: 1,\n  IT: 1,\n  JO: 6,\n  KG: 1,\n  KW: 6,\n  KZ: 1,\n  LB: 1,\n  LI: 1,\n  LK: 1,\n  LT: 1,\n  LU: 1,\n  LV: 1,\n  LY: 6,\n  MC: 1,\n  MD: 1,\n  ME: 1,\n  MK: 1,\n  MN: 1,\n  MQ: 1,\n  MV: 5,\n  MY: 1,\n  NL: 1,\n  NO: 1,\n  NZ: 1,\n  OM: 6,\n  PL: 1,\n  QA: 6,\n  RE: 1,\n  RO: 1,\n  RS: 1,\n  RU: 1,\n  SD: 6,\n  SE: 1,\n  SI: 1,\n  SK: 1,\n  SM: 1,\n  SY: 6,\n  TJ: 1,\n  TM: 1,\n  TR: 1,\n  UA: 1,\n  UY: 1,\n  UZ: 1,\n  VA: 1,\n  VN: 1,\n  XK: 1\n};\nfunction $14e0f24ef4ac5c92$export$ea39ec197993aef0(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\nfunction $14e0f24ef4ac5c92$export$a18c89cbd24170ff(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n  // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\nfunction $14e0f24ef4ac5c92$export$5841f9eb9773f25f(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.era === b.era && a.year === b.year;\n}\nfunction $14e0f24ef4ac5c92$export$91b62ebf2ba703ee(a, b) {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\nfunction $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2(a, b) {\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\nfunction $14e0f24ef4ac5c92$export$ea840f5a6dda8147(a, b) {\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\nfunction $14e0f24ef4ac5c92$export$629b0a497aa65267(date, timeZone) {\n  return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone));\n}\nfunction $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale) {\n  var julian = date.calendar.toJulianDay(date);\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  var dayOfWeek = Math.ceil(julian + 1 - $14e0f24ef4ac5c92$var$getWeekStart(locale)) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  return dayOfWeek;\n}\nfunction $14e0f24ef4ac5c92$export$461939dd4422153(timeZone) {\n  return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(Date.now(), timeZone);\n}\nfunction $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone) {\n  return (0, $11d87f3f76e88657$export$93522d1a439f3617)($14e0f24ef4ac5c92$export$461939dd4422153(timeZone));\n}\nfunction $14e0f24ef4ac5c92$export$68781ddf31c0090f(a, b) {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\nfunction $14e0f24ef4ac5c92$export$c19a80a9721b80f6(a, b) {\n  return $14e0f24ef4ac5c92$var$timeToMs(a) - $14e0f24ef4ac5c92$var$timeToMs(b);\n}\nfunction $14e0f24ef4ac5c92$var$timeToMs(a) {\n  return a.hour * 3600000 + a.minute * 60000 + a.second * 1000 + a.millisecond;\n}\nfunction $14e0f24ef4ac5c92$export$126c91c941de7e(a, timeZone) {\n  var ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(a, timeZone);\n  var tomorrow = a.add({\n    days: 1\n  });\n  var tomorrowMs = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\nvar $14e0f24ef4ac5c92$var$localTimeZone = null;\nfunction $14e0f24ef4ac5c92$export$aa8b41735afcabd2() {\n  // TODO: invalidate this somehow?\n  if ($14e0f24ef4ac5c92$var$localTimeZone == null) $14e0f24ef4ac5c92$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  return $14e0f24ef4ac5c92$var$localTimeZone;\n}\nfunction $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date) {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({\n    days: date.day - 1\n  });\n}\nfunction $14e0f24ef4ac5c92$export$a2258d9c4118825c(date) {\n  return date.add({\n    days: date.calendar.getDaysInMonth(date) - date.day\n  });\n}\nfunction $14e0f24ef4ac5c92$export$f91e89d3d0406102(date) {\n  return $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date.subtract({\n    months: date.month - 1\n  }));\n}\nfunction $14e0f24ef4ac5c92$export$8b7aa55c66d5569e(date) {\n  return $14e0f24ef4ac5c92$export$a2258d9c4118825c(date.add({\n    months: date.calendar.getMonthsInYear(date) - date.month\n  }));\n}\nfunction $14e0f24ef4ac5c92$export$5412ac11713b72ad(date) {\n  if (date.calendar.getMinimumMonthInYear) return date.calendar.getMinimumMonthInYear(date);\n  return 1;\n}\nfunction $14e0f24ef4ac5c92$export$b2f4953d301981d5(date) {\n  if (date.calendar.getMinimumDayInMonth) return date.calendar.getMinimumDayInMonth(date);\n  return 1;\n}\nfunction $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale) {\n  var dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);\n  return date.subtract({\n    days: dayOfWeek\n  });\n}\nfunction $14e0f24ef4ac5c92$export$ef8b6d9133084f4e(date, locale) {\n  return $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale).add({\n    days: 6\n  });\n}\nvar $14e0f24ef4ac5c92$var$cachedRegions = new Map();\nfunction $14e0f24ef4ac5c92$var$getRegion(locale) {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    var region = $14e0f24ef4ac5c92$var$cachedRegions.get(locale);\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      $14e0f24ef4ac5c92$var$cachedRegions.set(locale, region);\n    }\n    return region;\n  }\n  // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n  var part = locale.split(\"-\")[1];\n  return part === \"u\" ? null : part;\n}\nfunction $14e0f24ef4ac5c92$var$getWeekStart(locale) {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  var region = $14e0f24ef4ac5c92$var$getRegion(locale);\n  return (0, $2fe286d2fb449abb$export$7a5acbd77d414bd9)[region] || 0;\n}\nfunction $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(date, locale) {\n  var days = date.calendar.getDaysInMonth(date);\n  return Math.ceil(($14e0f24ef4ac5c92$export$2061056d06d7cdf7($14e0f24ef4ac5c92$export$a5a3b454ada2268e(date), locale) + days) / 7);\n}\nfunction $14e0f24ef4ac5c92$export$5c333a116e949cdd(a, b) {\n  if (a && b) return a.compare(b) <= 0 ? a : b;\n  return a || b;\n}\nfunction $14e0f24ef4ac5c92$export$a75f2bff57811055(a, b) {\n  if (a && b) return a.compare(b) >= 0 ? a : b;\n  return a || b;\n}\nvar $14e0f24ef4ac5c92$var$WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\nfunction $14e0f24ef4ac5c92$export$618d60ea299da42(date, locale) {\n  var julian = date.calendar.toJulianDay(date);\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  var dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  var region = $14e0f24ef4ac5c92$var$getRegion(locale);\n  // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n  var _ref = $14e0f24ef4ac5c92$var$WEEKEND_DATA[region] || [6, 0],\n    _ref2 = _slicedToArray(_ref, 2),\n    start = _ref2[0],\n    end = _ref2[1];\n  return dayOfWeek === start || dayOfWeek === end;\n}\nfunction $14e0f24ef4ac5c92$export$ee9d87258e1d19ed(date, locale) {\n  return !$14e0f24ef4ac5c92$export$618d60ea299da42(date, locale);\n}\nfunction $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) {\n  date = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n  var year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);\n  return $11d87f3f76e88657$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\nfunction $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  var date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\nfunction $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone) {\n  // Fast path for UTC.\n  if (timeZone === \"UTC\") return 0;\n  // Fast path: for local timezone, use native Date.\n  if (timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)()) return new Date(ms).getTimezoneOffset() * -60000;\n  var _$11d87f3f76e88657$va = $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone),\n    year = _$11d87f3f76e88657$va.year,\n    month = _$11d87f3f76e88657$va.month,\n    day = _$11d87f3f76e88657$va.day,\n    hour = _$11d87f3f76e88657$va.hour,\n    minute = _$11d87f3f76e88657$va.minute,\n    second = _$11d87f3f76e88657$va.second;\n  var utc = $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\nvar $11d87f3f76e88657$var$formattersByTimeZone = new Map();\nfunction $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone) {\n  var formatter = $11d87f3f76e88657$var$formattersByTimeZone.get(timeZone);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat(\"en-US\", {\n      timeZone: timeZone,\n      hour12: false,\n      era: \"short\",\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\"\n    });\n    $11d87f3f76e88657$var$formattersByTimeZone.set(timeZone, formatter);\n  }\n  var parts = formatter.formatToParts(new Date(ms));\n  var namedParts = {};\n  var _iterator = _createForOfIteratorHelper(parts),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var part = _step.value;\n      if (part.type !== \"literal\") namedParts[part.type] = part.value;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return {\n    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n    year: namedParts.era === \"BC\" || namedParts.era === \"B\" ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === \"24\" ? 0 : +namedParts.hour,\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\nvar $11d87f3f76e88657$var$DAYMILLIS = 86400000;\nfunction $11d87f3f76e88657$export$136f38efe7caf549(date, timeZone) {\n  var ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date);\n  var earlier = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  var later = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  return $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later);\n}\nfunction $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later) {\n  var found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(function (absolute) {\n    return $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute);\n  });\n}\nfunction $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute) {\n  var parts = $11d87f3f76e88657$var$getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;\n}\nfunction $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone) {\n  var disambiguation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"compatible\";\n  var dateTime = $11d87f3f76e88657$export$b21e0b124e224484(date);\n  // Fast path: if the time zone is UTC, use native Date.\n  if (timeZone === \"UTC\") return $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);\n  // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n  if (timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)() && disambiguation === \"compatible\") {\n    dateTime = $11d87f3f76e88657$export$b4a036af3fc0b032(dateTime, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n    // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n    var date1 = new Date();\n    var year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(dateTime.era, dateTime.year);\n    date1.setFullYear(year, dateTime.month - 1, dateTime.day);\n    date1.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return date1.getTime();\n  }\n  var ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);\n  var offsetBefore = $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  var offsetAfter = $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  var valid = $11d87f3f76e88657$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n  if (valid.length === 1) return valid[0];\n  if (valid.length > 1) switch (disambiguation) {\n    // 'compatible' means 'earlier' for \"fall back\" transitions\n    case \"compatible\":\n    case \"earlier\":\n      return valid[0];\n    case \"later\":\n      return valid[valid.length - 1];\n    case \"reject\":\n      throw new RangeError(\"Multiple possible absolute times found\");\n  }\n  switch (disambiguation) {\n    case \"earlier\":\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n    case \"compatible\":\n    case \"later\":\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n    case \"reject\":\n      throw new RangeError(\"No such absolute time found\");\n  }\n}\nfunction $11d87f3f76e88657$export$e67a095c620b86fe(dateTime, timeZone) {\n  var disambiguation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"compatible\";\n  return new Date($11d87f3f76e88657$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));\n}\nfunction $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone) {\n  var offset = $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone);\n  var date = new Date(ms + offset);\n  var year = date.getUTCFullYear();\n  var month = date.getUTCMonth() + 1;\n  var day = date.getUTCDate();\n  var hour = date.getUTCHours();\n  var minute = date.getUTCMinutes();\n  var second = date.getUTCSeconds();\n  var millisecond = date.getUTCMilliseconds();\n  return new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\nfunction $11d87f3f76e88657$export$e57ff100d91bd4b9(date, timeZone) {\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(date.getTime(), timeZone);\n}\nfunction $11d87f3f76e88657$export$d7f92bcd3596b086(date) {\n  return $11d87f3f76e88657$export$e57ff100d91bd4b9(date, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\nfunction $11d87f3f76e88657$export$93522d1a439f3617(dateTime) {\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\nfunction $11d87f3f76e88657$export$6f4d78149f3f53ac(date) {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\nfunction $11d87f3f76e88657$export$4d0393e732857be5(date) {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\nfunction $11d87f3f76e88657$export$b21e0b124e224484(date, time) {\n  var hour = 0,\n    minute = 0,\n    second = 0,\n    millisecond = 0;\n  if (\"timeZone\" in date) {\n    hour = date.hour;\n    minute = date.minute;\n    second = date.second;\n    millisecond = date.millisecond;\n  } else if (\"hour\" in date && !time) return date;\n  if (time) {\n    hour = time.hour;\n    minute = time.minute;\n    second = time.second;\n    millisecond = time.millisecond;\n  }\n  return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);\n}\nfunction $11d87f3f76e88657$export$d33f79e3ffc3dc83(dateTime) {\n  return new (0, $35ea8db9cb2ccb90$export$680ea196effce5f)(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\nfunction $11d87f3f76e88657$export$b4a036af3fc0b032(date, calendar) {\n  if (date.calendar.identifier === calendar.identifier) return date;\n  var calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  var copy = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(copy);\n  return copy;\n}\nfunction $11d87f3f76e88657$export$84c95a83c799e074(date, timeZone, disambiguation) {\n  if (date instanceof (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)) {\n    if (date.timeZone === timeZone) return date;\n    return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);\n  }\n  var ms = $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation);\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone);\n}\nfunction $11d87f3f76e88657$export$83aac07b4c37b25(date) {\n  var ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return new Date(ms);\n}\nfunction $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone) {\n  var ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone), date.calendar);\n}\nfunction $11d87f3f76e88657$export$d9b67bc93c097491(date) {\n  return $11d87f3f76e88657$export$538b00033cc11c75(date, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\nvar $735220c2d4774dd3$var$ONE_HOUR = 3600000;\nfunction $735220c2d4774dd3$export$e16d8520af44a096(date, duration) {\n  var mutableDate = date.copy();\n  var days = \"hour\" in mutableDate ? $735220c2d4774dd3$var$addTimeFields(mutableDate, duration) : 0;\n  $735220c2d4774dd3$var$addYears(mutableDate, duration.years || 0);\n  if (mutableDate.calendar.balanceYearMonth) mutableDate.calendar.balanceYearMonth(mutableDate, date);\n  mutableDate.month += duration.months || 0;\n  $735220c2d4774dd3$var$balanceYearMonth(mutableDate);\n  $735220c2d4774dd3$var$constrainMonthDay(mutableDate);\n  mutableDate.day += (duration.weeks || 0) * 7;\n  mutableDate.day += duration.days || 0;\n  mutableDate.day += days;\n  $735220c2d4774dd3$var$balanceDay(mutableDate);\n  if (mutableDate.calendar.balanceDate) mutableDate.calendar.balanceDate(mutableDate);\n  // Constrain in case adding ended up with a date outside the valid range for the calendar system.\n  // The behavior here is slightly different than when constraining in the `set` function in that\n  // we adjust smaller fields to their minimum/maximum values rather than constraining each field\n  // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.\n  if (mutableDate.year < 1) {\n    mutableDate.year = 1;\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n  var maxYear = mutableDate.calendar.getYearsInEra(mutableDate);\n  if (mutableDate.year > maxYear) {\n    var _mutableDate_calendar, _mutableDate_calendar_isInverseEra;\n    var isInverseEra = (_mutableDate_calendar_isInverseEra = (_mutableDate_calendar = mutableDate.calendar).isInverseEra) === null || _mutableDate_calendar_isInverseEra === void 0 ? void 0 : _mutableDate_calendar_isInverseEra.call(_mutableDate_calendar, mutableDate);\n    mutableDate.year = maxYear;\n    mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);\n    mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n  if (mutableDate.month < 1) {\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n  var maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);\n  if (mutableDate.month > maxMonth) {\n    mutableDate.month = maxMonth;\n    mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n  mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));\n  return mutableDate;\n}\nfunction $735220c2d4774dd3$var$addYears(date, years) {\n  var _date_calendar, _date_calendar_isInverseEra;\n  if ((_date_calendar_isInverseEra = (_date_calendar = date.calendar).isInverseEra) === null || _date_calendar_isInverseEra === void 0 ? void 0 : _date_calendar_isInverseEra.call(_date_calendar, date)) years = -years;\n  date.year += years;\n}\nfunction $735220c2d4774dd3$var$balanceYearMonth(date) {\n  while (date.month < 1) {\n    $735220c2d4774dd3$var$addYears(date, -1);\n    date.month += date.calendar.getMonthsInYear(date);\n  }\n  var monthsInYear = 0;\n  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {\n    date.month -= monthsInYear;\n    $735220c2d4774dd3$var$addYears(date, 1);\n  }\n}\nfunction $735220c2d4774dd3$var$balanceDay(date) {\n  while (date.day < 1) {\n    date.month--;\n    $735220c2d4774dd3$var$balanceYearMonth(date);\n    date.day += date.calendar.getDaysInMonth(date);\n  }\n  while (date.day > date.calendar.getDaysInMonth(date)) {\n    date.day -= date.calendar.getDaysInMonth(date);\n    date.month++;\n    $735220c2d4774dd3$var$balanceYearMonth(date);\n  }\n}\nfunction $735220c2d4774dd3$var$constrainMonthDay(date) {\n  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\nfunction $735220c2d4774dd3$export$c4e2ecac49351ef2(date) {\n  if (date.calendar.constrainDate) date.calendar.constrainDate(date);\n  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n  $735220c2d4774dd3$var$constrainMonthDay(date);\n}\nfunction $735220c2d4774dd3$export$3e2544e88a25bff8(duration) {\n  var inverseDuration = {};\n  for (var key in duration) if (typeof duration[key] === \"number\") inverseDuration[key] = -duration[key];\n  return inverseDuration;\n}\nfunction $735220c2d4774dd3$export$4e2d2ead65e5f7e3(date, duration) {\n  return $735220c2d4774dd3$export$e16d8520af44a096(date, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\nfunction $735220c2d4774dd3$export$adaa4cf7ef1b65be(date, fields) {\n  var mutableDate = date.copy();\n  if (fields.era != null) mutableDate.era = fields.era;\n  if (fields.year != null) mutableDate.year = fields.year;\n  if (fields.month != null) mutableDate.month = fields.month;\n  if (fields.day != null) mutableDate.day = fields.day;\n  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutableDate);\n  return mutableDate;\n}\nfunction $735220c2d4774dd3$export$e5d5e1c1822b6e56(value, fields) {\n  var mutableValue = value.copy();\n  if (fields.hour != null) mutableValue.hour = fields.hour;\n  if (fields.minute != null) mutableValue.minute = fields.minute;\n  if (fields.second != null) mutableValue.second = fields.second;\n  if (fields.millisecond != null) mutableValue.millisecond = fields.millisecond;\n  $735220c2d4774dd3$export$7555de1e070510cb(mutableValue);\n  return mutableValue;\n}\nfunction $735220c2d4774dd3$var$balanceTime(time) {\n  time.second += Math.floor(time.millisecond / 1000);\n  time.millisecond = $735220c2d4774dd3$var$nonNegativeMod(time.millisecond, 1000);\n  time.minute += Math.floor(time.second / 60);\n  time.second = $735220c2d4774dd3$var$nonNegativeMod(time.second, 60);\n  time.hour += Math.floor(time.minute / 60);\n  time.minute = $735220c2d4774dd3$var$nonNegativeMod(time.minute, 60);\n  var days = Math.floor(time.hour / 24);\n  time.hour = $735220c2d4774dd3$var$nonNegativeMod(time.hour, 24);\n  return days;\n}\nfunction $735220c2d4774dd3$export$7555de1e070510cb(time) {\n  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n  time.second = Math.max(0, Math.min(time.second, 59));\n  time.minute = Math.max(0, Math.min(time.minute, 59));\n  time.hour = Math.max(0, Math.min(time.hour, 23));\n}\nfunction $735220c2d4774dd3$var$nonNegativeMod(a, b) {\n  var result = a % b;\n  if (result < 0) result += b;\n  return result;\n}\nfunction $735220c2d4774dd3$var$addTimeFields(time, duration) {\n  time.hour += duration.hours || 0;\n  time.minute += duration.minutes || 0;\n  time.second += duration.seconds || 0;\n  time.millisecond += duration.milliseconds || 0;\n  return $735220c2d4774dd3$var$balanceTime(time);\n}\nfunction $735220c2d4774dd3$export$7ed87b6bc2506470(time, duration) {\n  var res = time.copy();\n  $735220c2d4774dd3$var$addTimeFields(res, duration);\n  return res;\n}\nfunction $735220c2d4774dd3$export$fe34d3a381cd7501(time, duration) {\n  return $735220c2d4774dd3$export$7ed87b6bc2506470(time, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\nfunction $735220c2d4774dd3$export$d52ced6badfb9a4c(value, field, amount, options) {\n  var mutable = value.copy();\n  switch (field) {\n    case \"era\":\n      {\n        var eras = value.calendar.getEras();\n        var eraIndex = eras.indexOf(value.era);\n        if (eraIndex < 0) throw new Error(\"Invalid era: \" + value.era);\n        eraIndex = $735220c2d4774dd3$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);\n        mutable.era = eras[eraIndex];\n        // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n        $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n        break;\n      }\n    case \"year\":\n      var _mutable_calendar, _mutable_calendar_isInverseEra;\n      if ((_mutable_calendar_isInverseEra = (_mutable_calendar = mutable.calendar).isInverseEra) === null || _mutable_calendar_isInverseEra === void 0 ? void 0 : _mutable_calendar_isInverseEra.call(_mutable_calendar, mutable)) amount = -amount;\n      // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n      mutable.year = $735220c2d4774dd3$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);\n      if (mutable.year === -Infinity) mutable.year = 1;\n      if (mutable.calendar.balanceYearMonth) mutable.calendar.balanceYearMonth(mutable, value);\n      break;\n    case \"month\":\n      mutable.month = $735220c2d4774dd3$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);\n      break;\n    case \"day\":\n      mutable.day = $735220c2d4774dd3$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);\n      break;\n    default:\n      throw new Error(\"Unsupported field \" + field);\n  }\n  if (value.calendar.balanceDate) value.calendar.balanceDate(mutable);\n  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n  return mutable;\n}\nfunction $735220c2d4774dd3$export$dd02b3e0007dfe28(value, field, amount, options) {\n  var mutable = value.copy();\n  switch (field) {\n    case \"hour\":\n      {\n        var hours = value.hour;\n        var min = 0;\n        var max = 23;\n        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n          var isPM = hours >= 12;\n          min = isPM ? 12 : 0;\n          max = isPM ? 23 : 11;\n        }\n        mutable.hour = $735220c2d4774dd3$var$cycleValue(hours, amount, min, max, options === null || options === void 0 ? void 0 : options.round);\n        break;\n      }\n    case \"minute\":\n      mutable.minute = $735220c2d4774dd3$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n      break;\n    case \"second\":\n      mutable.second = $735220c2d4774dd3$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n      break;\n    case \"millisecond\":\n      mutable.millisecond = $735220c2d4774dd3$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);\n      break;\n    default:\n      throw new Error(\"Unsupported field \" + field);\n  }\n  return mutable;\n}\nfunction $735220c2d4774dd3$var$cycleValue(value, amount, min, max) {\n  var round = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (round) {\n    value += Math.sign(amount);\n    if (value < min) value = max;\n    var div = Math.abs(amount);\n    if (amount > 0) value = Math.ceil(value / div) * div;else value = Math.floor(value / div) * div;\n    if (value > max) value = min;\n  } else {\n    value += amount;\n    if (value < min) value = max - (min - value - 1);else if (value > max) value = min + (value - max - 1);\n  }\n  return value;\n}\nfunction $735220c2d4774dd3$export$96b1d28349274637(dateTime, duration) {\n  var ms;\n  if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.days != null && duration.days !== 0) {\n    var res = $735220c2d4774dd3$export$e16d8520af44a096((0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime), {\n      years: duration.years,\n      months: duration.months,\n      days: duration.days\n    });\n    // Changing the date may change the timezone offset, so we need to recompute\n    // using the 'compatible' disambiguation.\n    ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone);\n  } else\n    // Otherwise, preserve the offset of the original date.\n    ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;\n  // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n  // For example, adding one hour during a DST transition may result in the hour field staying the same or\n  // skipping an hour. This results in the offset field changing value instead of the specified field.\n  ms += duration.milliseconds || 0;\n  ms += (duration.seconds || 0) * 1000;\n  ms += (duration.minutes || 0) * 60000;\n  ms += (duration.hours || 0) * 3600000;\n  var res1 = (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone);\n  return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(res1, dateTime.calendar);\n}\nfunction $735220c2d4774dd3$export$6814caac34ca03c7(dateTime, duration) {\n  return $735220c2d4774dd3$export$96b1d28349274637(dateTime, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\nfunction $735220c2d4774dd3$export$9a297d111fc86b79(dateTime, field, amount, options) {\n  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n  switch (field) {\n    case \"hour\":\n      {\n        var min = 0;\n        var max = 23;\n        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n          var isPM = dateTime.hour >= 12;\n          min = isPM ? 12 : 0;\n          max = isPM ? 23 : 11;\n        }\n        // The minimum and maximum hour may be affected by daylight saving time.\n        // For example, it might jump forward at midnight, and skip 1am.\n        // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n        // the possible absolute times for the min and max, and find the maximum range\n        // that is within the current day.\n        var plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime);\n        var minDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n          hour: min\n        }), new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n        var minAbsolute = [(0, $11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, \"earlier\"), (0, $11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, \"later\")].filter(function (ms) {\n          return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === minDate.day;\n        })[0];\n        var maxDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n          hour: max\n        }), new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n        var maxAbsolute = [(0, $11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, \"earlier\"), (0, $11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, \"later\")].filter(function (ms) {\n          return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === maxDate.day;\n        }).pop();\n        // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n        // This is done in hours from the Unix epoch so that cycleValue works correctly,\n        // and then converted back to milliseconds.\n        var ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;\n        var hours = Math.floor(ms / $735220c2d4774dd3$var$ONE_HOUR);\n        var remainder = ms % $735220c2d4774dd3$var$ONE_HOUR;\n        ms = $735220c2d4774dd3$var$cycleValue(hours, amount, Math.floor(minAbsolute / $735220c2d4774dd3$var$ONE_HOUR), Math.floor(maxAbsolute / $735220c2d4774dd3$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $735220c2d4774dd3$var$ONE_HOUR + remainder;\n        // Now compute the new timezone offset, and convert the absolute time back to local time.\n        return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);\n      }\n    case \"minute\":\n    case \"second\":\n    case \"millisecond\":\n      // @ts-ignore\n      return $735220c2d4774dd3$export$dd02b3e0007dfe28(dateTime, field, amount, options);\n    case \"era\":\n    case \"year\":\n    case \"month\":\n    case \"day\":\n      {\n        var res = $735220c2d4774dd3$export$d52ced6badfb9a4c((0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime), field, amount, options);\n        var ms1 = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone);\n        return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms1, dateTime.timeZone), dateTime.calendar);\n      }\n    default:\n      throw new Error(\"Unsupported field \" + field);\n  }\n}\nfunction $735220c2d4774dd3$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {\n  // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n  var plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime);\n  var res = $735220c2d4774dd3$export$e5d5e1c1822b6e56($735220c2d4774dd3$export$adaa4cf7ef1b65be(plainDateTime, fields), fields);\n  // If the resulting plain date time values are equal, return the original time.\n  // We don't want to change the offset when setting the time to the same value.\n  if (res.compare(plainDateTime) === 0) return dateTime;\n  var ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone, disambiguation);\n  return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nvar $fae977aafc393c5c$var$TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nvar $fae977aafc393c5c$var$DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nvar $fae977aafc393c5c$var$DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nvar $fae977aafc393c5c$var$ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::(\\d{2}))?)?\\[(.*?)\\]$/;\nvar $fae977aafc393c5c$var$ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::(\\d{2}))?)|Z)$/;\nfunction $fae977aafc393c5c$export$c9698ec7f05a07e1(value) {\n  var m = value.match($fae977aafc393c5c$var$TIME_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 time string: \" + value);\n  return new (0, $35ea8db9cb2ccb90$export$680ea196effce5f)($fae977aafc393c5c$var$parseNumber(m[1], 0, 23), m[2] ? $fae977aafc393c5c$var$parseNumber(m[2], 0, 59) : 0, m[3] ? $fae977aafc393c5c$var$parseNumber(m[3], 0, 59) : 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, Infinity) * 1000 : 0);\n}\nfunction $fae977aafc393c5c$export$6b862160d295c8e(value) {\n  var m = value.match($fae977aafc393c5c$var$DATE_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date string: \" + value);\n  var date = new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)($fae977aafc393c5c$var$parseNumber(m[1], 0, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date;\n}\nfunction $fae977aafc393c5c$export$588937bcd60ade55(value) {\n  var m = value.match($fae977aafc393c5c$var$DATE_TIME_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n  var date = new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date;\n}\nfunction $fae977aafc393c5c$export$fd7893f06e92a6a4(value, disambiguation) {\n  var m = value.match($fae977aafc393c5c$var$ZONED_DATE_TIME_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n  var date = new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[10], 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  var plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(date);\n  var ms;\n  if (m[8]) {\n    var _m_;\n    date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : \"0\", 0, 59) * 60000;\n    ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(date) - date.offset;\n    // Validate offset against parsed date.\n    var absolutes = (0, $11d87f3f76e88657$export$136f38efe7caf549)(plainDateTime, date.timeZone);\n    if (!absolutes.includes(ms)) throw new Error(\"Offset \".concat($fae977aafc393c5c$var$offsetToString(date.offset), \" is invalid for \").concat($fae977aafc393c5c$export$4223de14708adc63(date), \" in \").concat(date.timeZone));\n  } else\n    // Convert to absolute and back to fix invalid times due to DST.\n    ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)((0, $11d87f3f76e88657$export$b21e0b124e224484)(plainDateTime), date.timeZone, disambiguation);\n  return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, date.timeZone);\n}\nfunction $fae977aafc393c5c$export$5adfdab05168c219(value, timeZone) {\n  var m = value.match($fae977aafc393c5c$var$ABSOLUTE_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n  var date = new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, timeZone, 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  var _m_;\n  if (m[8]) date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : \"0\", 0, 59) * 60000;\n  return (0, $11d87f3f76e88657$export$538b00033cc11c75)(date, timeZone);\n}\nfunction $fae977aafc393c5c$export$8e384432362ed0f0(value) {\n  return $fae977aafc393c5c$export$5adfdab05168c219(value, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\nfunction $fae977aafc393c5c$var$parseNumber(value, min, max) {\n  var val = Number(value);\n  if (val < min || val > max) throw new RangeError(\"Value out of range: \".concat(min, \" <= \").concat(val, \" <= \").concat(max));\n  return val;\n}\nfunction $fae977aafc393c5c$export$f59dee82248f5ad4(time) {\n  return \"\".concat(String(time.hour).padStart(2, \"0\"), \":\").concat(String(time.minute).padStart(2, \"0\"), \":\").concat(String(time.second).padStart(2, \"0\")).concat(time.millisecond ? String(time.millisecond / 1000).slice(1) : \"\");\n}\nfunction $fae977aafc393c5c$export$60dfd74aa96791bd(date) {\n  var gregorianDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(date, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n  return \"\".concat(String(gregorianDate.year).padStart(4, \"0\"), \"-\").concat(String(gregorianDate.month).padStart(2, \"0\"), \"-\").concat(String(gregorianDate.day).padStart(2, \"0\"));\n}\nfunction $fae977aafc393c5c$export$4223de14708adc63(date) {\n  // @ts-ignore\n  return \"\".concat($fae977aafc393c5c$export$60dfd74aa96791bd(date), \"T\").concat($fae977aafc393c5c$export$f59dee82248f5ad4(date));\n}\nfunction $fae977aafc393c5c$var$offsetToString(offset) {\n  var sign = Math.sign(offset) < 0 ? \"-\" : \"+\";\n  offset = Math.abs(offset);\n  var offsetHours = Math.floor(offset / 3600000);\n  var offsetMinutes = offset % 3600000 / 60000;\n  return \"\".concat(sign).concat(String(offsetHours).padStart(2, \"0\"), \":\").concat(String(offsetMinutes).padStart(2, \"0\"));\n}\nfunction $fae977aafc393c5c$export$bf79f1ebf4b18792(date) {\n  return \"\".concat($fae977aafc393c5c$export$4223de14708adc63(date)).concat($fae977aafc393c5c$var$offsetToString(date.offset), \"[\").concat(date.timeZone, \"]\");\n}\nfunction $35ea8db9cb2ccb90$var$shiftArgs(args) {\n  var calendar = typeof args[0] === \"object\" ? args.shift() : new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)();\n  var era;\n  if (typeof args[0] === \"string\") era = args.shift();else {\n    var eras = calendar.getEras();\n    era = eras[eras.length - 1];\n  }\n  var year = args.shift();\n  var month = args.shift();\n  var day = args.shift();\n  return [calendar, era, year, month, day];\n}\nvar\n// This prevents TypeScript from allowing other types with the same fields to match.\n// i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n// If that behavior is desired, use the AnyCalendarDate interface instead.\n$35ea8db9cb2ccb90$var$_type = /*#__PURE__*/new WeakMap();\nvar $35ea8db9cb2ccb90$export$99faa760c7908e4f = /*#__PURE__*/function () {\n  function $35ea8db9cb2ccb90$export$99faa760c7908e4f() {\n    _classCallCheck(this, $35ea8db9cb2ccb90$export$99faa760c7908e4f);\n    (0, $cUVuN$swchelperssrc_class_private_field_initmjs)(this, $35ea8db9cb2ccb90$var$_type, {\n      writable: true,\n      value: void 0\n    });\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var _$35ea8db9cb2ccb90$va = $35ea8db9cb2ccb90$var$shiftArgs(args),\n      _$35ea8db9cb2ccb90$va2 = _slicedToArray(_$35ea8db9cb2ccb90$va, 5),\n      calendar = _$35ea8db9cb2ccb90$va2[0],\n      era = _$35ea8db9cb2ccb90$va2[1],\n      year = _$35ea8db9cb2ccb90$va2[2],\n      month = _$35ea8db9cb2ccb90$va2[3],\n      day = _$35ea8db9cb2ccb90$va2[4];\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n  }\n  _createClass($35ea8db9cb2ccb90$export$99faa760c7908e4f, [{\n    key: \"copy\",\n    value: /** Returns a copy of this date. */function copy() {\n      if (this.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);\n    }\n    /** Returns a new `CalendarDate` with the given duration added to it. */\n  }, {\n    key: \"add\",\n    value: function add(duration) {\n      return (0, $735220c2d4774dd3$export$e16d8520af44a096)(this, duration);\n    }\n    /** Returns a new `CalendarDate` with the given duration subtracted from it. */\n  }, {\n    key: \"subtract\",\n    value: function subtract(duration) {\n      return (0, $735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);\n    }\n    /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  }, {\n    key: \"set\",\n    value: function set(fields) {\n      return (0, $735220c2d4774dd3$export$adaa4cf7ef1b65be)(this, fields);\n    }\n    /**\n    * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\n    * When the resulting value reaches the limits of the field, it wraps around.\n    */\n  }, {\n    key: \"cycle\",\n    value: function cycle(field, amount, options) {\n      return (0, $735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options);\n    }\n    /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */\n  }, {\n    key: \"toDate\",\n    value: function toDate(timeZone) {\n      return (0, $11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone);\n    }\n    /** Converts the date to an ISO 8601 formatted string. */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return (0, $fae977aafc393c5c$export$60dfd74aa96791bd)(this);\n    }\n    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  }, {\n    key: \"compare\",\n    value: function compare(b) {\n      return (0, $14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b);\n    }\n  }]);\n  return $35ea8db9cb2ccb90$export$99faa760c7908e4f;\n}();\nvar\n// This prevents TypeScript from allowing other types with the same fields to match.\n$35ea8db9cb2ccb90$var$_type1 = /*#__PURE__*/new WeakMap();\nvar $35ea8db9cb2ccb90$export$680ea196effce5f = /*#__PURE__*/function () {\n  function $35ea8db9cb2ccb90$export$680ea196effce5f() {\n    var hour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var minute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var second = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var millisecond = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    _classCallCheck(this, $35ea8db9cb2ccb90$export$680ea196effce5f);\n    (0, $cUVuN$swchelperssrc_class_private_field_initmjs)(this, $35ea8db9cb2ccb90$var$_type1, {\n      writable: true,\n      value: void 0\n    });\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n    (0, $735220c2d4774dd3$export$7555de1e070510cb)(this);\n  }\n  _createClass($35ea8db9cb2ccb90$export$680ea196effce5f, [{\n    key: \"copy\",\n    value: /** Returns a copy of this time. */function copy() {\n      return new $35ea8db9cb2ccb90$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);\n    }\n    /** Returns a new `Time` with the given duration added to it. */\n  }, {\n    key: \"add\",\n    value: function add(duration) {\n      return (0, $735220c2d4774dd3$export$7ed87b6bc2506470)(this, duration);\n    }\n    /** Returns a new `Time` with the given duration subtracted from it. */\n  }, {\n    key: \"subtract\",\n    value: function subtract(duration) {\n      return (0, $735220c2d4774dd3$export$fe34d3a381cd7501)(this, duration);\n    }\n    /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  }, {\n    key: \"set\",\n    value: function set(fields) {\n      return (0, $735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields);\n    }\n    /**\n    * Returns a new `Time` with the given field adjusted by a specified amount.\n    * When the resulting value reaches the limits of the field, it wraps around.\n    */\n  }, {\n    key: \"cycle\",\n    value: function cycle(field, amount, options) {\n      return (0, $735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options);\n    }\n    /** Converts the time to an ISO 8601 formatted string. */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return (0, $fae977aafc393c5c$export$f59dee82248f5ad4)(this);\n    }\n    /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */\n  }, {\n    key: \"compare\",\n    value: function compare(b) {\n      return (0, $14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, b);\n    }\n  }]);\n  return $35ea8db9cb2ccb90$export$680ea196effce5f;\n}();\nvar\n// This prevents TypeScript from allowing other types with the same fields to match.\n$35ea8db9cb2ccb90$var$_type2 = /*#__PURE__*/new WeakMap();\nvar $35ea8db9cb2ccb90$export$ca871e8dbb80966f = /*#__PURE__*/function () {\n  function $35ea8db9cb2ccb90$export$ca871e8dbb80966f() {\n    _classCallCheck(this, $35ea8db9cb2ccb90$export$ca871e8dbb80966f);\n    (0, $cUVuN$swchelperssrc_class_private_field_initmjs)(this, $35ea8db9cb2ccb90$var$_type2, {\n      writable: true,\n      value: void 0\n    });\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    var _$35ea8db9cb2ccb90$va3 = $35ea8db9cb2ccb90$var$shiftArgs(args),\n      _$35ea8db9cb2ccb90$va4 = _slicedToArray(_$35ea8db9cb2ccb90$va3, 5),\n      calendar = _$35ea8db9cb2ccb90$va4[0],\n      era = _$35ea8db9cb2ccb90$va4[1],\n      year = _$35ea8db9cb2ccb90$va4[2],\n      month = _$35ea8db9cb2ccb90$va4[3],\n      day = _$35ea8db9cb2ccb90$va4[4];\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n  }\n  _createClass($35ea8db9cb2ccb90$export$ca871e8dbb80966f, [{\n    key: \"copy\",\n    value: /** Returns a copy of this date. */function copy() {\n      if (this.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    }\n    /** Returns a new `CalendarDateTime` with the given duration added to it. */\n  }, {\n    key: \"add\",\n    value: function add(duration) {\n      return (0, $735220c2d4774dd3$export$e16d8520af44a096)(this, duration);\n    }\n    /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */\n  }, {\n    key: \"subtract\",\n    value: function subtract(duration) {\n      return (0, $735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);\n    }\n    /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  }, {\n    key: \"set\",\n    value: function set(fields) {\n      return (0, $735220c2d4774dd3$export$adaa4cf7ef1b65be)((0, $735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields), fields);\n    }\n    /**\n    * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\n    * When the resulting value reaches the limits of the field, it wraps around.\n    */\n  }, {\n    key: \"cycle\",\n    value: function cycle(field, amount, options) {\n      switch (field) {\n        case \"era\":\n        case \"year\":\n        case \"month\":\n        case \"day\":\n          return (0, $735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options);\n        default:\n          return (0, $735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options);\n      }\n    }\n    /** Converts the date to a native JavaScript Date object in the given time zone. */\n  }, {\n    key: \"toDate\",\n    value: function toDate(timeZone, disambiguation) {\n      return (0, $11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone, disambiguation);\n    }\n    /** Converts the date to an ISO 8601 formatted string. */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return (0, $fae977aafc393c5c$export$4223de14708adc63)(this);\n    }\n    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  }, {\n    key: \"compare\",\n    value: function compare(b) {\n      var res = (0, $14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b);\n      if (res === 0) return (0, $14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, (0, $11d87f3f76e88657$export$b21e0b124e224484)(b));\n      return res;\n    }\n  }]);\n  return $35ea8db9cb2ccb90$export$ca871e8dbb80966f;\n}();\nvar\n// This prevents TypeScript from allowing other types with the same fields to match.\n$35ea8db9cb2ccb90$var$_type3 = /*#__PURE__*/new WeakMap();\nvar $35ea8db9cb2ccb90$export$d3b7288e7994edea = /*#__PURE__*/function () {\n  function $35ea8db9cb2ccb90$export$d3b7288e7994edea() {\n    _classCallCheck(this, $35ea8db9cb2ccb90$export$d3b7288e7994edea);\n    (0, $cUVuN$swchelperssrc_class_private_field_initmjs)(this, $35ea8db9cb2ccb90$var$_type3, {\n      writable: true,\n      value: void 0\n    });\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    var _$35ea8db9cb2ccb90$va5 = $35ea8db9cb2ccb90$var$shiftArgs(args),\n      _$35ea8db9cb2ccb90$va6 = _slicedToArray(_$35ea8db9cb2ccb90$va5, 5),\n      calendar = _$35ea8db9cb2ccb90$va6[0],\n      era = _$35ea8db9cb2ccb90$va6[1],\n      year = _$35ea8db9cb2ccb90$va6[2],\n      month = _$35ea8db9cb2ccb90$va6[3],\n      day = _$35ea8db9cb2ccb90$va6[4];\n    var timeZone = args.shift();\n    var offset = args.shift();\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.timeZone = timeZone;\n    this.offset = offset;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n  }\n  _createClass($35ea8db9cb2ccb90$export$d3b7288e7994edea, [{\n    key: \"copy\",\n    value: /** Returns a copy of this date. */function copy() {\n      if (this.era) return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    }\n    /** Returns a new `ZonedDateTime` with the given duration added to it. */\n  }, {\n    key: \"add\",\n    value: function add(duration) {\n      return (0, $735220c2d4774dd3$export$96b1d28349274637)(this, duration);\n    }\n    /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */\n  }, {\n    key: \"subtract\",\n    value: function subtract(duration) {\n      return (0, $735220c2d4774dd3$export$6814caac34ca03c7)(this, duration);\n    }\n    /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  }, {\n    key: \"set\",\n    value: function set(fields, disambiguation) {\n      return (0, $735220c2d4774dd3$export$31b5430eb18be4f8)(this, fields, disambiguation);\n    }\n    /**\n    * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\n    * When the resulting value reaches the limits of the field, it wraps around.\n    */\n  }, {\n    key: \"cycle\",\n    value: function cycle(field, amount, options) {\n      return (0, $735220c2d4774dd3$export$9a297d111fc86b79)(this, field, amount, options);\n    }\n    /** Converts the date to a native JavaScript Date object. */\n  }, {\n    key: \"toDate\",\n    value: function toDate() {\n      return (0, $11d87f3f76e88657$export$83aac07b4c37b25)(this);\n    }\n    /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return (0, $fae977aafc393c5c$export$bf79f1ebf4b18792)(this);\n    }\n    /** Converts the date to an ISO 8601 formatted string in UTC. */\n  }, {\n    key: \"toAbsoluteString\",\n    value: function toAbsoluteString() {\n      return this.toDate().toISOString();\n    }\n    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  }, {\n    key: \"compare\",\n    value: function compare(b) {\n      // TODO: Is this a bad idea??\n      return this.toDate().getTime() - (0, $11d87f3f76e88657$export$84c95a83c799e074)(b, this.timeZone).toDate().getTime();\n    }\n  }]);\n  return $35ea8db9cb2ccb90$export$d3b7288e7994edea;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\nvar $62225008020f0a13$var$ERA_START_DATES = [[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]];\nvar $62225008020f0a13$var$ERA_END_DATES = [[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]];\nvar $62225008020f0a13$var$ERA_ADDENDS = [1867, 1911, 1925, 1988, 2018];\nvar $62225008020f0a13$var$ERA_NAMES = [\"meiji\", \"taisho\", \"showa\", \"heisei\", \"reiwa\"];\nfunction $62225008020f0a13$var$findEraFromGregorianDate(date) {\n  var idx = $62225008020f0a13$var$ERA_START_DATES.findIndex(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 3),\n      year = _ref4[0],\n      month = _ref4[1],\n      day = _ref4[2];\n    if (date.year < year) return true;\n    if (date.year === year && date.month < month) return true;\n    if (date.year === year && date.month === month && date.day < day) return true;\n    return false;\n  });\n  if (idx === -1) return $62225008020f0a13$var$ERA_START_DATES.length - 1;\n  if (idx === 0) return 0;\n  return idx - 1;\n}\nfunction $62225008020f0a13$var$toGregorian(date) {\n  var eraAddend = $62225008020f0a13$var$ERA_ADDENDS[$62225008020f0a13$var$ERA_NAMES.indexOf(date.era)];\n  if (!eraAddend) throw new Error(\"Unknown era: \" + date.era);\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.year + eraAddend, date.month, date.day);\n}\nvar $62225008020f0a13$export$b746ab2b60cdffbf = /*#__PURE__*/function (_ref5) {\n  _inherits($62225008020f0a13$export$b746ab2b60cdffbf, _ref5);\n  var _super = _createSuper($62225008020f0a13$export$b746ab2b60cdffbf);\n  function $62225008020f0a13$export$b746ab2b60cdffbf() {\n    var _this;\n    _classCallCheck(this, $62225008020f0a13$export$b746ab2b60cdffbf);\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(_assertThisInitialized(_this), \"identifier\", \"japanese\");\n    return _this;\n  }\n  _createClass($62225008020f0a13$export$b746ab2b60cdffbf, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var date = _get(_getPrototypeOf($62225008020f0a13$export$b746ab2b60cdffbf.prototype), \"fromJulianDay\", this).call(this, jd);\n      var era = $62225008020f0a13$var$findEraFromGregorianDate(date);\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, $62225008020f0a13$var$ERA_NAMES[era], date.year - $62225008020f0a13$var$ERA_ADDENDS[era], date.month, date.day);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      return _get(_getPrototypeOf($62225008020f0a13$export$b746ab2b60cdffbf.prototype), \"toJulianDay\", this).call(this, $62225008020f0a13$var$toGregorian(date));\n    }\n  }, {\n    key: \"balanceDate\",\n    value: function balanceDate(date) {\n      var gregorianDate = $62225008020f0a13$var$toGregorian(date);\n      var era = $62225008020f0a13$var$findEraFromGregorianDate(gregorianDate);\n      if ($62225008020f0a13$var$ERA_NAMES[era] !== date.era) {\n        date.era = $62225008020f0a13$var$ERA_NAMES[era];\n        date.year = gregorianDate.year - $62225008020f0a13$var$ERA_ADDENDS[era];\n      }\n      // Constrain in case we went before the first supported era.\n      this.constrainDate(date);\n    }\n  }, {\n    key: \"constrainDate\",\n    value: function constrainDate(date) {\n      var idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n      var end = $62225008020f0a13$var$ERA_END_DATES[idx];\n      if (end != null) {\n        var _end = _slicedToArray(end, 3),\n          endYear = _end[0],\n          endMonth = _end[1],\n          endDay = _end[2];\n        // Constrain the year to the maximum possible value in the era.\n        // Then constrain the month and day fields within that.\n        var maxYear = endYear - $62225008020f0a13$var$ERA_ADDENDS[idx];\n        date.year = Math.max(1, Math.min(maxYear, date.year));\n        if (date.year === maxYear) {\n          date.month = Math.min(endMonth, date.month);\n          if (date.month === endMonth) date.day = Math.min(endDay, date.day);\n        }\n      }\n      if (date.year === 1 && idx >= 0) {\n        var _$62225008020f0a13$va = _slicedToArray($62225008020f0a13$var$ERA_START_DATES[idx], 3),\n          startMonth = _$62225008020f0a13$va[1],\n          startDay = _$62225008020f0a13$va[2];\n        date.month = Math.max(startMonth, date.month);\n        if (date.month === startMonth) date.day = Math.max(startDay, date.day);\n      }\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return $62225008020f0a13$var$ERA_NAMES;\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra(date) {\n      // Get the number of years in the era, taking into account the date's month and day fields.\n      var era = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n      var cur = $62225008020f0a13$var$ERA_START_DATES[era];\n      var next = $62225008020f0a13$var$ERA_START_DATES[era + 1];\n      if (next == null)\n        // 9999 gregorian is the maximum year allowed.\n        return 9999 - cur[0] + 1;\n      var years = next[0] - cur[0];\n      if (date.month < next[1] || date.month === next[1] && date.day < next[2]) years++;\n      return years;\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      return _get(_getPrototypeOf($62225008020f0a13$export$b746ab2b60cdffbf.prototype), \"getDaysInMonth\", this).call(this, $62225008020f0a13$var$toGregorian(date));\n    }\n  }, {\n    key: \"getMinimumMonthInYear\",\n    value: function getMinimumMonthInYear(date) {\n      var start = $62225008020f0a13$var$getMinimums(date);\n      return start ? start[1] : 1;\n    }\n  }, {\n    key: \"getMinimumDayInMonth\",\n    value: function getMinimumDayInMonth(date) {\n      var start = $62225008020f0a13$var$getMinimums(date);\n      return start && date.month === start[1] ? start[2] : 1;\n    }\n  }]);\n  return $62225008020f0a13$export$b746ab2b60cdffbf;\n}((0, $3b62074eb05584b2$export$80ee6245ec4f29ec));\nfunction $62225008020f0a13$var$getMinimums(date) {\n  if (date.year === 1) {\n    var idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    return $62225008020f0a13$var$ERA_START_DATES[idx];\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nvar $8d73d47422ca7302$var$BUDDHIST_ERA_START = -543;\nvar $8d73d47422ca7302$export$42d20a78301dee44 = /*#__PURE__*/function (_ref6) {\n  _inherits($8d73d47422ca7302$export$42d20a78301dee44, _ref6);\n  var _super2 = _createSuper($8d73d47422ca7302$export$42d20a78301dee44);\n  function $8d73d47422ca7302$export$42d20a78301dee44() {\n    var _this2;\n    _classCallCheck(this, $8d73d47422ca7302$export$42d20a78301dee44);\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    _this2 = _super2.call.apply(_super2, [this].concat(args));\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(_assertThisInitialized(_this2), \"identifier\", \"buddhist\");\n    return _this2;\n  }\n  _createClass($8d73d47422ca7302$export$42d20a78301dee44, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var gregorianDate = _get(_getPrototypeOf($8d73d47422ca7302$export$42d20a78301dee44.prototype), \"fromJulianDay\", this).call(this, jd);\n      var year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(gregorianDate.era, gregorianDate.year);\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year - $8d73d47422ca7302$var$BUDDHIST_ERA_START, gregorianDate.month, gregorianDate.day);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      return _get(_getPrototypeOf($8d73d47422ca7302$export$42d20a78301dee44.prototype), \"toJulianDay\", this).call(this, $8d73d47422ca7302$var$toGregorian(date));\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"BE\"];\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      return _get(_getPrototypeOf($8d73d47422ca7302$export$42d20a78301dee44.prototype), \"getDaysInMonth\", this).call(this, $8d73d47422ca7302$var$toGregorian(date));\n    }\n  }, {\n    key: \"balanceDate\",\n    value: function balanceDate() {}\n  }]);\n  return $8d73d47422ca7302$export$42d20a78301dee44;\n}((0, $3b62074eb05584b2$export$80ee6245ec4f29ec));\nfunction $8d73d47422ca7302$var$toGregorian(date) {\n  var _ref7 = (0, $3b62074eb05584b2$export$4475b7e617eb123c)(date.year + $8d73d47422ca7302$var$BUDDHIST_ERA_START),\n    _ref8 = _slicedToArray(_ref7, 2),\n    era = _ref8[0],\n    year = _ref8[1];\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nvar $5f31bd6f0c8940b2$var$TAIWAN_ERA_START = 1911;\nfunction $5f31bd6f0c8940b2$var$gregorianYear(date) {\n  return date.era === \"minguo\" ? date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START : 1 - date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n}\nfunction $5f31bd6f0c8940b2$var$gregorianToTaiwan(year) {\n  var y = year - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n  if (y > 0) return [\"minguo\", y];else return [\"before_minguo\", 1 - y];\n}\nvar $5f31bd6f0c8940b2$export$65e01080afcb0799 = /*#__PURE__*/function (_ref9) {\n  _inherits($5f31bd6f0c8940b2$export$65e01080afcb0799, _ref9);\n  var _super3 = _createSuper($5f31bd6f0c8940b2$export$65e01080afcb0799);\n  function $5f31bd6f0c8940b2$export$65e01080afcb0799() {\n    var _this3;\n    _classCallCheck(this, $5f31bd6f0c8940b2$export$65e01080afcb0799);\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    _this3 = _super3.call.apply(_super3, [this].concat(args));\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(_assertThisInitialized(_this3), \"identifier\", \"roc\") // Republic of China\n    ;\n    return _this3;\n  }\n  _createClass($5f31bd6f0c8940b2$export$65e01080afcb0799, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var date = _get(_getPrototypeOf($5f31bd6f0c8940b2$export$65e01080afcb0799.prototype), \"fromJulianDay\", this).call(this, jd);\n      var extendedYear = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);\n      var _$5f31bd6f0c8940b2$va = $5f31bd6f0c8940b2$var$gregorianToTaiwan(extendedYear),\n        _$5f31bd6f0c8940b2$va2 = _slicedToArray(_$5f31bd6f0c8940b2$va, 2),\n        era = _$5f31bd6f0c8940b2$va2[0],\n        year = _$5f31bd6f0c8940b2$va2[1];\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, date.month, date.day);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      return _get(_getPrototypeOf($5f31bd6f0c8940b2$export$65e01080afcb0799.prototype), \"toJulianDay\", this).call(this, $5f31bd6f0c8940b2$var$toGregorian(date));\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"before_minguo\", \"minguo\"];\n    }\n  }, {\n    key: \"balanceDate\",\n    value: function balanceDate(date) {\n      var _$5f31bd6f0c8940b2$va3 = $5f31bd6f0c8940b2$var$gregorianToTaiwan($5f31bd6f0c8940b2$var$gregorianYear(date)),\n        _$5f31bd6f0c8940b2$va4 = _slicedToArray(_$5f31bd6f0c8940b2$va3, 2),\n        era = _$5f31bd6f0c8940b2$va4[0],\n        year = _$5f31bd6f0c8940b2$va4[1];\n      date.era = era;\n      date.year = year;\n    }\n  }, {\n    key: \"isInverseEra\",\n    value: function isInverseEra(date) {\n      return date.era === \"before_minguo\";\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      return _get(_getPrototypeOf($5f31bd6f0c8940b2$export$65e01080afcb0799.prototype), \"getDaysInMonth\", this).call(this, $5f31bd6f0c8940b2$var$toGregorian(date));\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra(date) {\n      return date.era === \"before_minguo\" ? 9999 : 9999 - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n    }\n  }]);\n  return $5f31bd6f0c8940b2$export$65e01080afcb0799;\n}((0, $3b62074eb05584b2$export$80ee6245ec4f29ec));\nfunction $5f31bd6f0c8940b2$var$toGregorian(date) {\n  var _ref10 = (0, $3b62074eb05584b2$export$4475b7e617eb123c)($5f31bd6f0c8940b2$var$gregorianYear(date)),\n    _ref11 = _slicedToArray(_ref10, 2),\n    era = _ref11[0],\n    year = _ref11[1];\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nvar $f3ed2e4472ae7e25$var$PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\nfunction $f3ed2e4472ae7e25$var$isLeapYear(year) {\n  var y0 = year > 0 ? year - 474 : year - 473;\n  var y1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(y0, 2820) + 474;\n  return (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)((y1 + 38) * 31, 128) < 31;\n}\nfunction $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, day) {\n  var y0 = year > 0 ? year - 474 : year - 473;\n  var y1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(y0, 2820) + 474;\n  var offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n  return $f3ed2e4472ae7e25$var$PERSIAN_EPOCH - 1 + 1029983 * Math.floor(y0 / 2820) + 365 * (y1 - 1) + Math.floor((31 * y1 - 5) / 128) + offset + day;\n}\nvar $f3ed2e4472ae7e25$export$37fccdbfd14c5939 = /*#__PURE__*/function () {\n  function $f3ed2e4472ae7e25$export$37fccdbfd14c5939() {\n    _classCallCheck(this, $f3ed2e4472ae7e25$export$37fccdbfd14c5939);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"persian\");\n  }\n  _createClass($f3ed2e4472ae7e25$export$37fccdbfd14c5939, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var d0 = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(475, 1, 1);\n      var n2820 = Math.floor(d0 / 1029983);\n      var d1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(d0, 1029983);\n      var y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n      var year = 474 + 2820 * n2820 + y2820;\n      if (year <= 0) year--;\n      var yDay = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, 1, 1) + 1;\n      var month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n      var day = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, 1) + 1;\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month, day);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      return $f3ed2e4472ae7e25$var$persianToJulianDay(date.year, date.month, date.day);\n    }\n  }, {\n    key: \"getMonthsInYear\",\n    value: function getMonthsInYear() {\n      return 12;\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      if (date.month <= 6) return 31;\n      if (date.month <= 11) return 30;\n      return $f3ed2e4472ae7e25$var$isLeapYear(date.year) ? 30 : 29;\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"AP\"];\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra() {\n      // 9378-10-10 persian is 9999-12-31 gregorian.\n      // Round down to 9377 to set the maximum full year.\n      return 9377;\n    }\n  }]);\n  return $f3ed2e4472ae7e25$export$37fccdbfd14c5939;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n// Starts in 78 AD,\nvar $82c358003bdda0a8$var$INDIAN_ERA_START = 78;\n// The Indian year starts 80 days later than the Gregorian year.\nvar $82c358003bdda0a8$var$INDIAN_YEAR_START = 80;\nvar $82c358003bdda0a8$export$39f31c639fa15726 = /*#__PURE__*/function (_ref12) {\n  _inherits($82c358003bdda0a8$export$39f31c639fa15726, _ref12);\n  var _super4 = _createSuper($82c358003bdda0a8$export$39f31c639fa15726);\n  function $82c358003bdda0a8$export$39f31c639fa15726() {\n    var _this4;\n    _classCallCheck(this, $82c358003bdda0a8$export$39f31c639fa15726);\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    _this4 = _super4.call.apply(_super4, [this].concat(args));\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(_assertThisInitialized(_this4), \"identifier\", \"indian\");\n    return _this4;\n  }\n  _createClass($82c358003bdda0a8$export$39f31c639fa15726, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      // Gregorian date for Julian day\n      var date = _get(_getPrototypeOf($82c358003bdda0a8$export$39f31c639fa15726.prototype), \"fromJulianDay\", this).call(this, jd);\n      // Year in Saka era\n      var indianYear = date.year - $82c358003bdda0a8$var$INDIAN_ERA_START;\n      // Day number in Gregorian year (starting from 0)\n      var yDay = jd - (0, $3b62074eb05584b2$export$f297eb839006d339)(date.era, date.year, 1, 1);\n      var leapMonth;\n      if (yDay < $82c358003bdda0a8$var$INDIAN_YEAR_START) {\n        //  Day is at the end of the preceding Saka year\n        indianYear--;\n        // Days in leapMonth this year, previous Gregorian year\n        leapMonth = (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year - 1) ? 31 : 30;\n        yDay += leapMonth + 155 + 90 + 10;\n      } else {\n        // Days in leapMonth this year\n        leapMonth = (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year) ? 31 : 30;\n        yDay -= $82c358003bdda0a8$var$INDIAN_YEAR_START;\n      }\n      var indianMonth;\n      var indianDay;\n      if (yDay < leapMonth) {\n        indianMonth = 1;\n        indianDay = yDay + 1;\n      } else {\n        var mDay = yDay - leapMonth;\n        if (mDay < 155) {\n          indianMonth = Math.floor(mDay / 31) + 2;\n          indianDay = mDay % 31 + 1;\n        } else {\n          mDay -= 155;\n          indianMonth = Math.floor(mDay / 30) + 7;\n          indianDay = mDay % 30 + 1;\n        }\n      }\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, indianYear, indianMonth, indianDay);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      var extendedYear = date.year + $82c358003bdda0a8$var$INDIAN_ERA_START;\n      var _ref13 = (0, $3b62074eb05584b2$export$4475b7e617eb123c)(extendedYear),\n        _ref14 = _slicedToArray(_ref13, 2),\n        era = _ref14[0],\n        year = _ref14[1];\n      var leapMonth;\n      var jd;\n      if ((0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(year)) {\n        leapMonth = 31;\n        jd = (0, $3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 21);\n      } else {\n        leapMonth = 30;\n        jd = (0, $3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 22);\n      }\n      if (date.month === 1) return jd + date.day - 1;\n      jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n      if (date.month >= 8) jd += (date.month - 7) * 30;\n      jd += date.day - 1;\n      return jd;\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      if (date.month === 1 && (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year + $82c358003bdda0a8$var$INDIAN_ERA_START)) return 31;\n      if (date.month >= 2 && date.month <= 6) return 31;\n      return 30;\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra() {\n      // 9999-12-31 gregorian is 9920-10-10 indian.\n      // Round down to 9919 for the last full year.\n      return 9919;\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"saka\"];\n    }\n  }, {\n    key: \"balanceDate\",\n    value: function balanceDate() {}\n  }]);\n  return $82c358003bdda0a8$export$39f31c639fa15726;\n}((0, $3b62074eb05584b2$export$80ee6245ec4f29ec));\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\nvar $f2f3e0e3a817edbd$var$CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\nvar $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\nvar $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START = 1300;\nvar $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END = 1600;\nvar $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS = 460322;\nfunction $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, day) {\n  return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;\n}\nfunction $f2f3e0e3a817edbd$var$julianDayToIslamic(calendar, epoch, jd) {\n  var year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  var month = Math.min(12, Math.ceil((jd - (29 + $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  var day = jd - $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, 1) + 1;\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(calendar, year, month, day);\n}\nfunction $f2f3e0e3a817edbd$var$isLeapYear(year) {\n  return (14 + 11 * year) % 30 < 11;\n}\nvar $f2f3e0e3a817edbd$export$2066795aadd37bfc = /*#__PURE__*/function () {\n  function $f2f3e0e3a817edbd$export$2066795aadd37bfc() {\n    _classCallCheck(this, $f2f3e0e3a817edbd$export$2066795aadd37bfc);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"islamic-civil\");\n  }\n  _createClass($f2f3e0e3a817edbd$export$2066795aadd37bfc, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$CIVIL_EPOC, jd);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$CIVIL_EPOC, date.year, date.month, date.day);\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      var length = 29 + date.month % 2;\n      if (date.month === 12 && $f2f3e0e3a817edbd$var$isLeapYear(date.year)) length++;\n      return length;\n    }\n  }, {\n    key: \"getMonthsInYear\",\n    value: function getMonthsInYear() {\n      return 12;\n    }\n  }, {\n    key: \"getDaysInYear\",\n    value: function getDaysInYear(date) {\n      return $f2f3e0e3a817edbd$var$isLeapYear(date.year) ? 355 : 354;\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra() {\n      // 9999 gregorian\n      return 9665;\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"AH\"];\n    }\n  }]);\n  return $f2f3e0e3a817edbd$export$2066795aadd37bfc;\n}();\nvar $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 = /*#__PURE__*/function (_$f2f3e0e3a817edbd$ex) {\n  _inherits($f2f3e0e3a817edbd$export$37f0887f2f9d22f7, _$f2f3e0e3a817edbd$ex);\n  var _super5 = _createSuper($f2f3e0e3a817edbd$export$37f0887f2f9d22f7);\n  function $f2f3e0e3a817edbd$export$37f0887f2f9d22f7() {\n    var _this5;\n    _classCallCheck(this, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7);\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    _this5 = _super5.call.apply(_super5, [this].concat(args));\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(_assertThisInitialized(_this5), \"identifier\", \"islamic-tbla\");\n    return _this5;\n  }\n  _createClass($f2f3e0e3a817edbd$export$37f0887f2f9d22f7, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, jd);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n    }\n  }]);\n  return $f2f3e0e3a817edbd$export$37f0887f2f9d22f7;\n}($f2f3e0e3a817edbd$export$2066795aadd37bfc); // Generated by scripts/generate-umalqura.js\nvar $f2f3e0e3a817edbd$var$UMALQURA_DATA = \"qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=\";\nvar $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH;\nvar $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE;\nfunction $f2f3e0e3a817edbd$var$umalquraYearStart(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS + $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\nfunction $f2f3e0e3a817edbd$var$umalquraMonthLength(year, month) {\n  var idx = year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START;\n  var mask = 0x01 << 11 - (month - 1);\n  if (($f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0) return 29;else return 30;\n}\nfunction $f2f3e0e3a817edbd$var$umalquraMonthStart(year, month) {\n  var day = $f2f3e0e3a817edbd$var$umalquraYearStart(year);\n  for (var i = 1; i < month; i++) day += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n  return day;\n}\nfunction $f2f3e0e3a817edbd$var$umalquraYearLength(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year + 1 - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\nvar $f2f3e0e3a817edbd$export$5baab4758c231076 = /*#__PURE__*/function (_$f2f3e0e3a817edbd$ex2) {\n  _inherits($f2f3e0e3a817edbd$export$5baab4758c231076, _$f2f3e0e3a817edbd$ex2);\n  var _super6 = _createSuper($f2f3e0e3a817edbd$export$5baab4758c231076);\n  function $f2f3e0e3a817edbd$export$5baab4758c231076() {\n    var _this6;\n    _classCallCheck(this, $f2f3e0e3a817edbd$export$5baab4758c231076);\n    _this6 = _super6.call(this);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(_assertThisInitialized(_this6), \"identifier\", \"islamic-umalqura\");\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH) $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($f2f3e0e3a817edbd$var$UMALQURA_DATA), function (c) {\n      return c.charCodeAt(0);\n    }).buffer);\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE) {\n      $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START + 1);\n      var yearStart = 0;\n      for (var year = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START; year <= $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END; year++) {\n        $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] = yearStart;\n        for (var i = 1; i <= 12; i++) yearStart += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n      }\n    }\n    return _this6;\n  }\n  _createClass($f2f3e0e3a817edbd$export$5baab4758c231076, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var days = jd - $f2f3e0e3a817edbd$var$CIVIL_EPOC;\n      var startDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_START);\n      var endDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END);\n      if (days < startDays || days > endDays) return _get(_getPrototypeOf($f2f3e0e3a817edbd$export$5baab4758c231076.prototype), \"fromJulianDay\", this).call(this, jd);else {\n        var y = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START - 1;\n        var m = 1;\n        var d = 1;\n        while (d > 0) {\n          y++;\n          d = days - $f2f3e0e3a817edbd$var$umalquraYearStart(y) + 1;\n          var yearLength = $f2f3e0e3a817edbd$var$umalquraYearLength(y);\n          if (d === yearLength) {\n            m = 12;\n            break;\n          } else if (d < yearLength) {\n            var monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n            m = 1;\n            while (d > monthLength) {\n              d -= monthLength;\n              m++;\n              monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n            }\n            break;\n          }\n        }\n        return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, y, m, days - $f2f3e0e3a817edbd$var$umalquraMonthStart(y, m) + 1);\n      }\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return _get(_getPrototypeOf($f2f3e0e3a817edbd$export$5baab4758c231076.prototype), \"toJulianDay\", this).call(this, date);\n      return $f2f3e0e3a817edbd$var$CIVIL_EPOC + $f2f3e0e3a817edbd$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return _get(_getPrototypeOf($f2f3e0e3a817edbd$export$5baab4758c231076.prototype), \"getDaysInMonth\", this).call(this, date);\n      return $f2f3e0e3a817edbd$var$umalquraMonthLength(date.year, date.month);\n    }\n  }, {\n    key: \"getDaysInYear\",\n    value: function getDaysInYear(date) {\n      if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return _get(_getPrototypeOf($f2f3e0e3a817edbd$export$5baab4758c231076.prototype), \"getDaysInYear\", this).call(this, date);\n      return $f2f3e0e3a817edbd$var$umalquraYearLength(date.year);\n    }\n  }]);\n  return $f2f3e0e3a817edbd$export$5baab4758c231076;\n}($f2f3e0e3a817edbd$export$2066795aadd37bfc);\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\nvar $7c5f6fbf42389787$var$HEBREW_EPOCH = 347997;\n// Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\nvar $7c5f6fbf42389787$var$HOUR_PARTS = 1080;\nvar $7c5f6fbf42389787$var$DAY_PARTS = 24 * $7c5f6fbf42389787$var$HOUR_PARTS;\n// An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\nvar $7c5f6fbf42389787$var$MONTH_DAYS = 29;\nvar $7c5f6fbf42389787$var$MONTH_FRACT = 12 * $7c5f6fbf42389787$var$HOUR_PARTS + 793;\nvar $7c5f6fbf42389787$var$MONTH_PARTS = $7c5f6fbf42389787$var$MONTH_DAYS * $7c5f6fbf42389787$var$DAY_PARTS + $7c5f6fbf42389787$var$MONTH_FRACT;\nfunction $7c5f6fbf42389787$var$isLeapYear(year) {\n  return (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(year * 7 + 1, 19) < 7;\n}\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\nfunction $7c5f6fbf42389787$var$hebrewDelay1(year) {\n  var months = Math.floor((235 * year - 234) / 19);\n  var parts = 12084 + 13753 * months;\n  var day = months * 29 + Math.floor(parts / 25920);\n  if ((0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(3 * (day + 1), 7) < 3) day += 1;\n  return day;\n}\n// Check for delay in start of new year due to length of adjacent years\nfunction $7c5f6fbf42389787$var$hebrewDelay2(year) {\n  var last = $7c5f6fbf42389787$var$hebrewDelay1(year - 1);\n  var present = $7c5f6fbf42389787$var$hebrewDelay1(year);\n  var next = $7c5f6fbf42389787$var$hebrewDelay1(year + 1);\n  if (next - present === 356) return 2;\n  if (present - last === 382) return 1;\n  return 0;\n}\nfunction $7c5f6fbf42389787$var$startOfYear(year) {\n  return $7c5f6fbf42389787$var$hebrewDelay1(year) + $7c5f6fbf42389787$var$hebrewDelay2(year);\n}\nfunction $7c5f6fbf42389787$var$getDaysInYear(year) {\n  return $7c5f6fbf42389787$var$startOfYear(year + 1) - $7c5f6fbf42389787$var$startOfYear(year);\n}\nfunction $7c5f6fbf42389787$var$getYearType(year) {\n  var yearLength = $7c5f6fbf42389787$var$getDaysInYear(year);\n  if (yearLength > 380) yearLength -= 30; // Subtract length of leap month.\n  switch (yearLength) {\n    case 353:\n      return 0;\n    // deficient\n    case 354:\n      return 1;\n    // normal\n    case 355:\n      return 2;\n    // complete\n  }\n}\n\nfunction $7c5f6fbf42389787$var$getDaysInMonth(year, month) {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !$7c5f6fbf42389787$var$isLeapYear(year)) month++;\n  // First of all, dispose of fixed-length 29 day months\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) return 29;\n  var yearType = $7c5f6fbf42389787$var$getYearType(year);\n  // If it's Heshvan, days depend on length of year\n  if (month === 2) return yearType === 2 ? 30 : 29;\n  // Similarly, Kislev varies with the length of year\n  if (month === 3) return yearType === 0 ? 29 : 30;\n  // Adar I only exists in leap years\n  if (month === 6) return $7c5f6fbf42389787$var$isLeapYear(year) ? 30 : 0;\n  return 30;\n}\nvar $7c5f6fbf42389787$export$ca405048b8fb5af = /*#__PURE__*/function () {\n  function $7c5f6fbf42389787$export$ca405048b8fb5af() {\n    _classCallCheck(this, $7c5f6fbf42389787$export$ca405048b8fb5af);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"hebrew\");\n  }\n  _createClass($7c5f6fbf42389787$export$ca405048b8fb5af, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var d = jd - $7c5f6fbf42389787$var$HEBREW_EPOCH;\n      var m = d * $7c5f6fbf42389787$var$DAY_PARTS / $7c5f6fbf42389787$var$MONTH_PARTS; // Months (approx)\n      var year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n      var ys = $7c5f6fbf42389787$var$startOfYear(year); // 1st day of year\n      var dayOfYear = Math.floor(d - ys);\n      // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n      while (dayOfYear < 1) {\n        year--;\n        ys = $7c5f6fbf42389787$var$startOfYear(year);\n        dayOfYear = Math.floor(d - ys);\n      }\n      // Now figure out which month we're in, and the date within that month\n      var month = 1;\n      var monthStart = 0;\n      while (monthStart < dayOfYear) {\n        monthStart += $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n        month++;\n      }\n      month--;\n      monthStart -= $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n      var day = dayOfYear - monthStart;\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month, day);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      var jd = $7c5f6fbf42389787$var$startOfYear(date.year);\n      for (var month = 1; month < date.month; month++) jd += $7c5f6fbf42389787$var$getDaysInMonth(date.year, month);\n      return jd + date.day + $7c5f6fbf42389787$var$HEBREW_EPOCH;\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      return $7c5f6fbf42389787$var$getDaysInMonth(date.year, date.month);\n    }\n  }, {\n    key: \"getMonthsInYear\",\n    value: function getMonthsInYear(date) {\n      return $7c5f6fbf42389787$var$isLeapYear(date.year) ? 13 : 12;\n    }\n  }, {\n    key: \"getDaysInYear\",\n    value: function getDaysInYear(date) {\n      return $7c5f6fbf42389787$var$getDaysInYear(date.year);\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra() {\n      // 6239 gregorian\n      return 9999;\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"AM\"];\n    }\n  }, {\n    key: \"balanceYearMonth\",\n    value: function balanceYearMonth(date, previousDate) {\n      // Keep date in the same month when switching between leap years and non leap years\n      if (previousDate.year !== date.year) {\n        if ($7c5f6fbf42389787$var$isLeapYear(previousDate.year) && !$7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month--;else if (!$7c5f6fbf42389787$var$isLeapYear(previousDate.year) && $7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month++;\n      }\n    }\n  }]);\n  return $7c5f6fbf42389787$export$ca405048b8fb5af;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\nvar $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH = 1723856;\nvar $b956b2d7a6cf451f$var$COPTIC_EPOCH = 1824665;\n// The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\nvar $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA = 5500;\nfunction $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, day) {\n  return epoch // difference from Julian epoch to 1,1,1\n  + 365 * year // number of days from years\n  + Math.floor(year / 4) // extra day of leap year\n  + 30 * (month - 1 // number of days from months (1 based)\n  ) + day - 1 // number of days for present month (1 based)\n  ;\n}\n\nfunction $b956b2d7a6cf451f$var$julianDayToCE(epoch, jd) {\n  var year = Math.floor(4 * (jd - epoch) / 1461);\n  var month = 1 + Math.floor((jd - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);\n  var day = jd + 1 - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, 1);\n  return [year, month, day];\n}\nfunction $b956b2d7a6cf451f$var$getLeapDay(year) {\n  return Math.floor(year % 4 / 3);\n}\nfunction $b956b2d7a6cf451f$var$getDaysInMonth(year, month) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0)\n    // not intercalary month\n    return 30;else\n    // intercalary month 5 days + possible leap day\n    return $b956b2d7a6cf451f$var$getLeapDay(year) + 5;\n}\nvar $b956b2d7a6cf451f$export$26ba6eab5e20cd7d = /*#__PURE__*/function () {\n  function $b956b2d7a6cf451f$export$26ba6eab5e20cd7d() {\n    _classCallCheck(this, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"ethiopic\");\n  }\n  _createClass($b956b2d7a6cf451f$export$26ba6eab5e20cd7d, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var _$b956b2d7a6cf451f$va = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd),\n        _$b956b2d7a6cf451f$va2 = _slicedToArray(_$b956b2d7a6cf451f$va, 3),\n        year = _$b956b2d7a6cf451f$va2[0],\n        month = _$b956b2d7a6cf451f$va2[1],\n        day = _$b956b2d7a6cf451f$va2[2];\n      var era = \"AM\";\n      if (year <= 0) {\n        era = \"AA\";\n        year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n      }\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      var year = date.year;\n      if (date.era === \"AA\") year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n      return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, year, date.month, date.day);\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      return $b956b2d7a6cf451f$var$getDaysInMonth(date.year, date.month);\n    }\n  }, {\n    key: \"getMonthsInYear\",\n    value: function getMonthsInYear() {\n      return 13;\n    }\n  }, {\n    key: \"getDaysInYear\",\n    value: function getDaysInYear(date) {\n      return 365 + $b956b2d7a6cf451f$var$getLeapDay(date.year);\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra(date) {\n      // 9999-12-31 gregorian is 9992-20-02 ethiopic.\n      // Round down to 9991 for the last full year.\n      // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.\n      return date.era === \"AA\" ? 9999 : 9991;\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"AA\", \"AM\"];\n    }\n  }]);\n  return $b956b2d7a6cf451f$export$26ba6eab5e20cd7d;\n}();\nvar $b956b2d7a6cf451f$export$d72e0c37005a4914 = /*#__PURE__*/function (_$b956b2d7a6cf451f$ex) {\n  _inherits($b956b2d7a6cf451f$export$d72e0c37005a4914, _$b956b2d7a6cf451f$ex);\n  var _super7 = _createSuper($b956b2d7a6cf451f$export$d72e0c37005a4914);\n  function $b956b2d7a6cf451f$export$d72e0c37005a4914() {\n    var _this7;\n    _classCallCheck(this, $b956b2d7a6cf451f$export$d72e0c37005a4914);\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n    _this7 = _super7.call.apply(_super7, [this].concat(args));\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(_assertThisInitialized(_this7), \"identifier\", \"ethioaa\") // also known as 'ethiopic-amete-alem' in ICU\n    ;\n    return _this7;\n  }\n  _createClass($b956b2d7a6cf451f$export$d72e0c37005a4914, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var _$b956b2d7a6cf451f$va3 = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd),\n        _$b956b2d7a6cf451f$va4 = _slicedToArray(_$b956b2d7a6cf451f$va3, 3),\n        year = _$b956b2d7a6cf451f$va4[0],\n        month = _$b956b2d7a6cf451f$va4[1],\n        day = _$b956b2d7a6cf451f$va4[2];\n      year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, \"AA\", year, month, day);\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"AA\"];\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra() {\n      // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.\n      return 9999;\n    }\n  }]);\n  return $b956b2d7a6cf451f$export$d72e0c37005a4914;\n}($b956b2d7a6cf451f$export$26ba6eab5e20cd7d);\nvar $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 = /*#__PURE__*/function (_$b956b2d7a6cf451f$ex2) {\n  _inherits($b956b2d7a6cf451f$export$fe6243cbe1a4b7c1, _$b956b2d7a6cf451f$ex2);\n  var _super8 = _createSuper($b956b2d7a6cf451f$export$fe6243cbe1a4b7c1);\n  function $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1() {\n    var _this8;\n    _classCallCheck(this, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1);\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n    _this8 = _super8.call.apply(_super8, [this].concat(args));\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(_assertThisInitialized(_this8), \"identifier\", \"coptic\");\n    return _this8;\n  }\n  _createClass($b956b2d7a6cf451f$export$fe6243cbe1a4b7c1, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var _$b956b2d7a6cf451f$va5 = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$COPTIC_EPOCH, jd),\n        _$b956b2d7a6cf451f$va6 = _slicedToArray(_$b956b2d7a6cf451f$va5, 3),\n        year = _$b956b2d7a6cf451f$va6[0],\n        month = _$b956b2d7a6cf451f$va6[1],\n        day = _$b956b2d7a6cf451f$va6[2];\n      var era = \"CE\";\n      if (year <= 0) {\n        era = \"BCE\";\n        year = 1 - year;\n      }\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      var year = date.year;\n      if (date.era === \"BCE\") year = 1 - year;\n      return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$COPTIC_EPOCH, year, date.month, date.day);\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      var year = date.year;\n      if (date.era === \"BCE\") year = 1 - year;\n      return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);\n    }\n  }, {\n    key: \"isInverseEra\",\n    value: function isInverseEra(date) {\n      return date.era === \"BCE\";\n    }\n  }, {\n    key: \"balanceDate\",\n    value: function balanceDate(date) {\n      if (date.year <= 0) {\n        date.era = date.era === \"BCE\" ? \"CE\" : \"BCE\";\n        date.year = 1 - date.year;\n      }\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"BCE\", \"CE\"];\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra(date) {\n      // 9999-12-30 gregorian is 9716-02-20 coptic.\n      // Round down to 9715 for the last full year.\n      // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.\n      return date.era === \"BCE\" ? 9999 : 9715;\n    }\n  }]);\n  return $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1;\n}($b956b2d7a6cf451f$export$26ba6eab5e20cd7d);\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $64244302c3013299$export$dd0bbc9b26defe37(name) {\n  switch (name) {\n    case \"buddhist\":\n      return new (0, $8d73d47422ca7302$export$42d20a78301dee44)();\n    case \"ethiopic\":\n      return new (0, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d)();\n    case \"ethioaa\":\n      return new (0, $b956b2d7a6cf451f$export$d72e0c37005a4914)();\n    case \"coptic\":\n      return new (0, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1)();\n    case \"hebrew\":\n      return new (0, $7c5f6fbf42389787$export$ca405048b8fb5af)();\n    case \"indian\":\n      return new (0, $82c358003bdda0a8$export$39f31c639fa15726)();\n    case \"islamic-civil\":\n      return new (0, $f2f3e0e3a817edbd$export$2066795aadd37bfc)();\n    case \"islamic-tbla\":\n      return new (0, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7)();\n    case \"islamic-umalqura\":\n      return new (0, $f2f3e0e3a817edbd$export$5baab4758c231076)();\n    case \"japanese\":\n      return new (0, $62225008020f0a13$export$b746ab2b60cdffbf)();\n    case \"persian\":\n      return new (0, $f3ed2e4472ae7e25$export$37fccdbfd14c5939)();\n    case \"roc\":\n      return new (0, $5f31bd6f0c8940b2$export$65e01080afcb0799)();\n    case \"gregory\":\n    default:\n      return new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)();\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $fb18d541ea1ad717$var$formatterCache = new Map();\nvar $fb18d541ea1ad717$export$ad991b66133851cf = /*#__PURE__*/function () {\n  function $fb18d541ea1ad717$export$ad991b66133851cf(locale) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, $fb18d541ea1ad717$export$ad991b66133851cf);\n    this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n  _createClass($fb18d541ea1ad717$export$ad991b66133851cf, [{\n    key: \"format\",\n    value: /** Formats a date as a string according to the locale and format options passed to the constructor. */function format(value) {\n      return this.formatter.format(value);\n    }\n    /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n  }, {\n    key: \"formatToParts\",\n    value: function formatToParts(value) {\n      return this.formatter.formatToParts(value);\n    }\n    /** Formats a date range as a string. */\n  }, {\n    key: \"formatRange\",\n    value: function formatRange(start, end) {\n      // @ts-ignore\n      if (typeof this.formatter.formatRange === \"function\")\n        // @ts-ignore\n        return this.formatter.formatRange(start, end);\n      if (end < start) throw new RangeError(\"End date must be >= start date\");\n      // Very basic fallback for old browsers.\n      return \"\".concat(this.formatter.format(start), \" \\u2013 \").concat(this.formatter.format(end));\n    }\n    /** Formats a date range as an array of parts. */\n  }, {\n    key: \"formatRangeToParts\",\n    value: function formatRangeToParts(start, end) {\n      // @ts-ignore\n      if (typeof this.formatter.formatRangeToParts === \"function\")\n        // @ts-ignore\n        return this.formatter.formatRangeToParts(start, end);\n      if (end < start) throw new RangeError(\"End date must be >= start date\");\n      var startParts = this.formatter.formatToParts(start);\n      var endParts = this.formatter.formatToParts(end);\n      return [].concat(_toConsumableArray(startParts.map(function (p) {\n        return _objectSpread(_objectSpread({}, p), {}, {\n          source: \"startRange\"\n        });\n      })), [{\n        type: \"literal\",\n        value: \" – \",\n        source: \"shared\"\n      }], _toConsumableArray(endParts.map(function (p) {\n        return _objectSpread(_objectSpread({}, p), {}, {\n          source: \"endRange\"\n        });\n      })));\n    }\n    /** Returns the resolved formatting options based on the values passed to the constructor. */\n  }, {\n    key: \"resolvedOptions\",\n    value: function resolvedOptions() {\n      var resolvedOptions = this.formatter.resolvedOptions();\n      if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {\n        if (!this.resolvedHourCycle) this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);\n        resolvedOptions.hourCycle = this.resolvedHourCycle;\n        resolvedOptions.hour12 = this.resolvedHourCycle === \"h11\" || this.resolvedHourCycle === \"h12\";\n      }\n      // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n      // https://bugs.webkit.org/show_bug.cgi?id=241564\n      if (resolvedOptions.calendar === \"ethiopic-amete-alem\") resolvedOptions.calendar = \"ethioaa\";\n      return resolvedOptions;\n    }\n  }]);\n  return $fb18d541ea1ad717$export$ad991b66133851cf;\n}(); // There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nvar $fb18d541ea1ad717$var$hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: \"h11\"\n  },\n  false: {}\n};\nfunction $fb18d541ea1ad717$var$getCachedDateFormatter(locale) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === \"boolean\" && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {\n    options = _objectSpread({}, options);\n    var pref = $fb18d541ea1ad717$var$hour12Preferences[String(options.hour12)][locale.split(\"-\")[0]];\n    var defaultHourCycle = options.hour12 ? \"h12\" : \"h23\";\n    options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;\n    delete options.hour12;\n  }\n  var cacheKey = locale + (options ? Object.entries(options).sort(function (a, b) {\n    return a[0] < b[0] ? -1 : 1;\n  }).join() : \"\");\n  if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey)) return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);\n  var numberFormatter = new Intl.DateTimeFormat(locale, options);\n  $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\nvar $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;\nfunction $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {\n  if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null) $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat(\"en-US\", {\n    hour: \"numeric\",\n    hour12: false\n  }).format(new Date(2020, 2, 3, 0)) === \"24\";\n  return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;\n}\nvar $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;\nfunction $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {\n  if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null) $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat(\"fr\", {\n    hour: \"numeric\",\n    hour12: false\n  }).resolvedOptions().hourCycle === \"h12\";\n  return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;\n}\nfunction $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options) {\n  if (!options.timeStyle && !options.hour) return undefined;\n  // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, \"\");\n  locale += (locale.includes(\"-u-\") ? \"\" : \"-u\") + \"-nu-latn\";\n  var formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, _objectSpread(_objectSpread({}, options), {}, {\n    timeZone: undefined // use local timezone\n  }));\n\n  var min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(function (p) {\n    return p.type === \"hour\";\n  }).value, 10);\n  var max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(function (p) {\n    return p.type === \"hour\";\n  }).value, 10);\n  if (min === 0 && max === 23) return \"h23\";\n  if (min === 24 && max === 23) return \"h24\";\n  if (min === 0 && max === 11) return \"h11\";\n  if (min === 12 && max === 11) return \"h12\";\n  throw new Error(\"Unexpected hour cycle result\");\n}\nexport { $35ea8db9cb2ccb90$export$99faa760c7908e4f as CalendarDate, $35ea8db9cb2ccb90$export$ca871e8dbb80966f as CalendarDateTime, $35ea8db9cb2ccb90$export$680ea196effce5f as Time, $35ea8db9cb2ccb90$export$d3b7288e7994edea as ZonedDateTime, $3b62074eb05584b2$export$80ee6245ec4f29ec as GregorianCalendar, $62225008020f0a13$export$b746ab2b60cdffbf as JapaneseCalendar, $8d73d47422ca7302$export$42d20a78301dee44 as BuddhistCalendar, $5f31bd6f0c8940b2$export$65e01080afcb0799 as TaiwanCalendar, $f3ed2e4472ae7e25$export$37fccdbfd14c5939 as PersianCalendar, $82c358003bdda0a8$export$39f31c639fa15726 as IndianCalendar, $f2f3e0e3a817edbd$export$2066795aadd37bfc as IslamicCivilCalendar, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 as IslamicTabularCalendar, $f2f3e0e3a817edbd$export$5baab4758c231076 as IslamicUmalquraCalendar, $7c5f6fbf42389787$export$ca405048b8fb5af as HebrewCalendar, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d as EthiopicCalendar, $b956b2d7a6cf451f$export$d72e0c37005a4914 as EthiopicAmeteAlemCalendar, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 as CopticCalendar, $64244302c3013299$export$dd0bbc9b26defe37 as createCalendar, $11d87f3f76e88657$export$93522d1a439f3617 as toCalendarDate, $11d87f3f76e88657$export$b21e0b124e224484 as toCalendarDateTime, $11d87f3f76e88657$export$d33f79e3ffc3dc83 as toTime, $11d87f3f76e88657$export$b4a036af3fc0b032 as toCalendar, $11d87f3f76e88657$export$84c95a83c799e074 as toZoned, $11d87f3f76e88657$export$538b00033cc11c75 as toTimeZone, $11d87f3f76e88657$export$d9b67bc93c097491 as toLocalTimeZone, $14e0f24ef4ac5c92$export$ea39ec197993aef0 as isSameDay, $14e0f24ef4ac5c92$export$a18c89cbd24170ff as isSameMonth, $14e0f24ef4ac5c92$export$5841f9eb9773f25f as isSameYear, $14e0f24ef4ac5c92$export$91b62ebf2ba703ee as isEqualDay, $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2 as isEqualMonth, $14e0f24ef4ac5c92$export$ea840f5a6dda8147 as isEqualYear, $14e0f24ef4ac5c92$export$629b0a497aa65267 as isToday, $14e0f24ef4ac5c92$export$2061056d06d7cdf7 as getDayOfWeek, $14e0f24ef4ac5c92$export$461939dd4422153 as now, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3 as today, $14e0f24ef4ac5c92$export$126c91c941de7e as getHoursInDay, $14e0f24ef4ac5c92$export$aa8b41735afcabd2 as getLocalTimeZone, $14e0f24ef4ac5c92$export$a5a3b454ada2268e as startOfMonth, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4 as startOfWeek, $14e0f24ef4ac5c92$export$f91e89d3d0406102 as startOfYear, $14e0f24ef4ac5c92$export$a2258d9c4118825c as endOfMonth, $14e0f24ef4ac5c92$export$ef8b6d9133084f4e as endOfWeek, $14e0f24ef4ac5c92$export$8b7aa55c66d5569e as endOfYear, $14e0f24ef4ac5c92$export$5412ac11713b72ad as getMinimumMonthInYear, $14e0f24ef4ac5c92$export$b2f4953d301981d5 as getMinimumDayInMonth, $14e0f24ef4ac5c92$export$ccc1b2479e7dd654 as getWeeksInMonth, $14e0f24ef4ac5c92$export$5c333a116e949cdd as minDate, $14e0f24ef4ac5c92$export$a75f2bff57811055 as maxDate, $14e0f24ef4ac5c92$export$618d60ea299da42 as isWeekend, $14e0f24ef4ac5c92$export$ee9d87258e1d19ed as isWeekday, $fae977aafc393c5c$export$6b862160d295c8e as parseDate, $fae977aafc393c5c$export$588937bcd60ade55 as parseDateTime, $fae977aafc393c5c$export$c9698ec7f05a07e1 as parseTime, $fae977aafc393c5c$export$5adfdab05168c219 as parseAbsolute, $fae977aafc393c5c$export$8e384432362ed0f0 as parseAbsoluteToLocal, $fae977aafc393c5c$export$fd7893f06e92a6a4 as parseZonedDateTime, $fb18d541ea1ad717$export$ad991b66133851cf as DateFormatter };","map":{"version":3,"mappings":"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","names":["$2b4dce13dd5a17fa$export$842a2cf37af977e1","amount","numerator","Math","floor","$2b4dce13dd5a17fa$export$784d13d8ee351f07","date","era","calendar","year","month","day","$2b4dce13dd5a17fa$export$27fa0172ae2644b3","hour","minute","second","millisecond","$3b62074eb05584b2$var$EPOCH","$3b62074eb05584b2$export$f297eb839006d339","$3b62074eb05584b2$export$c36e0ecb2d4fa69d","y1","monthOffset","$3b62074eb05584b2$export$553d7fa8e3805fc0","$3b62074eb05584b2$export$4475b7e617eb123c","$3b62074eb05584b2$var$daysInMonth","standard","leapyear","$3b62074eb05584b2$export$80ee6245ec4f29ec","jd","jd0","depoch","quadricent","dqc","cent","dcent","quad","dquad","yindex","extendedYear","yearDay","leapAdj","$2fe286d2fb449abb$export$7a5acbd77d414bd9","AD","AE","AF","AI","AL","AM","AN","AT","AX","AZ","BA","BE","BG","BH","BM","BN","BY","CH","CL","CM","CR","CY","CZ","DE","DJ","DK","DZ","EC","EE","EG","ES","FI","FJ","FO","FR","GB","GE","GF","GP","GR","HR","HU","IE","IQ","IR","IS","IT","JO","KG","KW","KZ","LB","LI","LK","LT","LU","LV","LY","MC","MD","ME","MK","MN","MQ","MV","MY","NL","NO","NZ","OM","PL","QA","RE","RO","RS","RU","SD","SE","SI","SK","SM","SY","TJ","TM","TR","UA","UY","UZ","VA","VN","XK","$14e0f24ef4ac5c92$export$ea39ec197993aef0","a","b","$14e0f24ef4ac5c92$export$a18c89cbd24170ff","$14e0f24ef4ac5c92$export$a5a3b454ada2268e","$14e0f24ef4ac5c92$export$5841f9eb9773f25f","$14e0f24ef4ac5c92$export$f91e89d3d0406102","$14e0f24ef4ac5c92$export$91b62ebf2ba703ee","identifier","$14e0f24ef4ac5c92$export$5a8da0c44a3afdf2","$14e0f24ef4ac5c92$export$ea840f5a6dda8147","$14e0f24ef4ac5c92$export$629b0a497aa65267","timeZone","$14e0f24ef4ac5c92$export$d0bdf45af03a6ea3","$14e0f24ef4ac5c92$export$2061056d06d7cdf7","locale","julian","toJulianDay","dayOfWeek","ceil","$14e0f24ef4ac5c92$var$getWeekStart","$14e0f24ef4ac5c92$export$461939dd4422153","Date","now","$14e0f24ef4ac5c92$export$68781ddf31c0090f","$14e0f24ef4ac5c92$export$c19a80a9721b80f6","$14e0f24ef4ac5c92$var$timeToMs","$14e0f24ef4ac5c92$export$126c91c941de7e","ms","tomorrow","add","days","tomorrowMs","$14e0f24ef4ac5c92$var$localTimeZone","$14e0f24ef4ac5c92$export$aa8b41735afcabd2","Intl","DateTimeFormat","resolvedOptions","subtract","$14e0f24ef4ac5c92$export$a2258d9c4118825c","getDaysInMonth","months","$14e0f24ef4ac5c92$export$8b7aa55c66d5569e","getMonthsInYear","$14e0f24ef4ac5c92$export$5412ac11713b72ad","getMinimumMonthInYear","$14e0f24ef4ac5c92$export$b2f4953d301981d5","getMinimumDayInMonth","$14e0f24ef4ac5c92$export$42c81a444fbfb5d4","$14e0f24ef4ac5c92$export$ef8b6d9133084f4e","$14e0f24ef4ac5c92$var$cachedRegions","Map","$14e0f24ef4ac5c92$var$getRegion","Locale","region","get","maximize","set","part","split","$14e0f24ef4ac5c92$export$ccc1b2479e7dd654","$14e0f24ef4ac5c92$export$5c333a116e949cdd","compare","$14e0f24ef4ac5c92$export$a75f2bff57811055","$14e0f24ef4ac5c92$var$WEEKEND_DATA","IL","SA","YE","$14e0f24ef4ac5c92$export$618d60ea299da42","start","end","$14e0f24ef4ac5c92$export$ee9d87258e1d19ed","$11d87f3f76e88657$export$bd4fb2bc8bb06fb","$11d87f3f76e88657$export$b4a036af3fc0b032","$11d87f3f76e88657$var$epochFromParts","setUTCHours","setUTCFullYear","getTime","$11d87f3f76e88657$export$59c99f3515d3493f","getTimezoneOffset","$11d87f3f76e88657$var$getTimeZoneParts","utc","$11d87f3f76e88657$var$formattersByTimeZone","formatter","hour12","parts","formatToParts","namedParts","type","value","$11d87f3f76e88657$var$DAYMILLIS","$11d87f3f76e88657$export$136f38efe7caf549","earlier","later","$11d87f3f76e88657$var$getValidWallTimes","found","filter","$11d87f3f76e88657$var$isValidWallTime","absolute","$11d87f3f76e88657$export$5107c82f94518f5c","disambiguation","dateTime","$11d87f3f76e88657$export$b21e0b124e224484","date1","setFullYear","setHours","offsetBefore","offsetAfter","valid","length","RangeError","min","max","$11d87f3f76e88657$export$e67a095c620b86fe","$11d87f3f76e88657$export$1b96692a1ba042ac","offset","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","$11d87f3f76e88657$export$e57ff100d91bd4b9","$11d87f3f76e88657$export$d7f92bcd3596b086","$11d87f3f76e88657$export$93522d1a439f3617","$11d87f3f76e88657$export$6f4d78149f3f53ac","$11d87f3f76e88657$export$4d0393e732857be5","time","$11d87f3f76e88657$export$d33f79e3ffc3dc83","calendarDate","fromJulianDay","copy","$11d87f3f76e88657$export$84c95a83c799e074","$11d87f3f76e88657$export$538b00033cc11c75","$11d87f3f76e88657$export$83aac07b4c37b25","$11d87f3f76e88657$export$d9b67bc93c097491","$735220c2d4774dd3$var$ONE_HOUR","$735220c2d4774dd3$export$e16d8520af44a096","duration","mutableDate","$735220c2d4774dd3$var$addTimeFields","$735220c2d4774dd3$var$addYears","years","balanceYearMonth","$735220c2d4774dd3$var$balanceYearMonth","$735220c2d4774dd3$var$constrainMonthDay","weeks","$735220c2d4774dd3$var$balanceDay","balanceDate","maxYear","getYearsInEra","_mutableDate_calendar","isInverseEra","_mutableDate_calendar_isInverseEra","maxMonth","_date_calendar","_date_calendar_isInverseEra","monthsInYear","$735220c2d4774dd3$export$c4e2ecac49351ef2","constrainDate","$735220c2d4774dd3$export$3e2544e88a25bff8","inverseDuration","key","$735220c2d4774dd3$export$4e2d2ead65e5f7e3","$735220c2d4774dd3$export$adaa4cf7ef1b65be","fields","$735220c2d4774dd3$export$e5d5e1c1822b6e56","mutableValue","$735220c2d4774dd3$export$7555de1e070510cb","$735220c2d4774dd3$var$balanceTime","$735220c2d4774dd3$var$nonNegativeMod","result","hours","minutes","seconds","milliseconds","$735220c2d4774dd3$export$7ed87b6bc2506470","res","$735220c2d4774dd3$export$fe34d3a381cd7501","$735220c2d4774dd3$export$d52ced6badfb9a4c","field","options","mutable","eras","getEras","eraIndex","indexOf","Error","$735220c2d4774dd3$var$cycleValue","round","_mutable_calendar","_mutable_calendar_isInverseEra","Infinity","$735220c2d4774dd3$export$dd02b3e0007dfe28","hourCycle","isPM","sign","div","abs","$735220c2d4774dd3$export$96b1d28349274637","res1","$735220c2d4774dd3$export$6814caac34ca03c7","$735220c2d4774dd3$export$9a297d111fc86b79","plainDateTime","minDate","minAbsolute","maxDate","maxAbsolute","pop","remainder","ms1","$735220c2d4774dd3$export$31b5430eb18be4f8","$fae977aafc393c5c$var$TIME_RE","$fae977aafc393c5c$var$DATE_RE","$fae977aafc393c5c$var$DATE_TIME_RE","$fae977aafc393c5c$var$ZONED_DATE_TIME_RE","$fae977aafc393c5c$var$ABSOLUTE_RE","$fae977aafc393c5c$export$c9698ec7f05a07e1","m","match","$fae977aafc393c5c$var$parseNumber","$fae977aafc393c5c$export$6b862160d295c8e","$fae977aafc393c5c$export$588937bcd60ade55","$fae977aafc393c5c$export$fd7893f06e92a6a4","_m_","absolutes","includes","$fae977aafc393c5c$var$offsetToString","$fae977aafc393c5c$export$4223de14708adc63","$fae977aafc393c5c$export$5adfdab05168c219","$fae977aafc393c5c$export$8e384432362ed0f0","val","Number","$fae977aafc393c5c$export$f59dee82248f5ad4","String","padStart","slice","$fae977aafc393c5c$export$60dfd74aa96791bd","gregorianDate","offsetHours","offsetMinutes","$fae977aafc393c5c$export$bf79f1ebf4b18792","$35ea8db9cb2ccb90$var$shiftArgs","args","shift","$35ea8db9cb2ccb90$var$_type","$35ea8db9cb2ccb90$export$99faa760c7908e4f","$35ea8db9cb2ccb90$var$_type1","$35ea8db9cb2ccb90$export$680ea196effce5f","$35ea8db9cb2ccb90$var$_type2","$35ea8db9cb2ccb90$export$ca871e8dbb80966f","$35ea8db9cb2ccb90$var$_type3","$35ea8db9cb2ccb90$export$d3b7288e7994edea","toDate","toISOString","$62225008020f0a13$var$ERA_START_DATES","$62225008020f0a13$var$ERA_END_DATES","$62225008020f0a13$var$ERA_ADDENDS","$62225008020f0a13$var$ERA_NAMES","$62225008020f0a13$var$findEraFromGregorianDate","idx","findIndex","$62225008020f0a13$var$toGregorian","eraAddend","$62225008020f0a13$export$b746ab2b60cdffbf","endYear","endMonth","endDay","startMonth","startDay","cur","next","$62225008020f0a13$var$getMinimums","$8d73d47422ca7302$var$BUDDHIST_ERA_START","$8d73d47422ca7302$export$42d20a78301dee44","$8d73d47422ca7302$var$toGregorian","$5f31bd6f0c8940b2$var$TAIWAN_ERA_START","$5f31bd6f0c8940b2$var$gregorianYear","$5f31bd6f0c8940b2$var$gregorianToTaiwan","y","$5f31bd6f0c8940b2$export$65e01080afcb0799","$5f31bd6f0c8940b2$var$toGregorian","$f3ed2e4472ae7e25$var$PERSIAN_EPOCH","$f3ed2e4472ae7e25$var$isLeapYear","y0","$f3ed2e4472ae7e25$var$persianToJulianDay","$f3ed2e4472ae7e25$export$37fccdbfd14c5939","d0","n2820","d1","y2820","yDay","$82c358003bdda0a8$var$INDIAN_ERA_START","$82c358003bdda0a8$var$INDIAN_YEAR_START","$82c358003bdda0a8$export$39f31c639fa15726","indianYear","leapMonth","indianMonth","indianDay","mDay","$f2f3e0e3a817edbd$var$CIVIL_EPOC","$f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_END","$f2f3e0e3a817edbd$var$UMALQURA_START_DAYS","$f2f3e0e3a817edbd$var$islamicToJulianDay","epoch","$f2f3e0e3a817edbd$var$julianDayToIslamic","$f2f3e0e3a817edbd$var$isLeapYear","$f2f3e0e3a817edbd$export$2066795aadd37bfc","$f2f3e0e3a817edbd$export$37f0887f2f9d22f7","$f2f3e0e3a817edbd$var$UMALQURA_DATA","$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE","$f2f3e0e3a817edbd$var$umalquraYearStart","$f2f3e0e3a817edbd$var$umalquraMonthLength","mask","$f2f3e0e3a817edbd$var$umalquraMonthStart","i","$f2f3e0e3a817edbd$var$umalquraYearLength","$f2f3e0e3a817edbd$export$5baab4758c231076","Uint16Array","Uint8Array","from","atob","c","charCodeAt","buffer","Uint32Array","yearStart","startDays","endDays","d","yearLength","monthLength","$7c5f6fbf42389787$var$HEBREW_EPOCH","$7c5f6fbf42389787$var$HOUR_PARTS","$7c5f6fbf42389787$var$DAY_PARTS","$7c5f6fbf42389787$var$MONTH_DAYS","$7c5f6fbf42389787$var$MONTH_FRACT","$7c5f6fbf42389787$var$MONTH_PARTS","$7c5f6fbf42389787$var$isLeapYear","$7c5f6fbf42389787$var$hebrewDelay1","$7c5f6fbf42389787$var$hebrewDelay2","last","present","$7c5f6fbf42389787$var$startOfYear","$7c5f6fbf42389787$var$getDaysInYear","$7c5f6fbf42389787$var$getYearType","$7c5f6fbf42389787$var$getDaysInMonth","yearType","$7c5f6fbf42389787$export$ca405048b8fb5af","ys","dayOfYear","monthStart","previousDate","$b956b2d7a6cf451f$var$ETHIOPIC_EPOCH","$b956b2d7a6cf451f$var$COPTIC_EPOCH","$b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA","$b956b2d7a6cf451f$var$ceToJulianDay","$b956b2d7a6cf451f$var$julianDayToCE","$b956b2d7a6cf451f$var$getLeapDay","$b956b2d7a6cf451f$var$getDaysInMonth","$b956b2d7a6cf451f$export$26ba6eab5e20cd7d","$b956b2d7a6cf451f$export$d72e0c37005a4914","$b956b2d7a6cf451f$export$fe6243cbe1a4b7c1","$64244302c3013299$export$dd0bbc9b26defe37","name","$fb18d541ea1ad717$var$formatterCache","$fb18d541ea1ad717$export$ad991b66133851cf","$fb18d541ea1ad717$var$getCachedDateFormatter","format","formatRange","formatRangeToParts","startParts","endParts","map","p","source","$fb18d541ea1ad717$var$hasBuggyResolvedHourCycle","resolvedHourCycle","$fb18d541ea1ad717$var$getResolvedHourCycle","$fb18d541ea1ad717$var$hour12Preferences","true","ja","false","$fb18d541ea1ad717$var$hasBuggyHour12Behavior","pref","defaultHourCycle","cacheKey","Object","entries","sort","join","has","numberFormatter","$fb18d541ea1ad717$var$_hasBuggyHour12Behavior","$fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle","timeStyle","undefined","replace","parseInt","find"],"sources":["C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\index.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\CalendarDate.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\manipulation.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\conversion.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\GregorianCalendar.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\utils.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\queries.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\weekStartData.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\string.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\JapaneseCalendar.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\BuddhistCalendar.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\TaiwanCalendar.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\PersianCalendar.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\IndianCalendar.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\IslamicCalendar.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\HebrewCalendar.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\EthiopicCalendar.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\createCalendar.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\DateFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {\n  AnyCalendarDate,\n  AnyTime,\n  AnyDateTime,\n  Calendar,\n  DateDuration,\n  TimeDuration,\n  DateTimeDuration,\n  DateFields,\n  TimeFields,\n  DateField,\n  TimeField,\n  Disambiguation,\n  CycleOptions,\n  CycleTimeOptions\n} from './types';\n\nexport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nexport {GregorianCalendar} from './calendars/GregorianCalendar';\nexport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nexport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nexport {TaiwanCalendar} from './calendars/TaiwanCalendar';\nexport {PersianCalendar} from './calendars/PersianCalendar';\nexport {IndianCalendar} from './calendars/IndianCalendar';\nexport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nexport {HebrewCalendar} from './calendars/HebrewCalendar';\nexport {EthiopicCalendar, EthiopicAmeteAlemCalendar, CopticCalendar} from './calendars/EthiopicCalendar';\nexport {createCalendar} from './createCalendar';\nexport {toCalendarDate, toCalendarDateTime, toTime, toCalendar, toZoned, toTimeZone, toLocalTimeZone} from './conversion';\nexport {\n  isSameDay,\n  isSameMonth,\n  isSameYear,\n  isEqualDay,\n  isEqualMonth,\n  isEqualYear,\n  isToday,\n  getDayOfWeek,\n  now,\n  today,\n  getHoursInDay,\n  getLocalTimeZone,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n  endOfMonth,\n  endOfWeek,\n  endOfYear,\n  getMinimumMonthInYear,\n  getMinimumDayInMonth,\n  getWeeksInMonth,\n  minDate,\n  maxDate,\n  isWeekend,\n  isWeekday\n} from './queries';\nexport {\n  parseDate,\n  parseDateTime,\n  parseTime,\n  parseAbsolute,\n  parseAbsoluteToLocal,\n  parseZonedDateTime\n} from './string';\nexport {DateFormatter} from './DateFormatter';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {add, addTime, addZoned, constrain, constrainTime, cycleDate, cycleTime, cycleZoned, set, setTime, setZoned, subtract, subtractTime, subtractZoned} from './manipulation';\nimport {AnyCalendarDate, AnyTime, Calendar, CycleOptions, CycleTimeOptions, DateDuration, DateField, DateFields, DateTimeDuration, Disambiguation, TimeDuration, TimeField, TimeFields} from './types';\nimport {compareDate, compareTime} from './queries';\nimport {dateTimeToString, dateToString, timeToString, zonedDateTimeToString} from './string';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {toCalendarDateTime, toDate, toZoned, zonedToDate} from './conversion';\n\nfunction shiftArgs(args: any[]) {\n  let calendar: Calendar = typeof args[0] === 'object'\n    ? args.shift()\n    : new GregorianCalendar();\n\n  let era: string;\n  if (typeof args[0] === 'string') {\n    era = args.shift();\n  } else {\n    let eras = calendar.getEras();\n    era = eras[eras.length - 1];\n  }\n\n  let year = args.shift();\n  let month = args.shift();\n  let day = args.shift();\n\n  return [calendar, era, year, month, day];\n}\n\n/** A CalendarDate represents a date without any time components in a specific calendar system. */\nexport class CalendarDate {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  // i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n  // If that behavior is desired, use the AnyCalendarDate interface instead.\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n\n  constructor(year: number, month: number, day: number);\n  constructor(era: string, year: number, month: number, day: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): CalendarDate {\n    if (this.era) {\n      return new CalendarDate(this.calendar, this.era, this.year, this.month, this.day);\n    } else {\n      return new CalendarDate(this.calendar, this.year, this.month, this.day);\n    }\n  }\n\n  /** Returns a new `CalendarDate` with the given duration added to it. */\n  add(duration: DateDuration): CalendarDate {\n    return add(this, duration);\n  }\n\n  /** Returns a new `CalendarDate` with the given duration subtracted from it. */\n  subtract(duration: DateDuration): CalendarDate {\n    return subtract(this, duration);\n  }\n\n  /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields): CalendarDate {\n    return set(this, fields);\n  }\n\n  /**\n   * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField, amount: number, options?: CycleOptions): CalendarDate {\n    return cycleDate(this, field, amount, options);\n  }\n\n  /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */\n  toDate(timeZone: string): Date {\n    return toDate(this, timeZone);\n  }\n\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString(): string {\n    return dateToString(this);\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: AnyCalendarDate): number {\n    return compareDate(this, b);\n  }\n}\n\n/** A Time represents a clock time without any date components. */\nexport class Time {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  #type;\n  /** The hour, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n\n  constructor(\n    hour: number = 0,\n    minute: number = 0,\n    second: number = 0,\n    millisecond: number = 0\n  ) {\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n    constrainTime(this);\n  }\n\n  /** Returns a copy of this time. */\n  copy(): Time {\n    return new Time(this.hour, this.minute, this.second, this.millisecond);\n  }\n\n  /** Returns a new `Time` with the given duration added to it. */\n  add(duration: TimeDuration) {\n    return addTime(this, duration);\n  }\n\n  /** Returns a new `Time` with the given duration subtracted from it. */\n  subtract(duration: TimeDuration) {\n    return subtractTime(this, duration);\n  }\n\n  /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: TimeFields) {\n    return setTime(this, fields);\n  }\n\n  /**\n   * Returns a new `Time` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: TimeField, amount: number, options?: CycleTimeOptions) {\n    return cycleTime(this, field, amount, options);\n  }\n\n  /** Converts the time to an ISO 8601 formatted string. */\n  toString() {\n    return timeToString(this);\n  }\n\n  /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */\n  compare(b: AnyTime) {\n    return compareTime(this, b);\n  }\n}\n\n/** A CalendarDateTime represents a date and time without a time zone, in a specific calendar system. */\nexport class CalendarDateTime {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n  /** The hour in the day, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n\n  constructor(year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): CalendarDateTime {\n    if (this.era) {\n      return new CalendarDateTime(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    } else {\n      return new CalendarDateTime(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    }\n  }\n\n  /** Returns a new `CalendarDateTime` with the given duration added to it. */\n  add(duration: DateTimeDuration): CalendarDateTime {\n    return add(this, duration);\n  }\n\n  /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */\n  subtract(duration: DateTimeDuration): CalendarDateTime {\n    return subtract(this, duration);\n  }\n\n  /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields & TimeFields): CalendarDateTime {\n    return set(setTime(this, fields), fields);\n  }\n\n  /**\n   * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime {\n    switch (field) {\n      case 'era':\n      case 'year':\n      case 'month':\n      case 'day':\n        return cycleDate(this, field, amount, options);\n      default:\n        return cycleTime(this, field, amount, options);\n    }\n  }\n\n  /** Converts the date to a native JavaScript Date object in the given time zone. */\n  toDate(timeZone: string, disambiguation?: Disambiguation): Date {\n    return toDate(this, timeZone, disambiguation);\n  }\n\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString(): string {\n    return dateTimeToString(this);\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number {\n    let res = compareDate(this, b);\n    if (res === 0) {\n      return compareTime(this, toCalendarDateTime(b));\n    }\n\n    return res;\n  }\n}\n\n/** A ZonedDateTime represents a date and time in a specific time zone and calendar system. */\nexport class ZonedDateTime {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n  /** The hour in the day, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n  /** The IANA time zone identifier that this date and time is represented in. */\n  public readonly timeZone: string;\n  /** The UTC offset for this time, in seconds. */\n  public readonly offset: number;\n\n  constructor(year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    let timeZone = args.shift();\n    let offset = args.shift();\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.timeZone = timeZone;\n    this.offset = offset;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): ZonedDateTime {\n    if (this.era) {\n      return new ZonedDateTime(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    } else {\n      return new ZonedDateTime(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    }\n  }\n\n  /** Returns a new `ZonedDateTime` with the given duration added to it. */\n  add(duration: DateTimeDuration) {\n    return addZoned(this, duration);\n  }\n\n  /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */\n  subtract(duration: DateTimeDuration) {\n    return subtractZoned(this, duration);\n  }\n\n  /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields & TimeFields, disambiguation?: Disambiguation) {\n    return setZoned(this, fields, disambiguation);\n  }\n\n  /**\n   * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions) {\n    return cycleZoned(this, field, amount, options);\n  }\n\n  /** Converts the date to a native JavaScript Date object. */\n  toDate() {\n    return zonedToDate(this);\n  }\n\n   /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */\n  toString() {\n    return zonedDateTimeToString(this);\n  }\n\n   /** Converts the date to an ISO 8601 formatted string in UTC. */\n  toAbsoluteString() {\n    return this.toDate().toISOString();\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: CalendarDate | CalendarDateTime | ZonedDateTime) {\n    // TODO: Is this a bad idea??\n    return this.toDate().getTime() - toZoned(b, this.timeZone).toDate().getTime();\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyCalendarDate, AnyDateTime, AnyTime, CycleOptions, CycleTimeOptions, DateDuration, DateField, DateFields, DateTimeDuration, Disambiguation, TimeDuration, TimeField, TimeFields} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {epochFromDate, fromAbsolute, toAbsolute, toCalendar, toCalendarDateTime} from './conversion';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {Mutable} from './utils';\n\nconst ONE_HOUR = 3600000;\n\nexport function add(date: CalendarDateTime, duration: DateTimeDuration): CalendarDateTime;\nexport function add(date: CalendarDate, duration: DateDuration): CalendarDate;\nexport function add(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration): CalendarDate | CalendarDateTime;\nexport function add(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration) {\n  let mutableDate: Mutable<AnyCalendarDate | AnyDateTime> = date.copy();\n  let days = 'hour' in mutableDate ? addTimeFields(mutableDate, duration) : 0;\n\n  addYears(mutableDate, duration.years || 0);\n  if (mutableDate.calendar.balanceYearMonth) {\n    mutableDate.calendar.balanceYearMonth(mutableDate, date);\n  }\n\n  mutableDate.month += duration.months || 0;\n\n  balanceYearMonth(mutableDate);\n  constrainMonthDay(mutableDate);\n\n  mutableDate.day += (duration.weeks || 0) * 7;\n  mutableDate.day += duration.days || 0;\n  mutableDate.day += days;\n\n  balanceDay(mutableDate);\n\n  if (mutableDate.calendar.balanceDate) {\n    mutableDate.calendar.balanceDate(mutableDate);\n  }\n\n  // Constrain in case adding ended up with a date outside the valid range for the calendar system.\n  // The behavior here is slightly different than when constraining in the `set` function in that\n  // we adjust smaller fields to their minimum/maximum values rather than constraining each field\n  // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.\n  if (mutableDate.year < 1) {\n    mutableDate.year = 1;\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);\n  if (mutableDate.year > maxYear) {\n    let isInverseEra = mutableDate.calendar.isInverseEra?.(mutableDate);\n    mutableDate.year = maxYear;\n    mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);\n    mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  if (mutableDate.month < 1) {\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);\n  if (mutableDate.month > maxMonth) {\n    mutableDate.month = maxMonth;\n    mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));\n  return mutableDate;\n}\n\nfunction addYears(date: Mutable<AnyCalendarDate>, years: number) {\n  if (date.calendar.isInverseEra?.(date)) {\n    years = -years;\n  }\n\n  date.year += years;\n}\n\nfunction balanceYearMonth(date: Mutable<AnyCalendarDate>) {\n  while (date.month < 1) {\n    addYears(date, -1);\n    date.month += date.calendar.getMonthsInYear(date);\n  }\n\n  let monthsInYear = 0;\n  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {\n    date.month -= monthsInYear;\n    addYears(date, 1);\n  }\n}\n\nfunction balanceDay(date: Mutable<AnyCalendarDate>) {\n  while (date.day < 1) {\n    date.month--;\n    balanceYearMonth(date);\n    date.day += date.calendar.getDaysInMonth(date);\n  }\n\n  while (date.day > date.calendar.getDaysInMonth(date)) {\n    date.day -= date.calendar.getDaysInMonth(date);\n    date.month++;\n    balanceYearMonth(date);\n  }\n}\n\nfunction constrainMonthDay(date: Mutable<AnyCalendarDate>) {\n  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\n\nexport function constrain(date: Mutable<AnyCalendarDate>) {\n  if (date.calendar.constrainDate) {\n    date.calendar.constrainDate(date);\n  }\n\n  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n  constrainMonthDay(date);\n}\n\nexport function invertDuration(duration: DateTimeDuration): DateTimeDuration {\n  let inverseDuration = {};\n  for (let key in duration) {\n    if (typeof duration[key] === 'number') {\n      inverseDuration[key] = -duration[key];\n    }\n  }\n\n  return inverseDuration;\n}\n\nexport function subtract(date: CalendarDateTime, duration: DateTimeDuration): CalendarDateTime;\nexport function subtract(date: CalendarDate, duration: DateDuration): CalendarDate;\nexport function subtract(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration): CalendarDate | CalendarDateTime {\n  return add(date, invertDuration(duration));\n}\n\nexport function set(date: CalendarDateTime, fields: DateFields): CalendarDateTime;\nexport function set(date: CalendarDate, fields: DateFields): CalendarDate;\nexport function set(date: CalendarDate | CalendarDateTime, fields: DateFields) {\n  let mutableDate: Mutable<AnyCalendarDate> = date.copy();\n\n  if (fields.era != null) {\n    mutableDate.era = fields.era;\n  }\n\n  if (fields.year != null) {\n    mutableDate.year = fields.year;\n  }\n\n  if (fields.month != null) {\n    mutableDate.month = fields.month;\n  }\n\n  if (fields.day != null) {\n    mutableDate.day = fields.day;\n  }\n\n  constrain(mutableDate);\n  return mutableDate;\n}\n\nexport function setTime(value: CalendarDateTime, fields: TimeFields): CalendarDateTime;\nexport function setTime(value: Time, fields: TimeFields): Time;\nexport function setTime(value: Time | CalendarDateTime, fields: TimeFields) {\n  let mutableValue: Mutable<Time | CalendarDateTime> = value.copy();\n\n  if (fields.hour != null) {\n    mutableValue.hour = fields.hour;\n  }\n\n  if (fields.minute != null) {\n    mutableValue.minute = fields.minute;\n  }\n\n  if (fields.second != null) {\n    mutableValue.second = fields.second;\n  }\n\n  if (fields.millisecond != null) {\n    mutableValue.millisecond = fields.millisecond;\n  }\n\n  constrainTime(mutableValue);\n  return mutableValue;\n}\n\nfunction balanceTime(time: Mutable<AnyTime>): number {\n  time.second += Math.floor(time.millisecond / 1000);\n  time.millisecond = nonNegativeMod(time.millisecond, 1000);\n\n  time.minute += Math.floor(time.second / 60);\n  time.second = nonNegativeMod(time.second, 60);\n\n  time.hour += Math.floor(time.minute / 60);\n  time.minute = nonNegativeMod(time.minute, 60);\n\n  let days = Math.floor(time.hour / 24);\n  time.hour = nonNegativeMod(time.hour, 24);\n\n  return days;\n}\n\nexport function constrainTime(time: Mutable<AnyTime>) {\n  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n  time.second = Math.max(0, Math.min(time.second, 59));\n  time.minute = Math.max(0, Math.min(time.minute, 59));\n  time.hour = Math.max(0, Math.min(time.hour, 23));\n}\n\nfunction nonNegativeMod(a: number, b: number) {\n  let result = a % b;\n  if (result < 0) {\n    result += b;\n  }\n  return result;\n}\n\nfunction addTimeFields(time: Mutable<AnyTime>, duration: TimeDuration): number {\n  time.hour += duration.hours || 0;\n  time.minute += duration.minutes || 0;\n  time.second += duration.seconds || 0;\n  time.millisecond += duration.milliseconds || 0;\n  return balanceTime(time);\n}\n\nexport function addTime(time: Time, duration: TimeDuration): Time {\n  let res = time.copy();\n  addTimeFields(res, duration);\n  return res;\n}\n\nexport function subtractTime(time: Time, duration: TimeDuration): Time {\n  return addTime(time, invertDuration(duration));\n}\n\nexport function cycleDate(value: CalendarDateTime, field: DateField, amount: number, options?: CycleOptions): CalendarDateTime;\nexport function cycleDate(value: CalendarDate, field: DateField, amount: number, options?: CycleOptions): CalendarDate;\nexport function cycleDate(value: CalendarDate | CalendarDateTime, field: DateField, amount: number, options?: CycleOptions) {\n  let mutable: Mutable<CalendarDate | CalendarDateTime> = value.copy();\n\n  switch (field) {\n    case 'era': {\n      let eras = value.calendar.getEras();\n      let eraIndex = eras.indexOf(value.era);\n      if (eraIndex < 0) {\n        throw new Error('Invalid era: ' + value.era);\n      }\n      eraIndex = cycleValue(eraIndex, amount, 0, eras.length - 1, options?.round);\n      mutable.era = eras[eraIndex];\n\n      // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n      constrain(mutable);\n      break;\n    }\n    case 'year': {\n      if (mutable.calendar.isInverseEra?.(mutable)) {\n        amount = -amount;\n      }\n\n      // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n      mutable.year = cycleValue(value.year, amount, -Infinity, 9999, options?.round);\n      if (mutable.year === -Infinity) {\n        mutable.year = 1;\n      }\n\n      if (mutable.calendar.balanceYearMonth) {\n        mutable.calendar.balanceYearMonth(mutable, value);\n      }\n      break;\n    }\n    case 'month':\n      mutable.month = cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options?.round);\n      break;\n    case 'day':\n      mutable.day = cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options?.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  if (value.calendar.balanceDate) {\n    value.calendar.balanceDate(mutable);\n  }\n\n  constrain(mutable);\n  return mutable;\n}\n\nexport function cycleTime(value: CalendarDateTime, field: TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime;\nexport function cycleTime(value: Time, field: TimeField, amount: number, options?: CycleTimeOptions): Time;\nexport function cycleTime(value: Time | CalendarDateTime, field: TimeField, amount: number, options?: CycleTimeOptions) {\n  let mutable: Mutable<Time | CalendarDateTime> = value.copy();\n\n  switch (field) {\n    case 'hour': {\n      let hours = value.hour;\n      let min = 0;\n      let max = 23;\n      if (options?.hourCycle === 12) {\n        let isPM = hours >= 12;\n        min = isPM ? 12 : 0;\n        max = isPM ? 23 : 11;\n      }\n      mutable.hour = cycleValue(hours, amount, min, max, options?.round);\n      break;\n    }\n    case 'minute':\n      mutable.minute = cycleValue(value.minute, amount, 0, 59, options?.round);\n      break;\n    case 'second':\n      mutable.second = cycleValue(value.second, amount, 0, 59, options?.round);\n      break;\n    case 'millisecond':\n      mutable.millisecond = cycleValue(value.millisecond, amount, 0, 999, options?.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  return mutable;\n}\n\nfunction cycleValue(value: number, amount: number, min: number, max: number, round = false) {\n  if (round) {\n    value += Math.sign(amount);\n\n    if (value < min) {\n      value = max;\n    }\n\n    let div = Math.abs(amount);\n    if (amount > 0) {\n      value = Math.ceil(value / div) * div;\n    } else {\n      value = Math.floor(value / div) * div;\n    }\n\n    if (value > max) {\n      value = min;\n    }\n  } else {\n    value += amount;\n    if (value < min) {\n      value = max - (min - value - 1);\n    } else if (value > max) {\n      value = min + (value - max - 1);\n    }\n  }\n\n  return value;\n}\n\nexport function addZoned(dateTime: ZonedDateTime, duration: DateTimeDuration): ZonedDateTime {\n  let ms: number;\n  if ((duration.years != null && duration.years !== 0) || (duration.months != null && duration.months !== 0) || (duration.days != null && duration.days !== 0)) {\n    let res = add(toCalendarDateTime(dateTime), {\n      years: duration.years,\n      months: duration.months,\n      days: duration.days\n    });\n\n    // Changing the date may change the timezone offset, so we need to recompute\n    // using the 'compatible' disambiguation.\n    ms = toAbsolute(res, dateTime.timeZone);\n  } else {\n    // Otherwise, preserve the offset of the original date.\n    ms = epochFromDate(dateTime) - dateTime.offset;\n  }\n\n  // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n  // For example, adding one hour during a DST transition may result in the hour field staying the same or\n  // skipping an hour. This results in the offset field changing value instead of the specified field.\n  ms += duration.milliseconds || 0;\n  ms += (duration.seconds || 0) * 1000;\n  ms += (duration.minutes || 0) * 60 * 1000;\n  ms += (duration.hours || 0) * 60 * 60 * 1000;\n\n  let res = fromAbsolute(ms, dateTime.timeZone);\n  return toCalendar(res, dateTime.calendar);\n}\n\nexport function subtractZoned(dateTime: ZonedDateTime, duration: DateTimeDuration): ZonedDateTime {\n  return addZoned(dateTime, invertDuration(duration));\n}\n\nexport function cycleZoned(dateTime: ZonedDateTime, field: DateField | TimeField, amount: number, options?: CycleTimeOptions): ZonedDateTime {\n  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n  switch (field) {\n    case 'hour': {\n      let min = 0;\n      let max = 23;\n      if (options?.hourCycle === 12) {\n        let isPM = dateTime.hour >= 12;\n        min = isPM ? 12 : 0;\n        max = isPM ? 23 : 11;\n      }\n\n      // The minimum and maximum hour may be affected by daylight saving time.\n      // For example, it might jump forward at midnight, and skip 1am.\n      // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n      // the possible absolute times for the min and max, and find the maximum range\n      // that is within the current day.\n      let plainDateTime = toCalendarDateTime(dateTime);\n      let minDate = toCalendar(setTime(plainDateTime, {hour: min}), new GregorianCalendar());\n      let minAbsolute = [toAbsolute(minDate, dateTime.timeZone, 'earlier'), toAbsolute(minDate, dateTime.timeZone, 'later')]\n        .filter(ms => fromAbsolute(ms, dateTime.timeZone).day === minDate.day)[0];\n\n      let maxDate = toCalendar(setTime(plainDateTime, {hour: max}), new GregorianCalendar());\n      let maxAbsolute = [toAbsolute(maxDate, dateTime.timeZone, 'earlier'), toAbsolute(maxDate, dateTime.timeZone, 'later')]\n        .filter(ms => fromAbsolute(ms, dateTime.timeZone).day === maxDate.day).pop();\n\n      // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n      // This is done in hours from the Unix epoch so that cycleValue works correctly,\n      // and then converted back to milliseconds.\n      let ms = epochFromDate(dateTime) - dateTime.offset;\n      let hours = Math.floor(ms / ONE_HOUR);\n      let remainder = ms % ONE_HOUR;\n      ms = cycleValue(\n        hours,\n        amount,\n        Math.floor(minAbsolute / ONE_HOUR),\n        Math.floor(maxAbsolute / ONE_HOUR),\n        options?.round\n      ) * ONE_HOUR + remainder;\n\n      // Now compute the new timezone offset, and convert the absolute time back to local time.\n      return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n    }\n    case 'minute':\n    case 'second':\n    case 'millisecond':\n      // @ts-ignore\n      return cycleTime(dateTime, field, amount, options);\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day': {\n      let res = cycleDate(toCalendarDateTime(dateTime), field, amount, options);\n      let ms = toAbsolute(res, dateTime.timeZone);\n      return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n    }\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n}\n\nexport function setZoned(dateTime: ZonedDateTime, fields: DateFields & TimeFields, disambiguation?: Disambiguation): ZonedDateTime {\n  // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n  let plainDateTime = toCalendarDateTime(dateTime);\n  let res = setTime(set(plainDateTime, fields), fields);\n\n  // If the resulting plain date time values are equal, return the original time.\n  // We don't want to change the offset when setting the time to the same value.\n  if (res.compare(plainDateTime) === 0) {\n    return dateTime;\n  }\n\n  let ms = toAbsolute(res, dateTime.timeZone, disambiguation);\n  return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, AnyDateTime, AnyTime, Calendar, DateFields, Disambiguation, TimeFields} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {constrain} from './manipulation';\nimport {getExtendedYear, GregorianCalendar} from './calendars/GregorianCalendar';\nimport {getLocalTimeZone} from './queries';\nimport {Mutable} from './utils';\n\nexport function epochFromDate(date: AnyDateTime) {\n  date = toCalendar(date, new GregorianCalendar());\n  let year = getExtendedYear(date.era, date.year);\n  return epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\n\nfunction epochFromParts(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  let date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\n\nexport function getTimeZoneOffset(ms: number, timeZone: string) {\n  // Fast path for UTC.\n  if (timeZone === 'UTC') {\n    return 0;\n  }\n\n  // Fast path: for local timezone, use native Date.\n  if (timeZone === getLocalTimeZone()) {\n    return new Date(ms).getTimezoneOffset() * -60 * 1000;\n  }\n\n  let {year, month, day, hour, minute, second} = getTimeZoneParts(ms, timeZone);\n  let utc = epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\n\nconst formattersByTimeZone = new Map<string, Intl.DateTimeFormat>();\n\nfunction getTimeZoneParts(ms: number, timeZone: string) {\n  let formatter = formattersByTimeZone.get(timeZone);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat('en-US', {\n      timeZone,\n      hour12: false,\n      era: 'short',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric'\n    });\n\n    formattersByTimeZone.set(timeZone, formatter);\n  }\n\n  let parts = formatter.formatToParts(new Date(ms));\n  let namedParts: {[name: string]: string} = {};\n  for (let part of parts) {\n    if (part.type !== 'literal') {\n      namedParts[part.type] = part.value;\n    }\n  }\n\n\n  return {\n    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n    year: namedParts.era === 'BC' || namedParts.era === 'B' ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === '24' ? 0 : +namedParts.hour, // bugs.chromium.org/p/chromium/issues/detail?id=1045791\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\n\nconst DAYMILLIS = 86400000;\n\nexport function possibleAbsolutes(date: CalendarDateTime, timeZone: string): number[] {\n  let ms = epochFromDate(date);\n  let earlier = ms - getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let later = ms - getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  return getValidWallTimes(date, timeZone, earlier, later);\n}\n\nfunction getValidWallTimes(date: CalendarDateTime, timeZone: string, earlier: number, later: number): number[] {\n  let found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(absolute => isValidWallTime(date, timeZone, absolute));\n}\n\nfunction isValidWallTime(date: CalendarDateTime, timeZone: string, absolute: number) {\n  let parts = getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year\n    && date.month === parts.month\n    && date.day === parts.day\n    && date.hour === parts.hour\n    && date.minute === parts.minute\n    && date.second === parts.second;\n}\n\nexport function toAbsolute(date: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): number {\n  let dateTime = toCalendarDateTime(date);\n\n  // Fast path: if the time zone is UTC, use native Date.\n  if (timeZone === 'UTC') {\n    return epochFromDate(dateTime);\n  }\n\n  // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n  if (timeZone === getLocalTimeZone() && disambiguation === 'compatible') {\n    dateTime = toCalendar(dateTime, new GregorianCalendar());\n\n    // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n    let date = new Date();\n    let year = getExtendedYear(dateTime.era, dateTime.year);\n    date.setFullYear(year, dateTime.month - 1, dateTime.day);\n    date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return date.getTime();\n  }\n\n  let ms = epochFromDate(dateTime);\n  let offsetBefore = getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let offsetAfter = getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  let valid = getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n\n  if (valid.length === 1) {\n    return valid[0];\n  }\n\n  if (valid.length > 1) {\n    switch (disambiguation) {\n      // 'compatible' means 'earlier' for \"fall back\" transitions\n      case 'compatible':\n      case 'earlier':\n        return valid[0];\n      case 'later':\n        return valid[valid.length - 1];\n      case 'reject':\n        throw new RangeError('Multiple possible absolute times found');\n    }\n  }\n\n  switch (disambiguation) {\n    case 'earlier':\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n    case 'compatible':\n    case 'later':\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n    case 'reject':\n      throw new RangeError('No such absolute time found');\n  }\n}\n\nexport function toDate(dateTime: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): Date {\n  return new Date(toAbsolute(dateTime, timeZone, disambiguation));\n}\n\nexport function fromAbsolute(ms: number, timeZone: string): ZonedDateTime {\n  let offset = getTimeZoneOffset(ms, timeZone);\n  let date = new Date(ms + offset);\n  let year = date.getUTCFullYear();\n  let month = date.getUTCMonth() + 1;\n  let day = date.getUTCDate();\n  let hour = date.getUTCHours();\n  let minute = date.getUTCMinutes();\n  let second = date.getUTCSeconds();\n  let millisecond = date.getUTCMilliseconds();\n\n  return new ZonedDateTime(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\n\nexport function fromDate(date: Date, timeZone: string): ZonedDateTime {\n  return fromAbsolute(date.getTime(), timeZone);\n}\n\nexport function fromDateToLocal(date: Date): ZonedDateTime {\n  return fromDate(date, getLocalTimeZone());\n}\n\n/** Converts a value with date components such as a `CalendarDateTime` or `ZonedDateTime` into a `CalendarDate`. */\nexport function toCalendarDate(dateTime: AnyCalendarDate): CalendarDate {\n  return new CalendarDate(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\n\nexport function toDateFields(date: AnyCalendarDate): DateFields {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\n\nexport function toTimeFields(date: AnyTime): TimeFields {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\n\n/**\n * Converts a date value to a `CalendarDateTime`. An optional `Time` value can be passed to set the time\n * of the resulting value, otherwise it will default to midnight.\n */\nexport function toCalendarDateTime(date: CalendarDate | CalendarDateTime | ZonedDateTime, time?: AnyTime): CalendarDateTime {\n  let hour = 0, minute = 0, second = 0, millisecond = 0;\n  if ('timeZone' in date) {\n    ({hour, minute, second, millisecond} = date);\n  } else if ('hour' in date && !time) {\n    return date;\n  }\n\n  if (time) {\n    ({hour, minute, second, millisecond} = time);\n  }\n\n  return new CalendarDateTime(\n    date.calendar,\n    date.era,\n    date.year,\n    date.month,\n    date.day,\n    hour,\n    minute,\n    second,\n    millisecond\n  );\n}\n\n/** Extracts the time components from a value containing a date and time. */\nexport function toTime(dateTime: CalendarDateTime | ZonedDateTime): Time {\n  return new Time(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\n\n/** Converts a date from one calendar system to another. */\nexport function toCalendar<T extends AnyCalendarDate>(date: T, calendar: Calendar): T {\n  if (date.calendar.identifier === calendar.identifier) {\n    return date;\n  }\n\n  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  let copy: Mutable<T> = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  constrain(copy);\n  return copy;\n}\n\n/**\n * Converts a date value to a `ZonedDateTime` in the provided time zone. The `disambiguation` option can be set\n * to control how values that fall on daylight saving time changes are interpreted.\n */\nexport function toZoned(date: CalendarDate | CalendarDateTime | ZonedDateTime, timeZone: string, disambiguation?: Disambiguation): ZonedDateTime {\n  if (date instanceof ZonedDateTime) {\n    if (date.timeZone === timeZone) {\n      return date;\n    }\n\n    return toTimeZone(date, timeZone);\n  }\n\n  let ms = toAbsolute(date, timeZone, disambiguation);\n  return fromAbsolute(ms, timeZone);\n}\n\nexport function zonedToDate(date: ZonedDateTime) {\n  let ms = epochFromDate(date) - date.offset;\n  return new Date(ms);\n}\n\n/** Converts a `ZonedDateTime` from one time zone to another. */\nexport function toTimeZone(date: ZonedDateTime, timeZone: string): ZonedDateTime {\n  let ms = epochFromDate(date) - date.offset;\n  return toCalendar(fromAbsolute(ms, timeZone), date.calendar);\n}\n\n/** Converts the given `ZonedDateTime` into the user's local time zone. */\nexport function toLocalTimeZone(date: ZonedDateTime): ZonedDateTime {\n  return toTimeZone(date, getLocalTimeZone());\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod, Mutable} from '../utils';\n\nconst EPOCH = 1721426; // 001/01/03 Julian C.E.\nexport function gregorianToJulianDay(era: string, year: number, month: number, day: number): number {\n  year = getExtendedYear(era, year);\n\n  let y1 = year - 1;\n  let monthOffset = -2;\n  if (month <= 2) {\n    monthOffset = 0;\n  } else if (isLeapYear(year)) {\n    monthOffset = -1;\n  }\n\n  return (\n    EPOCH -\n    1 +\n    365 * y1 +\n    Math.floor(y1 / 4) -\n    Math.floor(y1 / 100) +\n    Math.floor(y1 / 400) +\n    Math.floor((367 * month - 362) / 12 + monthOffset + day)\n  );\n}\n\nexport function isLeapYear(year: number): boolean {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nexport function getExtendedYear(era: string, year: number): number {\n  return era === 'BC' ? 1 - year : year;\n}\n\nexport function fromExtendedYear(year: number): [string, number] {\n  let era = 'AD';\n  if (year <= 0) {\n    era = 'BC';\n    year = 1 - year;\n  }\n\n  return [era, year];\n}\n\nconst daysInMonth = {\n  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n};\n\n/**\n * The Gregorian calendar is the most commonly used calendar system in the world. It supports two eras: BC, and AD.\n * Years always contain 12 months, and 365 or 366 days depending on whether it is a leap year.\n */\nexport class GregorianCalendar implements Calendar {\n  identifier = 'gregory';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let jd0 = jd;\n    let depoch = jd0 - EPOCH;\n    let quadricent = Math.floor(depoch / 146097);\n    let dqc = mod(depoch, 146097);\n    let cent = Math.floor(dqc / 36524);\n    let dcent = mod(dqc, 36524);\n    let quad = Math.floor(dcent / 1461);\n    let dquad = mod(dcent, 1461);\n    let yindex = Math.floor(dquad / 365);\n\n    let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n    let [era, year] = fromExtendedYear(extendedYear);\n    let yearDay = jd0 - gregorianToJulianDay(era, year, 1, 1);\n    let leapAdj = 2;\n    if (jd0 < gregorianToJulianDay(era, year, 3, 1)) {\n      leapAdj = 0;\n    } else if (isLeapYear(year)) {\n      leapAdj = 1;\n    }\n    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n    let day = jd0 - gregorianToJulianDay(era, year, month, 1) + 1;\n\n    return new CalendarDate(era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    return gregorianToJulianDay(date.era, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return daysInMonth[isLeapYear(date.year) ? 'leapyear' : 'standard'][date.month - 1];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getMonthsInYear(date: AnyCalendarDate): number {\n    return 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 366 : 365;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getYearsInEra(date: AnyCalendarDate): number {\n    return 9999;\n  }\n\n  getEras() {\n    return ['BC', 'AD'];\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'BC';\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BC' ? 'AD' : 'BC';\n      date.year = 1 - date.year;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CalendarDate, CalendarDateTime} from './CalendarDate';\n\nexport type Mutable<T> = {\n  -readonly[P in keyof T]: T[P]\n};\n\nexport function mod(amount: number, numerator: number): number {\n  return amount - numerator * Math.floor(amount / numerator);\n}\n\nexport function copy(date: CalendarDate): Mutable<CalendarDate> {\n  if (date.era) {\n    return new CalendarDate(date.calendar, date.era, date.year, date.month, date.day);\n  } else {\n    return new CalendarDate(date.calendar, date.year, date.month, date.day);\n  }\n}\n\nexport function copyDateTime(date: CalendarDateTime): Mutable<CalendarDateTime> {\n  if (date.era) {\n    return new CalendarDateTime(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n  } else {\n    return new CalendarDateTime(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyCalendarDate, AnyTime} from './types';\nimport {CalendarDate, CalendarDateTime, ZonedDateTime} from './CalendarDate';\nimport {fromAbsolute, toAbsolute, toCalendar, toCalendarDate} from './conversion';\nimport {weekStartData} from './weekStartData';\n\ntype DateValue = CalendarDate | CalendarDateTime | ZonedDateTime;\n\n/** Returns whether the given dates occur on the same day, regardless of the time or calendar system. */\nexport function isSameDay(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, using the calendar system of the first date. */\nexport function isSameMonth(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, using the calendar system of the first date. */\nexport function isSameYear(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the given dates occur on the same day, and are of the same calendar system. */\nexport function isEqualDay(a: DateValue, b: DateValue): boolean {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, and are of the same calendar system. */\nexport function isEqualMonth(a: DateValue, b: DateValue): boolean {\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, and are of the same calendar system. */\nexport function isEqualYear(a: DateValue, b: DateValue): boolean {\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the date is today in the given time zone. */\nexport function isToday(date: DateValue, timeZone: string): boolean {\n  return isSameDay(date, today(timeZone));\n}\n\n/**\n * Returns the day of week for the given date and locale. Days are numbered from zero to six,\n * where zero is the first day of the week in the given locale. For example, in the United States,\n * the first day of the week is Sunday, but in France it is Monday.\n */\nexport function getDayOfWeek(date: DateValue, locale: string): number {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1 - getWeekStart(locale)) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  return dayOfWeek;\n}\n\n/** Returns the current time in the given time zone. */\nexport function now(timeZone: string): ZonedDateTime {\n  return fromAbsolute(Date.now(), timeZone);\n}\n\n/** Returns today's date in the given time zone. */\nexport function today(timeZone: string): CalendarDate {\n  return toCalendarDate(now(timeZone));\n}\n\nexport function compareDate(a: AnyCalendarDate, b: AnyCalendarDate): number {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\n\nexport function compareTime(a: AnyTime, b: AnyTime): number {\n  return timeToMs(a) - timeToMs(b);\n}\n\nfunction timeToMs(a: AnyTime): number {\n  return a.hour * 60 * 60 * 1000 + a.minute * 60 * 1000 + a.second * 1000 + a.millisecond;\n}\n\n/**\n * Returns the number of hours in the given date and time zone.\n * Usually this is 24, but it could be 23 or 25 if the date is on a daylight saving transition.\n */\nexport function getHoursInDay(a: CalendarDate, timeZone: string): number {\n  let ms = toAbsolute(a, timeZone);\n  let tomorrow = a.add({days: 1});\n  let tomorrowMs = toAbsolute(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\n\nlet localTimeZone = null;\n\n/** Returns the time zone identifier for the current user. */\nexport function getLocalTimeZone(): string {\n  // TODO: invalidate this somehow?\n  if (localTimeZone == null) {\n    localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  return localTimeZone;\n}\n\n/** Returns the first date of the month for the given date. */\nexport function startOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function startOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function startOfMonth(date: CalendarDate): CalendarDate;\nexport function startOfMonth(date: DateValue): DateValue;\nexport function startOfMonth(date: DateValue): DateValue {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({days: date.day - 1});\n}\n\n/** Returns the last date of the month for the given date. */\nexport function endOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function endOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function endOfMonth(date: CalendarDate): CalendarDate;\nexport function endOfMonth(date: DateValue): DateValue;\nexport function endOfMonth(date: DateValue): DateValue {\n  return date.add({days: date.calendar.getDaysInMonth(date) - date.day});\n}\n\n/** Returns the first day of the year for the given date. */\nexport function startOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function startOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function startOfYear(date: CalendarDate): CalendarDate;\nexport function startOfYear(date: DateValue): DateValue;\nexport function startOfYear(date: DateValue): DateValue {\n  return startOfMonth(date.subtract({months: date.month - 1}));\n}\n\n/** Returns the last day of the year for the given date. */\nexport function endOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function endOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function endOfYear(date: CalendarDate): CalendarDate;\nexport function endOfYear(date: DateValue): DateValue;\nexport function endOfYear(date: DateValue): DateValue {\n  return endOfMonth(date.add({months: date.calendar.getMonthsInYear(date) - date.month}));\n}\n\nexport function getMinimumMonthInYear(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumMonthInYear) {\n    return date.calendar.getMinimumMonthInYear(date);\n  }\n\n  return 1;\n}\n\nexport function getMinimumDayInMonth(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumDayInMonth) {\n    return date.calendar.getMinimumDayInMonth(date);\n  }\n\n  return 1;\n}\n\n/** Returns the first date of the week for the given date and locale. */\nexport function startOfWeek(date: ZonedDateTime, locale: string): ZonedDateTime;\nexport function startOfWeek(date: CalendarDateTime, locale: string): CalendarDateTime;\nexport function startOfWeek(date: CalendarDate, locale: string): CalendarDate;\nexport function startOfWeek(date: DateValue, locale: string): DateValue;\nexport function startOfWeek(date: DateValue, locale: string): DateValue {\n  let dayOfWeek = getDayOfWeek(date, locale);\n  return date.subtract({days: dayOfWeek});\n}\n\n/** Returns the last date of the week for the given date and locale. */\nexport function endOfWeek(date: ZonedDateTime, locale: string): ZonedDateTime;\nexport function endOfWeek(date: CalendarDateTime, locale: string): CalendarDateTime;\nexport function endOfWeek(date: CalendarDate, locale: string): CalendarDate;\nexport function endOfWeek(date: DateValue, locale: string): DateValue {\n  return startOfWeek(date, locale).add({days: 6});\n}\n\nconst cachedRegions = new Map<string, string>();\n\nfunction getRegion(locale: string) {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    let region = cachedRegions.get(locale);\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      cachedRegions.set(locale, region);\n    }\n    return region;\n  }\n\n  // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n  let part = locale.split('-')[1];\n  return part === 'u' ? null : part;\n}\n\nfunction getWeekStart(locale: string) {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  let region = getRegion(locale);\n  return weekStartData[region] || 0;\n}\n\n/** Returns the number of weeks in the given month and locale. */\nexport function getWeeksInMonth(date: DateValue, locale: string): number {\n  let days = date.calendar.getDaysInMonth(date);\n  return Math.ceil((getDayOfWeek(startOfMonth(date), locale) + days) / 7);\n}\n\n/** Returns the lesser of the two provider dates. */\nexport function minDate<A extends DateValue, B extends DateValue>(a: A, b: B): A | B {\n  if (a && b) {\n    return a.compare(b) <= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\n/** Returns the greater of the two provider dates. */\nexport function maxDate<A extends DateValue, B extends DateValue>(a: A, b: B): A | B {\n  if (a && b) {\n    return a.compare(b) >= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\nconst WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\n\n/** Returns whether the given date is on a weekend in the given locale. */\nexport function isWeekend(date: DateValue, locale: string): boolean {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  let region = getRegion(locale);\n  // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n  let [start, end] = WEEKEND_DATA[region] || [6, 0];\n  return dayOfWeek === start || dayOfWeek === end;\n}\n\n/** Returns whether the given date is on a weekday in the given locale. */\nexport function isWeekday(date: DateValue, locale: string): boolean {\n  return !isWeekend(date, locale);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Data from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\n// Locales starting on Sunday have been removed for compression.\nexport const weekStartData = {\n  '001': 1,\n  AD: 1,\n  AE: 6,\n  AF: 6,\n  AI: 1,\n  AL: 1,\n  AM: 1,\n  AN: 1,\n  AT: 1,\n  AX: 1,\n  AZ: 1,\n  BA: 1,\n  BE: 1,\n  BG: 1,\n  BH: 6,\n  BM: 1,\n  BN: 1,\n  BY: 1,\n  CH: 1,\n  CL: 1,\n  CM: 1,\n  CR: 1,\n  CY: 1,\n  CZ: 1,\n  DE: 1,\n  DJ: 6,\n  DK: 1,\n  DZ: 6,\n  EC: 1,\n  EE: 1,\n  EG: 6,\n  ES: 1,\n  FI: 1,\n  FJ: 1,\n  FO: 1,\n  FR: 1,\n  GB: 1,\n  GE: 1,\n  GF: 1,\n  GP: 1,\n  GR: 1,\n  HR: 1,\n  HU: 1,\n  IE: 1,\n  IQ: 6,\n  IR: 6,\n  IS: 1,\n  IT: 1,\n  JO: 6,\n  KG: 1,\n  KW: 6,\n  KZ: 1,\n  LB: 1,\n  LI: 1,\n  LK: 1,\n  LT: 1,\n  LU: 1,\n  LV: 1,\n  LY: 6,\n  MC: 1,\n  MD: 1,\n  ME: 1,\n  MK: 1,\n  MN: 1,\n  MQ: 1,\n  MV: 5,\n  MY: 1,\n  NL: 1,\n  NO: 1,\n  NZ: 1,\n  OM: 6,\n  PL: 1,\n  QA: 6,\n  RE: 1,\n  RO: 1,\n  RS: 1,\n  RU: 1,\n  SD: 6,\n  SE: 1,\n  SI: 1,\n  SK: 1,\n  SM: 1,\n  SY: 6,\n  TJ: 1,\n  TM: 1,\n  TR: 1,\n  UA: 1,\n  UY: 1,\n  UZ: 1,\n  VA: 1,\n  VN: 1,\n  XK: 1\n};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyDateTime, Disambiguation} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {epochFromDate, fromAbsolute, possibleAbsolutes, toAbsolute, toCalendar, toCalendarDateTime, toTimeZone} from './conversion';\nimport {getLocalTimeZone} from './queries';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {Mutable} from './utils';\n\nconst TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::(\\d{2}))?)?\\[(.*?)\\]$/;\nconst ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::(\\d{2}))?)|Z)$/;\n\n/** Parses an ISO 8601 time string. */\nexport function parseTime(value: string): Time {\n  let m = value.match(TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 time string: ' + value);\n  }\n\n  return new Time(\n    parseNumber(m[1], 0, 23),\n    m[2] ? parseNumber(m[2], 0, 59) : 0,\n    m[3] ? parseNumber(m[3], 0, 59) : 0,\n    m[4] ? parseNumber(m[4], 0, Infinity) * 1000 : 0\n  );\n}\n\n/** Parses an ISO 8601 date string, with no time components. */\nexport function parseDate(value: string): CalendarDate {\n  let m = value.match(DATE_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date string: ' + value);\n  }\n\n  let date: Mutable<CalendarDate> = new CalendarDate(\n    parseNumber(m[1], 0, 9999),\n    parseNumber(m[2], 1, 12),\n    1\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date as CalendarDate;\n}\n\n/** Parses an ISO 8601 date and time string, with no time zone. */\nexport function parseDateTime(value: string): CalendarDateTime {\n  let m = value.match(DATE_TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<CalendarDateTime> = new CalendarDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date as CalendarDateTime;\n}\n\n/**\n * Parses an ISO 8601 date and time string with a time zone extension and optional UTC offset\n * (e.g. \"2021-11-07T00:45[America/Los_Angeles]\" or \"2021-11-07T00:45-07:00[America/Los_Angeles]\").\n * Ambiguous times due to daylight saving time transitions are resolved according to the `disambiguation`\n * parameter.\n */\nexport function parseZonedDateTime(value: string, disambiguation?: Disambiguation): ZonedDateTime {\n  let m = value.match(ZONED_DATE_TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<ZonedDateTime> = new ZonedDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    m[10],\n    0,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  let plainDateTime = toCalendarDateTime(date as ZonedDateTime);\n\n  let ms: number;\n  if (m[8]) {\n    date.offset = parseNumber(m[8], -23, 23) * 60 * 60 * 1000 + parseNumber(m[9] ?? '0', 0, 59) * 60 * 1000;\n    ms = epochFromDate(date as ZonedDateTime) - date.offset;\n\n    // Validate offset against parsed date.\n    let absolutes = possibleAbsolutes(plainDateTime, date.timeZone);\n    if (!absolutes.includes(ms)) {\n      throw new Error(`Offset ${offsetToString(date.offset)} is invalid for ${dateTimeToString(date)} in ${date.timeZone}`);\n    }\n  } else {\n    // Convert to absolute and back to fix invalid times due to DST.\n    ms = toAbsolute(toCalendarDateTime(plainDateTime), date.timeZone, disambiguation);\n  }\n\n  return fromAbsolute(ms, date.timeZone);\n}\n\n/**\n * Parses an ISO 8601 date and time string with a UTC offset (e.g. \"2021-11-07T07:45:00Z\"\n * or \"2021-11-07T07:45:00-07:00\"). The result is converted to the provided time zone.\n */\nexport function parseAbsolute(value: string, timeZone: string): ZonedDateTime {\n  let m = value.match(ABSOLUTE_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<ZonedDateTime> = new ZonedDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    timeZone,\n    0,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  if (m[8]) {\n    date.offset = parseNumber(m[8], -23, 23) * 60 * 60 * 1000 + parseNumber(m[9] ?? '0', 0, 59) * 60 * 1000;\n  }\n\n  return toTimeZone(date as ZonedDateTime, timeZone);\n}\n\n/**\n * Parses an ISO 8601 date and time string with a UTC offset (e.g. \"2021-11-07T07:45:00Z\"\n * or \"2021-11-07T07:45:00-07:00\"). The result is converted to the user's local time zone.\n */\nexport function parseAbsoluteToLocal(value: string): ZonedDateTime {\n  return parseAbsolute(value, getLocalTimeZone());\n}\n\nfunction parseNumber(value: string, min: number, max: number) {\n  let val = Number(value);\n  if (val < min || val > max) {\n    throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);\n  }\n\n  return val;\n}\n\nexport function timeToString(time: Time): string {\n  return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}${time.millisecond ? String(time.millisecond / 1000).slice(1) : ''}`;\n}\n\nexport function dateToString(date: CalendarDate): string {\n  let gregorianDate = toCalendar(date, new GregorianCalendar());\n  return `${String(gregorianDate.year).padStart(4, '0')}-${String(gregorianDate.month).padStart(2, '0')}-${String(gregorianDate.day).padStart(2, '0')}`;\n}\n\nexport function dateTimeToString(date: AnyDateTime): string {\n  // @ts-ignore\n  return `${dateToString(date)}T${timeToString(date)}`;\n}\n\nfunction offsetToString(offset: number) {\n  let sign = Math.sign(offset) < 0 ? '-' : '+';\n  offset = Math.abs(offset);\n  let offsetHours = Math.floor(offset / (60 * 60 * 1000));\n  let offsetMinutes = (offset % (60 * 60 * 1000)) / (60 * 1000);\n  return `${sign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;\n}\n\nexport function zonedDateTimeToString(date: ZonedDateTime): string {\n  return `${dateTimeToString(date)}${offsetToString(date.offset)}[${date.timeZone}]`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {GregorianCalendar} from './GregorianCalendar';\nimport {Mutable} from '../utils';\n\nconst ERA_START_DATES = [[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]];\nconst ERA_END_DATES = [[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]];\nconst ERA_ADDENDS = [1867, 1911, 1925, 1988, 2018];\nconst ERA_NAMES = ['meiji', 'taisho', 'showa', 'heisei', 'reiwa'];\n\nfunction findEraFromGregorianDate(date: AnyCalendarDate) {\n  const idx = ERA_START_DATES.findIndex(([year, month, day]) => {\n    if (date.year < year) {\n      return true;\n    }\n\n    if (date.year === year && date.month < month) {\n      return true;\n    }\n\n    if (date.year === year && date.month === month && date.day < day) {\n      return true;\n    }\n\n    return false;\n  });\n\n  if (idx === -1) {\n    return ERA_START_DATES.length - 1;\n  }\n\n  if (idx === 0) {\n    return 0;\n  }\n\n  return idx - 1;\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let eraAddend = ERA_ADDENDS[ERA_NAMES.indexOf(date.era)];\n  if (!eraAddend) {\n    throw new Error('Unknown era: ' + date.era);\n  }\n\n  return new CalendarDate(\n    date.year + eraAddend,\n    date.month,\n    date.day\n  );\n}\n\n/**\n * The Japanese calendar is based on the Gregorian calendar, but with eras for the reign of each Japanese emperor.\n * Whenever a new emperor ascends to the throne, a new era begins and the year starts again from 1.\n * Note that eras before 1868 (Gregorian) are not currently supported by this implementation.\n */\nexport class JapaneseCalendar extends GregorianCalendar {\n  identifier = 'japanese';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = super.fromJulianDay(jd);\n    let era = findEraFromGregorianDate(date);\n\n    return new CalendarDate(\n      this,\n      ERA_NAMES[era],\n      date.year - ERA_ADDENDS[era],\n      date.month,\n      date.day\n    );\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    let gregorianDate = toGregorian(date);\n    let era = findEraFromGregorianDate(gregorianDate);\n\n    if (ERA_NAMES[era] !== date.era) {\n      date.era = ERA_NAMES[era];\n      date.year = gregorianDate.year - ERA_ADDENDS[era];\n    }\n\n    // Constrain in case we went before the first supported era.\n    this.constrainDate(date);\n  }\n\n  constrainDate(date: Mutable<AnyCalendarDate>) {\n    let idx = ERA_NAMES.indexOf(date.era);\n    let end = ERA_END_DATES[idx];\n    if (end != null) {\n      let [endYear, endMonth, endDay] = end;\n\n      // Constrain the year to the maximum possible value in the era.\n      // Then constrain the month and day fields within that.\n      let maxYear = endYear - ERA_ADDENDS[idx];\n      date.year = Math.max(1, Math.min(maxYear, date.year));\n      if (date.year === maxYear) {\n        date.month = Math.min(endMonth, date.month);\n\n        if (date.month === endMonth) {\n          date.day = Math.min(endDay, date.day);\n        }\n      }\n    }\n\n    if (date.year === 1 && idx >= 0) {\n      let [, startMonth, startDay] = ERA_START_DATES[idx];\n      date.month = Math.max(startMonth, date.month);\n\n      if (date.month === startMonth) {\n        date.day = Math.max(startDay, date.day);\n      }\n    }\n  }\n\n  getEras() {\n    return ERA_NAMES;\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // Get the number of years in the era, taking into account the date's month and day fields.\n    let era = ERA_NAMES.indexOf(date.era);\n    let cur = ERA_START_DATES[era];\n    let next = ERA_START_DATES[era + 1];\n    if (next == null) {\n      // 9999 gregorian is the maximum year allowed.\n      return 9999 - cur[0] + 1;\n    }\n\n    let years = next[0] - cur[0];\n\n    if (date.month < next[1] || (date.month === next[1] && date.day < next[2])) {\n      years++;\n    }\n\n    return years;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  getMinimumMonthInYear(date: AnyCalendarDate): number {\n    let start = getMinimums(date);\n    return start ? start[1] : 1;\n  }\n\n  getMinimumDayInMonth(date: AnyCalendarDate): number {\n    let start = getMinimums(date);\n    return start && date.month === start[1] ? start[2] : 1;\n  }\n}\n\nfunction getMinimums(date: AnyCalendarDate) {\n  if (date.year === 1) {\n    let idx = ERA_NAMES.indexOf(date.era);\n    return ERA_START_DATES[idx];\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, getExtendedYear, GregorianCalendar} from './GregorianCalendar';\n\nconst BUDDHIST_ERA_START = -543;\n\n/**\n * The Buddhist calendar is the same as the Gregorian calendar, but counts years\n * starting from the birth of Buddha in 543 BC (Gregorian). It supports only one\n * era, identified as 'BE'.\n */\nexport class BuddhistCalendar extends GregorianCalendar {\n  identifier = 'buddhist';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorianDate = super.fromJulianDay(jd);\n    let year = getExtendedYear(gregorianDate.era, gregorianDate.year);\n    return new CalendarDate(\n      this,\n      year - BUDDHIST_ERA_START,\n      gregorianDate.month,\n      gregorianDate.day\n    );\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  getEras() {\n    return ['BE'];\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  balanceDate() {}\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let [era, year] = fromExtendedYear(date.year + BUDDHIST_ERA_START);\n  return new CalendarDate(\n    era,\n    year,\n    date.month,\n    date.day\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, getExtendedYear, GregorianCalendar} from './GregorianCalendar';\nimport {Mutable} from '../utils';\n\nconst TAIWAN_ERA_START = 1911;\n\nfunction gregorianYear(date: AnyCalendarDate) {\n  return date.era === 'minguo'\n    ? date.year + TAIWAN_ERA_START\n    : 1 - date.year + TAIWAN_ERA_START;\n}\n\nfunction gregorianToTaiwan(year: number): [string, number] {\n  let y = year - TAIWAN_ERA_START;\n  if (y > 0) {\n    return ['minguo', y];\n  } else {\n    return ['before_minguo', 1 - y];\n  }\n}\n\n/**\n * The Taiwanese calendar is the same as the Gregorian calendar, but years\n * are numbered starting from 1912 (Gregorian). Two eras are supported:\n * 'before_minguo' and 'minguo'.\n */\nexport class TaiwanCalendar extends GregorianCalendar {\n  identifier = 'roc'; // Republic of China\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = super.fromJulianDay(jd);\n    let extendedYear = getExtendedYear(date.era, date.year);\n    let [era, year] = gregorianToTaiwan(extendedYear);\n    return new CalendarDate(this, era, year, date.month, date.day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  getEras() {\n    return ['before_minguo', 'minguo'];\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    let [era, year] = gregorianToTaiwan(gregorianYear(date));\n    date.era = era;\n    date.year = year;\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'before_minguo';\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    return date.era === 'before_minguo' ? 9999 : 9999 - TAIWAN_ERA_START;\n  }\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let [era, year] = fromExtendedYear(gregorianYear(date));\n  return new CalendarDate(\n    era,\n    year,\n    date.month,\n    date.day\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod} from '../utils';\n\nconst PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\n\nfunction isLeapYear(year: number): boolean {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = mod(y0, 2820) + 474;\n\n  return mod((y1 + 38) * 31, 128) < 31;\n}\n\nfunction persianToJulianDay(year: number, month: number, day: number): number {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = mod(y0, 2820) + 474;\n  let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n\n  return (\n    PERSIAN_EPOCH -\n    1 +\n    1029983 * Math.floor(y0 / 2820) +\n    365 * (y1 - 1) +\n    Math.floor((31 * y1 - 5) / 128) +\n    offset +\n    day\n  );\n}\n\n/**\n * The Persian calendar is the main calendar used in Iran and Afghanistan. It has 12 months\n * in each year, the first 6 of which have 31 days, and the next 5 have 30 days. The 12th month\n * has either 29 or 30 days depending on whether it is a leap year. The Persian year starts\n * around the March equinox.\n */\nexport class PersianCalendar implements Calendar {\n  identifier = 'persian';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let d0 = jd - persianToJulianDay(475, 1, 1);\n    let n2820 = Math.floor(d0 / 1029983);\n    let d1 = mod(d0, 1029983);\n    let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n    let year = 474 + 2820 * n2820 + y2820;\n    if (year <= 0) {\n      year--;\n    }\n\n    let yDay = jd - persianToJulianDay(year, 1, 1) + 1;\n    let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n    let day = jd - persianToJulianDay(year, month, 1) + 1;\n\n    return new CalendarDate(this, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    return persianToJulianDay(date.year, date.month, date.day);\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.month <= 6) {\n      return 31;\n    }\n\n    if (date.month <= 11) {\n      return 30;\n    }\n\n    return isLeapYear(date.year) ? 30 : 29;\n  }\n\n  getEras() {\n    return ['AP'];\n  }\n\n  getYearsInEra(): number {\n    // 9378-10-10 persian is 9999-12-31 gregorian.\n    // Round down to 9377 to set the maximum full year.\n    return 9377;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, GregorianCalendar, gregorianToJulianDay, isLeapYear} from './GregorianCalendar';\n\n// Starts in 78 AD,\nconst INDIAN_ERA_START = 78;\n\n// The Indian year starts 80 days later than the Gregorian year.\nconst INDIAN_YEAR_START = 80;\n\n/**\n * The Indian National Calendar is similar to the Gregorian calendar, but with\n * years numbered since the Saka era in 78 AD (Gregorian). There are 12 months\n * in each year, with either 30 or 31 days. Only one era identifier is supported: 'saka'.\n */\nexport class IndianCalendar extends GregorianCalendar {\n  identifier = 'indian';\n\n  fromJulianDay(jd: number): CalendarDate {\n    // Gregorian date for Julian day\n    let date = super.fromJulianDay(jd);\n\n    // Year in Saka era\n    let indianYear = date.year - INDIAN_ERA_START;\n\n    // Day number in Gregorian year (starting from 0)\n    let yDay = jd - gregorianToJulianDay(date.era, date.year, 1, 1);\n\n    let leapMonth: number;\n    if (yDay < INDIAN_YEAR_START) {\n      //  Day is at the end of the preceding Saka year\n      indianYear--;\n\n      // Days in leapMonth this year, previous Gregorian year\n      leapMonth = isLeapYear(date.year - 1) ? 31 : 30;\n      yDay += leapMonth + (31 * 5) + (30 * 3) + 10;\n    } else {\n      // Days in leapMonth this year\n      leapMonth = isLeapYear(date.year) ? 31 : 30;\n      yDay -= INDIAN_YEAR_START;\n    }\n\n    let indianMonth: number;\n    let indianDay: number;\n    if (yDay < leapMonth) {\n      indianMonth = 1;\n      indianDay = yDay + 1;\n    } else {\n      let mDay = yDay - leapMonth;\n      if (mDay < (31 * 5)) {\n        indianMonth = Math.floor(mDay / 31) + 2;\n        indianDay = (mDay % 31) + 1;\n      } else {\n        mDay -= 31 * 5;\n        indianMonth = Math.floor(mDay / 30) + 7;\n        indianDay = (mDay % 30) + 1;\n      }\n    }\n\n    return new CalendarDate(this, indianYear, indianMonth, indianDay);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let extendedYear = date.year + INDIAN_ERA_START;\n    let [era, year] = fromExtendedYear(extendedYear);\n\n    let leapMonth: number;\n    let jd: number;\n    if (isLeapYear(year)) {\n      leapMonth = 31;\n      jd = gregorianToJulianDay(era, year, 3, 21);\n    } else {\n      leapMonth = 30;\n      jd = gregorianToJulianDay(era, year, 3, 22);\n    }\n\n    if (date.month === 1) {\n      return jd + date.day - 1;\n    }\n\n    jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n\n    if (date.month >= 8) {\n      jd += (date.month - 7) * 30;\n    }\n\n    jd += date.day - 1;\n    return jd;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.month === 1 && isLeapYear(date.year + INDIAN_ERA_START)) {\n      return 31;\n    }\n\n    if (date.month >= 2 && date.month <= 6) {\n      return 31;\n    }\n\n    return 30;\n  }\n\n  getYearsInEra(): number {\n    // 9999-12-31 gregorian is 9920-10-10 indian.\n    // Round down to 9919 for the last full year.\n    return 9919;\n  }\n\n  getEras() {\n    return ['saka'];\n  }\n\n  balanceDate() {}\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\n\nconst CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\nconst ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\nconst UMALQURA_YEAR_START = 1300;\nconst UMALQURA_YEAR_END = 1600;\nconst UMALQURA_START_DAYS = 460322;\n\nfunction islamicToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return day +\n    Math.ceil(29.5 * (month - 1)) +\n    (year - 1) * 354 +\n    Math.floor((3 + 11 * year) / 30) +\n    epoch - 1;\n}\n\nfunction julianDayToIslamic(calendar: Calendar, epoch: number, jd: number) {\n  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  let month = Math.min(12, Math.ceil((jd - (29 + islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  let day = jd - islamicToJulianDay(epoch, year, month, 1) + 1;\n\n  return new CalendarDate(calendar, year, month, day);\n}\n\nfunction isLeapYear(year: number): boolean {\n  return (14 + 11 * year) % 30 < 11;\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The civil variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Friday, July 16 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicCivilCalendar implements Calendar {\n  identifier = 'islamic-civil';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, CIVIL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(CIVIL_EPOC, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let length = 29 + date.month % 2;\n    if (date.month === 12 && isLeapYear(date.year)) {\n      length++;\n    }\n\n    return length;\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 355 : 354;\n  }\n\n  getYearsInEra(): number {\n    // 9999 gregorian\n    return 9665;\n  }\n\n  getEras() {\n    return ['AH'];\n  }\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The tabular variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Thursday, July 15 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicTabularCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-tbla';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, ASTRONOMICAL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n  }\n}\n\n// Generated by scripts/generate-umalqura.js\nconst UMALQURA_DATA = 'qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=';\nlet UMALQURA_MONTHLENGTH: Uint16Array;\nlet UMALQURA_YEAR_START_TABLE: Uint32Array;\n\nfunction umalquraYearStart(year: number): number {\n  return UMALQURA_START_DAYS + UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\nfunction umalquraMonthLength(year: number, month: number): number {\n  let idx = (year - UMALQURA_YEAR_START);\n  let mask = (0x01 << (11 - (month - 1)));\n  if ((UMALQURA_MONTHLENGTH[idx] & mask) === 0) {\n    return 29;\n  } else {\n    return 30;\n  }\n}\n\nfunction umalquraMonthStart(year: number, month: number): number {\n  let day = umalquraYearStart(year);\n  for (let i = 1; i < month; i++) {\n    day += umalquraMonthLength(year, i);\n  }\n  return day;\n}\n\nfunction umalquraYearLength(year: number): number {\n  return UMALQURA_YEAR_START_TABLE[year + 1 - UMALQURA_YEAR_START] - UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The Umalqura variant is primarily used in Saudi Arabia. It is a lunar calendar, based on astronomical\n * calculations that predict the sighting of a crescent moon. Month and year lengths vary between years\n * depending on these calculations.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicUmalquraCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-umalqura';\n\n  constructor() {\n    super();\n    if (!UMALQURA_MONTHLENGTH) {\n      UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob(UMALQURA_DATA), c => c.charCodeAt(0)).buffer);\n    }\n\n    if (!UMALQURA_YEAR_START_TABLE) {\n      UMALQURA_YEAR_START_TABLE = new Uint32Array(UMALQURA_YEAR_END - UMALQURA_YEAR_START + 1);\n\n      let yearStart = 0;\n      for (let year = UMALQURA_YEAR_START; year <= UMALQURA_YEAR_END; year++) {\n        UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START] = yearStart;\n        for (let i = 1; i <= 12; i++) {\n          yearStart += umalquraMonthLength(year, i);\n        }\n      }\n    }\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let days = jd - CIVIL_EPOC;\n    let startDays = umalquraYearStart(UMALQURA_YEAR_START);\n    let endDays = umalquraYearStart(UMALQURA_YEAR_END);\n    if (days < startDays || days > endDays) {\n      return super.fromJulianDay(jd);\n    } else {\n      let y = UMALQURA_YEAR_START - 1;\n      let m = 1;\n      let d = 1;\n      while (d > 0) {\n        y++;\n        d = days - umalquraYearStart(y) + 1;\n        let yearLength = umalquraYearLength(y);\n        if (d === yearLength) {\n          m = 12;\n          break;\n        } else if (d < yearLength) {\n          let monthLength = umalquraMonthLength(y, m);\n          m = 1;\n          while (d > monthLength) {\n            d -= monthLength;\n            m++;\n            monthLength = umalquraMonthLength(y, m);\n          }\n          break;\n        }\n      }\n\n      return new CalendarDate(this, y, m, (days - umalquraMonthStart(y, m) + 1));\n    }\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.toJulianDay(date);\n    }\n\n    return CIVIL_EPOC + umalquraMonthStart(date.year, date.month) + (date.day - 1);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInMonth(date);\n    }\n\n    return umalquraMonthLength(date.year, date.month);\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInYear(date);\n    }\n\n    return umalquraYearLength(date.year);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod, Mutable} from '../utils';\n\nconst HEBREW_EPOCH = 347997;\n\n// Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\nconst HOUR_PARTS = 1080;\nconst DAY_PARTS  = 24 * HOUR_PARTS;\n\n// An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\nconst MONTH_DAYS = 29;\nconst MONTH_FRACT = 12 * HOUR_PARTS + 793;\nconst MONTH_PARTS = MONTH_DAYS * DAY_PARTS + MONTH_FRACT;\n\nfunction isLeapYear(year: number) {\n  return mod(year * 7 + 1, 19) < 7;\n}\n\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\nfunction hebrewDelay1(year: number) {\n  let months = Math.floor((235 * year - 234) / 19);\n  let parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n\n  if (mod(3 * (day + 1), 7) < 3) {\n    day += 1;\n  }\n\n  return day;\n}\n\n// Check for delay in start of new year due to length of adjacent years\nfunction hebrewDelay2(year: number) {\n  let last = hebrewDelay1(year - 1);\n  let present = hebrewDelay1(year);\n  let next = hebrewDelay1(year + 1);\n\n  if (next - present === 356) {\n    return 2;\n  }\n\n  if (present - last === 382) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction startOfYear(year: number) {\n  return hebrewDelay1(year) + hebrewDelay2(year);\n}\n\nfunction getDaysInYear(year: number) {\n  return startOfYear(year + 1) - startOfYear(year);\n}\n\nfunction getYearType(year: number) {\n  let yearLength = getDaysInYear(year);\n\n  if (yearLength > 380) {\n    yearLength -= 30; // Subtract length of leap month.\n  }\n\n  switch (yearLength) {\n    case 353:\n      return 0; // deficient\n    case 354:\n      return 1; // normal\n    case 355:\n      return 2; // complete\n  }\n}\n\nfunction getDaysInMonth(year: number, month: number): number {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !isLeapYear(year)) {\n    month++;\n  }\n\n  // First of all, dispose of fixed-length 29 day months\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) {\n    return 29;\n  }\n\n  let yearType = getYearType(year);\n\n  // If it's Heshvan, days depend on length of year\n  if (month === 2) {\n    return yearType === 2 ? 30 : 29;\n  }\n\n  // Similarly, Kislev varies with the length of year\n  if (month === 3) {\n    return yearType === 0 ? 29 : 30;\n  }\n\n  // Adar I only exists in leap years\n  if (month === 6) {\n    return isLeapYear(year) ? 30 : 0;\n  }\n\n  return 30;\n}\n\n/**\n * The Hebrew calendar is used in Israel and around the world by the Jewish faith.\n * Years include either 12 or 13 months depending on whether it is a leap year.\n * In leap years, an extra month is inserted at month 6.\n */\nexport class HebrewCalendar implements Calendar {\n  identifier = 'hebrew';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let d = jd - HEBREW_EPOCH;\n    let m = (d * DAY_PARTS) / MONTH_PARTS;           // Months (approx)\n    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n    let ys = startOfYear(year);                      // 1st day of year\n    let dayOfYear = Math.floor(d - ys);\n\n    // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n    while (dayOfYear < 1) {\n      year--;\n      ys = startOfYear(year);\n      dayOfYear = Math.floor(d - ys);\n    }\n\n    // Now figure out which month we're in, and the date within that month\n    let month = 1;\n    let monthStart = 0;\n    while (monthStart < dayOfYear) {\n      monthStart += getDaysInMonth(year, month);\n      month++;\n    }\n\n    month--;\n    monthStart -= getDaysInMonth(year, month);\n\n    let day = dayOfYear - monthStart;\n    return new CalendarDate(this, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let jd = startOfYear(date.year);\n    for (let month = 1; month < date.month; month++) {\n      jd += getDaysInMonth(date.year, month);\n    }\n\n    return jd + date.day + HEBREW_EPOCH;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 13 : 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return getDaysInYear(date.year);\n  }\n\n  getYearsInEra(): number {\n    // 6239 gregorian\n    return 9999;\n  }\n\n  getEras() {\n    return ['AM'];\n  }\n\n  balanceYearMonth(date: Mutable<AnyCalendarDate>, previousDate: AnyCalendarDate) {\n    // Keep date in the same month when switching between leap years and non leap years\n    if (previousDate.year !== date.year) {\n      if (isLeapYear(previousDate.year) && !isLeapYear(date.year) && previousDate.month > 6) {\n        date.month--;\n      } else if (!isLeapYear(previousDate.year) && isLeapYear(date.year) && previousDate.month > 6) {\n        date.month++;\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {Mutable} from '../utils';\n\nconst ETHIOPIC_EPOCH = 1723856;\nconst COPTIC_EPOCH = 1824665;\n\n// The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\nconst AMETE_MIHRET_DELTA = 5500;\n\nfunction ceToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return (\n    epoch                   // difference from Julian epoch to 1,1,1\n    + 365 * year            // number of days from years\n    + Math.floor(year / 4)  // extra day of leap year\n    + 30 * (month - 1)      // number of days from months (1 based)\n    + day - 1               // number of days for present month (1 based)\n  );\n}\n\nfunction julianDayToCE(epoch: number, jd: number) {\n  let year = Math.floor((4 * (jd - epoch)) / 1461);\n  let month = 1 + Math.floor((jd - ceToJulianDay(epoch, year, 1, 1)) / 30);\n  let day = jd + 1 - ceToJulianDay(epoch, year, month, 1);\n  return [year, month, day];\n}\n\nfunction getLeapDay(year: number) {\n  return Math.floor((year % 4) / 3);\n}\n\nfunction getDaysInMonth(year: number, month: number) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0) {\n    // not intercalary month\n    return 30;\n  } else {\n    // intercalary month 5 days + possible leap day\n    return getLeapDay(year) + 5;\n  }\n}\n\n/**\n * The Ethiopic calendar system is the official calendar used in Ethiopia.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'AA' and 'AM'.\n */\nexport class EthiopicCalendar implements Calendar {\n  identifier = 'ethiopic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(ETHIOPIC_EPOCH, jd);\n    let era = 'AM';\n    if (year <= 0) {\n      era = 'AA';\n      year += AMETE_MIHRET_DELTA;\n    }\n\n    return new CalendarDate(this, era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'AA') {\n      year -= AMETE_MIHRET_DELTA;\n    }\n\n    return ceToJulianDay(ETHIOPIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(): number {\n    return 13;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return 365 + getLeapDay(date.year);\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // 9999-12-31 gregorian is 9992-20-02 ethiopic.\n    // Round down to 9991 for the last full year.\n    // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.\n    return date.era === 'AA' ? 9999 : 9991;\n  }\n\n  getEras() {\n    return ['AA', 'AM'];\n  }\n}\n\n/**\n * The Ethiopic (Amete Alem) calendar is the same as the modern Ethiopic calendar,\n * except years were measured from a different epoch. Only one era is supported: 'AA'.\n */\nexport class EthiopicAmeteAlemCalendar extends EthiopicCalendar {\n  identifier = 'ethioaa'; // also known as 'ethiopic-amete-alem' in ICU\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(ETHIOPIC_EPOCH, jd);\n    year += AMETE_MIHRET_DELTA;\n    return new CalendarDate(this, 'AA', year, month, day);\n  }\n\n  getEras() {\n    return ['AA'];\n  }\n\n  getYearsInEra(): number {\n    // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.\n    return 9999;\n  }\n}\n\n/**\n * The Coptic calendar is similar to the Ethiopic calendar.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'BCE' and 'CE'.\n */\nexport class CopticCalendar extends EthiopicCalendar {\n  identifier = 'coptic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(COPTIC_EPOCH, jd);\n    let era = 'CE';\n    if (year <= 0) {\n      era = 'BCE';\n      year = 1 - year;\n    }\n\n    return new CalendarDate(this, era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return ceToJulianDay(COPTIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return getDaysInMonth(year, date.month);\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'BCE';\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BCE' ? 'CE' : 'BCE';\n      date.year = 1 - date.year;\n    }\n  }\n\n  getEras() {\n    return ['BCE', 'CE'];\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // 9999-12-30 gregorian is 9716-02-20 coptic.\n    // Round down to 9715 for the last full year.\n    // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.\n    return date.era === 'BCE' ? 9999 : 9715;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nimport {Calendar} from './types';\nimport {CopticCalendar, EthiopicAmeteAlemCalendar, EthiopicCalendar} from './calendars/EthiopicCalendar';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {HebrewCalendar} from './calendars/HebrewCalendar';\nimport {IndianCalendar} from './calendars/IndianCalendar';\nimport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nimport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nimport {PersianCalendar} from './calendars/PersianCalendar';\nimport {TaiwanCalendar} from './calendars/TaiwanCalendar';\n\n/** Creates a `Calendar` instance from a Unicode calendar identifier string. */\nexport function createCalendar(name: string): Calendar {\n  switch (name) {\n    case 'buddhist':\n      return new BuddhistCalendar();\n    case 'ethiopic':\n      return new EthiopicCalendar();\n    case 'ethioaa':\n      return new EthiopicAmeteAlemCalendar();\n    case 'coptic':\n      return new CopticCalendar();\n    case 'hebrew':\n      return new HebrewCalendar();\n    case 'indian':\n      return new IndianCalendar();\n    case 'islamic-civil':\n      return new IslamicCivilCalendar();\n    case 'islamic-tbla':\n      return new IslamicTabularCalendar();\n    case 'islamic-umalqura':\n      return new IslamicUmalquraCalendar();\n    case 'japanese':\n      return new JapaneseCalendar();\n    case 'persian':\n      return new PersianCalendar();\n    case 'roc':\n      return new TaiwanCalendar();\n    case 'gregory':\n    default:\n      return new GregorianCalendar();\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.DateTimeFormat>();\n\ninterface ResolvedDateTimeFormatOptions extends Intl.ResolvedDateTimeFormatOptions {\n  hourCycle?: Intl.DateTimeFormatOptions['hourCycle']\n}\n\ninterface DateRangeFormatPart extends Intl.DateTimeFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/** A wrapper around Intl.DateTimeFormat that fixes various browser bugs, and polyfills new features. */\nexport class DateFormatter implements Intl.DateTimeFormat {\n  private formatter: Intl.DateTimeFormat;\n  private options: Intl.DateTimeFormatOptions;\n  private resolvedHourCycle: Intl.DateTimeFormatOptions['hourCycle'];\n\n  constructor(locale: string, options: Intl.DateTimeFormatOptions = {}) {\n    this.formatter = getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */\n  format(value: Date): string {\n    return this.formatter.format(value);\n  }\n\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n  formatToParts(value: Date): Intl.DateTimeFormatPart[] {\n    return this.formatter.formatToParts(value);\n  }\n\n  /** Formats a date range as a string. */\n  formatRange(start: Date, end: Date): string {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n\n  /** Formats a date range as an array of parts. */\n  formatRangeToParts(start: Date, end: Date): DateRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as DateRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as DateRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): ResolvedDateTimeFormatOptions {\n    let resolvedOptions = this.formatter.resolvedOptions() as ResolvedDateTimeFormatOptions;\n    if (hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) {\n        this.resolvedHourCycle = getResolvedHourCycle(resolvedOptions.locale, this.options);\n      }\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';\n    }\n\n    // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n    // https://bugs.webkit.org/show_bug.cgi?id=241564\n    if (resolvedOptions.calendar === 'ethiopic-amete-alem') {\n      resolvedOptions.calendar = 'ethioaa';\n    }\n\n    return resolvedOptions;\n  }\n}\n\n// There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nconst hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: 'h11'\n  },\n  false: {\n    // All locales use h23 for 24 hour time. None use h24.\n  }\n};\n\nfunction getCachedDateFormatter(locale: string, options: Intl.DateTimeFormatOptions = {}): Intl.DateTimeFormat {\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === 'boolean' && hasBuggyHour12Behavior()) {\n    options = {...options};\n    let pref = hour12Preferences[String(options.hour12)][locale.split('-')[0]];\n    let defaultHourCycle = options.hour12 ? 'h12' : 'h23';\n    options.hourCycle = pref ?? defaultHourCycle;\n    delete options.hour12;\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nlet _hasBuggyHour12Behavior: boolean = null;\nfunction hasBuggyHour12Behavior() {\n  if (_hasBuggyHour12Behavior == null) {\n    _hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {\n      hour: 'numeric',\n      hour12: false\n    }).format(new Date(2020, 2, 3, 0)) === '24';\n  }\n\n  return _hasBuggyHour12Behavior;\n}\n\nlet _hasBuggyResolvedHourCycle: boolean = null;\nfunction hasBuggyResolvedHourCycle() {\n  if (_hasBuggyResolvedHourCycle == null) {\n    _hasBuggyResolvedHourCycle = (new Intl.DateTimeFormat('fr', {\n      hour: 'numeric',\n      hour12: false\n    }).resolvedOptions() as ResolvedDateTimeFormatOptions).hourCycle === 'h12';\n  }\n\n  return _hasBuggyResolvedHourCycle;\n}\n\nfunction getResolvedHourCycle(locale: string, options: Intl.DateTimeFormatOptions) {\n  if (!options.timeStyle && !options.hour) {\n    return undefined;\n  }\n\n  // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');\n  locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';\n  let formatter = getCachedDateFormatter(locale, {\n    ...options,\n    timeZone: undefined // use local timezone\n  });\n\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === 'hour').value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === 'hour').value, 10);\n\n  if (min === 0 && max === 23) {\n    return 'h23';\n  }\n\n  if (min === 24 && max === 23) {\n    return 'h24';\n  }\n\n  if (min === 0 && max === 11) {\n    return 'h11';\n  }\n\n  if (min === 12 && max === 11) {\n    return 'h12';\n  }\n\n  throw new Error('Unexpected hour cycle result');\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}