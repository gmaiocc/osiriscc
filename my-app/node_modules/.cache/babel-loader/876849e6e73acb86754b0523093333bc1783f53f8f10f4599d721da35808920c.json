{"ast":null,"code":"import { useMemo as $cAn5f$useMemo, useEffect as $cAn5f$useEffect } from \"react\";\nimport { useMultipleSelectionState as $cAn5f$useMultipleSelectionState, SelectionManager as $cAn5f$SelectionManager } from \"@react-stately/selection\";\nimport $cAn5f$swchelperssrc_define_propertymjs from \"@swc/helpers/src/_define_property.mjs\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $62967d126f3aa823$export$4007ac09ff9c68ed(props) {\n  let {\n    collection: collection,\n    focusMode: focusMode\n  } = props;\n  let selectionState = (0, $cAn5f$useMultipleSelectionState)(props);\n  let disabledKeys = (0, $cAn5f$useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);\n  let setFocusedKey = selectionState.setFocusedKey;\n  selectionState.setFocusedKey = (key, child) => {\n    // If focusMode is cell and an item is focused, focus a child cell instead.\n    if (focusMode === \"cell\" && key != null) {\n      let item = collection.getItem(key);\n      if ((item === null || item === void 0 ? void 0 : item.type) === \"item\") {\n        var _children_, _children_1;\n        let children = [...item.childNodes];\n        if (child === \"last\") key = (_children_ = children[children.length - 1]) === null || _children_ === void 0 ? void 0 : _children_.key;else key = (_children_1 = children[0]) === null || _children_1 === void 0 ? void 0 : _children_1.key;\n      }\n    }\n    setFocusedKey(key, child);\n  };\n  // Reset focused key if that item is deleted from the collection.\n  (0, $cAn5f$useEffect)(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);\n  }, [collection, selectionState]);\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    isKeyboardNavigationDisabled: false,\n    selectionManager: new (0, $cAn5f$SelectionManager)(collection, selectionState)\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nlet $16805b1b18093c5f$var$_Symbol_iterator = Symbol.iterator;\nclass $16805b1b18093c5f$export$de3fdf6493c353d {\n  *[$16805b1b18093c5f$var$_Symbol_iterator]() {\n    yield* [...this.rows];\n  }\n  get size() {\n    return [...this.rows].length;\n  }\n  getKeys() {\n    return this.keyMap.keys();\n  }\n  getKeyBefore(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n  getKeyAfter(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n  getFirstKey() {\n    var _;\n    return (_ = [...this.rows][0]) === null || _ === void 0 ? void 0 : _.key;\n  }\n  getLastKey() {\n    var _rows_;\n    let rows = [...this.rows];\n    return (_rows_ = rows[rows.length - 1]) === null || _rows_ === void 0 ? void 0 : _rows_.key;\n  }\n  getItem(key) {\n    return this.keyMap.get(key);\n  }\n  at(idx) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n  constructor(opts) {\n    (0, $cAn5f$swchelperssrc_define_propertymjs)(this, \"keyMap\", new Map());\n    this.keyMap = new Map();\n    this.columnCount = opts === null || opts === void 0 ? void 0 : opts.columnCount;\n    this.rows = [];\n    let visit = node => {\n      // If the node is the same object as the previous node for the same key,\n      // we can skip this node and its children. We always visit columns though,\n      // because we depend on order to build the columns array.\n      let prevNode = this.keyMap.get(node.key);\n      if (opts.visitNode) node = opts.visitNode(node);\n      this.keyMap.set(node.key, node);\n      let childKeys = new Set();\n      let last;\n      for (let child of node.childNodes) {\n        if (child.type === \"cell\" && child.parentKey == null)\n          // if child is a cell parent key isn't already established by the collection, match child node to parent row\n          child.parentKey = node.key;\n        childKeys.add(child.key);\n        if (last) {\n          last.nextKey = child.key;\n          child.prevKey = last.key;\n        } else child.prevKey = null;\n        visit(child);\n        last = child;\n      }\n      if (last) last.nextKey = null;\n      // Remove deleted nodes and their children from the key map\n      if (prevNode) {\n        for (let child1 of prevNode.childNodes) if (!childKeys.has(child1.key)) remove(child1);\n      }\n    };\n    let remove = node => {\n      this.keyMap.delete(node.key);\n      for (let child of node.childNodes) if (this.keyMap.get(child.key) === child) remove(child);\n    };\n    let last;\n    opts.items.forEach((node, i) => {\n      let rowNode = {\n        level: 0,\n        key: \"row-\" + i,\n        type: \"row\",\n        value: undefined,\n        hasChildNodes: true,\n        childNodes: [...node.childNodes],\n        rendered: undefined,\n        textValue: undefined,\n        ...node,\n        index: i\n      };\n      if (last) {\n        last.nextKey = rowNode.key;\n        rowNode.prevKey = last.key;\n      } else rowNode.prevKey = null;\n      this.rows.push(rowNode);\n      visit(rowNode);\n      last = rowNode;\n    });\n    if (last) last.nextKey = null;\n  }\n}\nexport { $62967d126f3aa823$export$4007ac09ff9c68ed as useGridState, $16805b1b18093c5f$export$de3fdf6493c353d as GridCollection };","map":{"version":3,"mappings":"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","names":["$62967d126f3aa823$export$4007ac09ff9c68ed","props","collection","focusMode","selectionState","disabledKeys","Set","setFocusedKey","key","child","item","getItem","type","_children_","_children_1","children","childNodes","length","focusedKey","isKeyboardNavigationDisabled","selectionManager","$16805b1b18093c5f$var$_Symbol_iterator","iterator","$16805b1b18093c5f$export$de3fdf6493c353d","rows","size","getKeys","keyMap","keys","getKeyBefore","node","get","prevKey","getKeyAfter","nextKey","getFirstKey","_","getLastKey","_rows_","at","idx","constructor","opts","Map","columnCount","visit","prevNode","visitNode","set","childKeys","last","parentKey","add","child1","has","remove","delete","items","forEach","i","rowNode","level","value","undefined","hasChildNodes","rendered","textValue","index","push"],"sources":["C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@react-stately\\grid\\dist\\packages\\@react-stately\\grid\\src\\index.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@react-stately\\grid\\dist\\packages\\@react-stately\\grid\\src\\useGridState.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@react-stately\\grid\\dist\\packages\\@react-stately\\grid\\src\\GridCollection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useGridState} from './useGridState';\nexport {GridCollection} from './GridCollection';\n\nexport type {GridStateOptions, GridState} from './useGridState';\n","import {GridCollection} from '@react-types/grid';\nimport {Key, useEffect, useMemo} from 'react';\nimport {MultipleSelectionStateProps, SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\n\nexport interface GridState<T, C extends GridCollection<T>> {\n  collection: C,\n  /** A set of keys for rows that are disabled. */\n  disabledKeys: Set<Key>,\n  /** A selection manager to read and update row selection state. */\n  selectionManager: SelectionManager,\n  /** Whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  isKeyboardNavigationDisabled: boolean\n}\n\nexport interface GridStateOptions<T, C extends GridCollection<T>> extends MultipleSelectionStateProps {\n  collection: C,\n  disabledKeys?: Iterable<Key>,\n  focusMode?: 'row' | 'cell'\n}\n\n/**\n * Provides state management for a grid component. Handles row selection and focusing a grid cell's focusable child if applicable.\n */\nexport function useGridState<T extends object, C extends GridCollection<T>>(props: GridStateOptions<T, C>): GridState<T, C> {\n  let {collection, focusMode} = props;\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n      props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n    , [props.disabledKeys]);\n\n  let setFocusedKey = selectionState.setFocusedKey;\n  selectionState.setFocusedKey = (key, child) => {\n    // If focusMode is cell and an item is focused, focus a child cell instead.\n    if (focusMode === 'cell' && key != null) {\n      let item = collection.getItem(key);\n      if (item?.type === 'item') {\n        let children = [...item.childNodes];\n        if (child === 'last') {\n          key = children[children.length - 1]?.key;\n        } else {\n          key = children[0]?.key;\n        }\n      }\n    }\n\n    setFocusedKey(key, child);\n  };\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [collection, selectionState]);\n\n  return {\n    collection,\n    disabledKeys,\n    isKeyboardNavigationDisabled: false,\n    selectionManager: new SelectionManager(collection, selectionState)\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {GridNode, GridRow, GridCollection as IGridCollection} from '@react-types/grid';\nimport {Key} from 'react';\n\n\ninterface GridCollectionOptions<T> {\n  columnCount: number,\n  items: GridRow<T>[],\n  visitNode?: (cell: GridNode<T>) => GridNode<T>\n}\n\nexport class GridCollection<T> implements IGridCollection<T> {\n  keyMap: Map<Key, GridNode<T>> = new Map();\n  columnCount: number;\n  rows: GridNode<T>[];\n\n  constructor(opts?: GridCollectionOptions<T>) {\n    this.keyMap = new Map();\n    this.columnCount = opts?.columnCount;\n    this.rows = [];\n\n    let visit = (node: GridNode<T>) => {\n      // If the node is the same object as the previous node for the same key,\n      // we can skip this node and its children. We always visit columns though,\n      // because we depend on order to build the columns array.\n      let prevNode = this.keyMap.get(node.key);\n      if (opts.visitNode) {\n        node = opts.visitNode(node);\n      }\n\n      this.keyMap.set(node.key, node);\n\n      let childKeys = new Set();\n      let last: GridNode<T>;\n      for (let child of node.childNodes) {\n        if (child.type === 'cell' && child.parentKey == null) {\n          // if child is a cell parent key isn't already established by the collection, match child node to parent row\n          child.parentKey = node.key;\n        }\n        childKeys.add(child.key);\n\n        if (last) {\n          last.nextKey = child.key;\n          child.prevKey = last.key;\n        } else {\n          child.prevKey = null;\n        }\n\n        visit(child);\n        last = child;\n      }\n\n      if (last) {\n        last.nextKey = null;\n      }\n\n      // Remove deleted nodes and their children from the key map\n      if (prevNode) {\n        for (let child of prevNode.childNodes) {\n          if (!childKeys.has(child.key)) {\n            remove(child);\n          }\n        }\n      }\n    };\n\n    let remove = (node: GridNode<T>) => {\n      this.keyMap.delete(node.key);\n      for (let child of node.childNodes) {\n        if (this.keyMap.get(child.key) === child) {\n          remove(child);\n        }\n      }\n    };\n\n    let last: GridNode<T>;\n    opts.items.forEach((node, i) => {\n      let rowNode = {\n        level: 0,\n        key: 'row-' + i,\n        type: 'row',\n        value: undefined,\n        hasChildNodes: true,\n        childNodes: [...node.childNodes],\n        rendered: undefined,\n        textValue: undefined,\n        ...node,\n        index: i\n      } as GridNode<T>;\n\n      if (last) {\n        last.nextKey = rowNode.key;\n        rowNode.prevKey = last.key;\n      } else {\n        rowNode.prevKey = null;\n      }\n\n      this.rows.push(rowNode);\n      visit(rowNode);\n\n      last = rowNode;\n    });\n\n    if (last) {\n      last.nextKey = null;\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* [...this.rows];\n  }\n\n  get size() {\n    return [...this.rows].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.rows][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.rows];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}