{"ast":null,"code":"'use strict';\n\nlet zlib = require('zlib');\nclass Encoder {\n  constructor(encoders) {\n    this._encoders = encoders;\n  }\n  serializeRequest(request) {\n    let contentType = request.headers['content-type'];\n    if (!contentType) {\n      throw new Error('HttpRequest does not have Content-Type header set');\n    }\n    let encoder = this._encoder(contentType);\n    if (!encoder) {\n      throw new Error(`Unable to serialize request with Content-Type ${contentType}. Supported encodings are ${this.supportedEncodings()}`);\n    }\n    let contentEncoding = request.headers['content-encoding'];\n    let encoded = encoder.encode(request);\n    if (contentEncoding === 'gzip') {\n      return zlib.gzipSync(encoded);\n    }\n    return encoded;\n  }\n  deserializeResponse(responseBody, headers) {\n    let contentType = headers['content-type'];\n    if (!contentType) {\n      throw new Error('HttpRequest does not have Content-Type header set');\n    }\n    // Forcing Lowercase to ensure deserializing happens properly\n    contentType = contentType.toLowerCase();\n    let encoder = this._encoder(contentType);\n    if (!encoder) {\n      throw new Error(`Unable to deserialize response with Content-Type ${contentType}. Supported decodings are ${this.supportedEncodings()}`);\n    }\n    return encoder.decode(responseBody);\n  }\n  supportedEncodings() {\n    return '[' + this._encoders.map(e => e.contentType().toString()).join(', ') + ']';\n  }\n  _encoder(contentType) {\n    for (let i = 0; i < this._encoders.length; i++) {\n      let enc = this._encoders[i];\n      if (enc.contentType().test(contentType)) {\n        return enc;\n      }\n    }\n    return null;\n  }\n}\nmodule.exports = {\n  Encoder: Encoder\n};","map":{"version":3,"names":["zlib","require","Encoder","constructor","encoders","_encoders","serializeRequest","request","contentType","headers","Error","encoder","_encoder","supportedEncodings","contentEncoding","encoded","encode","gzipSync","deserializeResponse","responseBody","toLowerCase","decode","map","e","toString","join","i","length","enc","test","module","exports"],"sources":["C:/Users/gonca/my-app/node_modules/@paypal/paypalhttp/lib/paypalhttp/encoder.js"],"sourcesContent":["'use strict';\n\nlet zlib = require('zlib');\n\nclass Encoder {\n\n  constructor(encoders) {\n    this._encoders = encoders;\n  }\n\n  serializeRequest(request) {\n    let contentType = request.headers['content-type'];\n\n    if (!contentType) {\n      throw new Error('HttpRequest does not have Content-Type header set');\n    }\n\n    let encoder = this._encoder(contentType);\n\n    if (!encoder) {\n      throw new Error(`Unable to serialize request with Content-Type ${contentType}. Supported encodings are ${this.supportedEncodings()}`);\n    }\n\n    let contentEncoding = request.headers['content-encoding'];\n    let encoded = encoder.encode(request);\n\n    if (contentEncoding === 'gzip') {\n      return zlib.gzipSync(encoded);\n    }\n\n    return encoded;\n  }\n\n  deserializeResponse(responseBody, headers) {\n    let contentType = headers['content-type'];\n\n    if (!contentType) {\n      throw new Error('HttpRequest does not have Content-Type header set');\n    }\n    // Forcing Lowercase to ensure deserializing happens properly\n    contentType = contentType.toLowerCase();\n\n    let encoder = this._encoder(contentType);\n\n    if (!encoder) {\n      throw new Error(`Unable to deserialize response with Content-Type ${contentType}. Supported decodings are ${this.supportedEncodings()}`);\n    }\n\n    return encoder.decode(responseBody);\n  }\n\n  supportedEncodings() {\n    return '[' + this._encoders.map(e => e.contentType().toString()).join(', ') + ']';\n  }\n\n  _encoder(contentType) {\n    for (let i = 0; i < this._encoders.length; i++) {\n      let enc = this._encoders[i];\n\n      if (enc.contentType().test(contentType)) {\n        return enc;\n      }\n    }\n\n    return null;\n  }\n}\n\nmodule.exports = {Encoder: Encoder};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAE1B,MAAMC,OAAO,CAAC;EAEZC,WAAW,CAACC,QAAQ,EAAE;IACpB,IAAI,CAACC,SAAS,GAAGD,QAAQ;EAC3B;EAEAE,gBAAgB,CAACC,OAAO,EAAE;IACxB,IAAIC,WAAW,GAAGD,OAAO,CAACE,OAAO,CAAC,cAAc,CAAC;IAEjD,IAAI,CAACD,WAAW,EAAE;MAChB,MAAM,IAAIE,KAAK,CAAC,mDAAmD,CAAC;IACtE;IAEA,IAAIC,OAAO,GAAG,IAAI,CAACC,QAAQ,CAACJ,WAAW,CAAC;IAExC,IAAI,CAACG,OAAO,EAAE;MACZ,MAAM,IAAID,KAAK,CAAE,iDAAgDF,WAAY,6BAA4B,IAAI,CAACK,kBAAkB,EAAG,EAAC,CAAC;IACvI;IAEA,IAAIC,eAAe,GAAGP,OAAO,CAACE,OAAO,CAAC,kBAAkB,CAAC;IACzD,IAAIM,OAAO,GAAGJ,OAAO,CAACK,MAAM,CAACT,OAAO,CAAC;IAErC,IAAIO,eAAe,KAAK,MAAM,EAAE;MAC9B,OAAOd,IAAI,CAACiB,QAAQ,CAACF,OAAO,CAAC;IAC/B;IAEA,OAAOA,OAAO;EAChB;EAEAG,mBAAmB,CAACC,YAAY,EAAEV,OAAO,EAAE;IACzC,IAAID,WAAW,GAAGC,OAAO,CAAC,cAAc,CAAC;IAEzC,IAAI,CAACD,WAAW,EAAE;MAChB,MAAM,IAAIE,KAAK,CAAC,mDAAmD,CAAC;IACtE;IACA;IACAF,WAAW,GAAGA,WAAW,CAACY,WAAW,EAAE;IAEvC,IAAIT,OAAO,GAAG,IAAI,CAACC,QAAQ,CAACJ,WAAW,CAAC;IAExC,IAAI,CAACG,OAAO,EAAE;MACZ,MAAM,IAAID,KAAK,CAAE,oDAAmDF,WAAY,6BAA4B,IAAI,CAACK,kBAAkB,EAAG,EAAC,CAAC;IAC1I;IAEA,OAAOF,OAAO,CAACU,MAAM,CAACF,YAAY,CAAC;EACrC;EAEAN,kBAAkB,GAAG;IACnB,OAAO,GAAG,GAAG,IAAI,CAACR,SAAS,CAACiB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACf,WAAW,EAAE,CAACgB,QAAQ,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;EACnF;EAEAb,QAAQ,CAACJ,WAAW,EAAE;IACpB,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACrB,SAAS,CAACsB,MAAM,EAAED,CAAC,EAAE,EAAE;MAC9C,IAAIE,GAAG,GAAG,IAAI,CAACvB,SAAS,CAACqB,CAAC,CAAC;MAE3B,IAAIE,GAAG,CAACpB,WAAW,EAAE,CAACqB,IAAI,CAACrB,WAAW,CAAC,EAAE;QACvC,OAAOoB,GAAG;MACZ;IACF;IAEA,OAAO,IAAI;EACb;AACF;AAEAE,MAAM,CAACC,OAAO,GAAG;EAAC7B,OAAO,EAAEA;AAAO,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}