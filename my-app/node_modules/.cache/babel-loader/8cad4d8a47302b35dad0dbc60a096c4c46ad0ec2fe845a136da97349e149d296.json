{"ast":null,"code":"import _objectSpread from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nvar $488c6ddbf4ef74c2$var$formatterCache = new Map();\nvar $488c6ddbf4ef74c2$var$supportsSignDisplay = false;\ntry {\n  // @ts-ignore\n  $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat(\"de-DE\", {\n    signDisplay: \"exceptZero\"\n  }).resolvedOptions().signDisplay === \"exceptZero\";\n  // eslint-disable-next-line no-empty\n} catch (e) {}\nvar $488c6ddbf4ef74c2$var$supportsUnit = false;\ntry {\n  // @ts-ignore\n  $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat(\"de-DE\", {\n    style: \"unit\",\n    unit: \"degree\"\n  }).resolvedOptions().style === \"unit\";\n  // eslint-disable-next-line no-empty\n} catch (e1) {}\n// Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\nvar $488c6ddbf4ef74c2$var$UNITS = {\n  degree: {\n    narrow: {\n      default: \"\\xb0\",\n      \"ja-JP\": \" 度\",\n      \"zh-TW\": \"度\",\n      \"sl-SI\": \" \\xb0\"\n    }\n  }\n};\nvar $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 = /*#__PURE__*/function () {\n  function $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5);\n    this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options);\n    this.options = options;\n  }\n  _createClass($488c6ddbf4ef74c2$export$cc77c4ff7e8673c5, [{\n    key: \"format\",\n    value: /** Formats a number value as a string, according to the locale and options provided to the constructor. */function format(value) {\n      var res = \"\";\n      if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);else res = this.numberFormatter.format(value);\n      if (this.options.style === \"unit\" && !$488c6ddbf4ef74c2$var$supportsUnit) {\n        var _UNITS_unit;\n        var _this$resolvedOptions = this.resolvedOptions(),\n          unit = _this$resolvedOptions.unit,\n          _this$resolvedOptions2 = _this$resolvedOptions.unitDisplay,\n          unitDisplay = _this$resolvedOptions2 === void 0 ? \"short\" : _this$resolvedOptions2,\n          locale = _this$resolvedOptions.locale;\n        var values = (_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay];\n        res += values[locale] || values.default;\n      }\n      return res;\n    }\n    /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */\n  }, {\n    key: \"formatToParts\",\n    value: function formatToParts(value) {\n      // TODO: implement signDisplay for formatToParts\n      // @ts-ignore\n      return this.numberFormatter.formatToParts(value);\n    }\n    /** Formats a number range as a string. */\n  }, {\n    key: \"formatRange\",\n    value: function formatRange(start, end) {\n      // @ts-ignore\n      if (typeof this.numberFormatter.formatRange === \"function\")\n        // @ts-ignore\n        return this.numberFormatter.formatRange(start, end);\n      if (end < start) throw new RangeError(\"End date must be >= start date\");\n      // Very basic fallback for old browsers.\n      return \"\".concat(this.format(start), \" \\u2013 \").concat(this.format(end));\n    }\n    /** Formats a number range as an array of parts. */\n  }, {\n    key: \"formatRangeToParts\",\n    value: function formatRangeToParts(start, end) {\n      // @ts-ignore\n      if (typeof this.numberFormatter.formatRangeToParts === \"function\")\n        // @ts-ignore\n        return this.numberFormatter.formatRangeToParts(start, end);\n      if (end < start) throw new RangeError(\"End date must be >= start date\");\n      var startParts = this.numberFormatter.formatToParts(start);\n      var endParts = this.numberFormatter.formatToParts(end);\n      return [].concat(_toConsumableArray(startParts.map(function (p) {\n        return _objectSpread(_objectSpread({}, p), {}, {\n          source: \"startRange\"\n        });\n      })), [{\n        type: \"literal\",\n        value: \" – \",\n        source: \"shared\"\n      }], _toConsumableArray(endParts.map(function (p) {\n        return _objectSpread(_objectSpread({}, p), {}, {\n          source: \"endRange\"\n        });\n      })));\n    }\n    /** Returns the resolved formatting options based on the values passed to the constructor. */\n  }, {\n    key: \"resolvedOptions\",\n    value: function resolvedOptions() {\n      var options = this.numberFormatter.resolvedOptions();\n      if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) options = _objectSpread(_objectSpread({}, options), {}, {\n        signDisplay: this.options.signDisplay\n      });\n      if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === \"unit\") options = _objectSpread(_objectSpread({}, options), {}, {\n        style: \"unit\",\n        unit: this.options.unit,\n        unitDisplay: this.options.unitDisplay\n      });\n      return options;\n    }\n  }]);\n  return $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5;\n}();\nfunction $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options = options,\n    numberingSystem = _options.numberingSystem;\n  if (numberingSystem && locale.indexOf(\"-u-nu-\") === -1) locale = \"\".concat(locale, \"-u-nu-\").concat(numberingSystem);\n  if (options.style === \"unit\" && !$488c6ddbf4ef74c2$var$supportsUnit) {\n    var _UNITS_unit;\n    var _options2 = options,\n      unit = _options2.unit,\n      _options2$unitDisplay = _options2.unitDisplay,\n      unitDisplay = _options2$unitDisplay === void 0 ? \"short\" : _options2$unitDisplay;\n    if (!unit) throw new Error('unit option must be provided with style: \"unit\"');\n    if (!((_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay])) throw new Error(\"Unsupported unit \".concat(unit, \" with unitDisplay = \").concat(unitDisplay));\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      style: \"decimal\"\n    });\n  }\n  var cacheKey = locale + (options ? Object.entries(options).sort(function (a, b) {\n    return a[0] < b[0] ? -1 : 1;\n  }).join() : \"\");\n  if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey)) return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);\n  var numberFormatter = new Intl.NumberFormat(locale, options);\n  $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\nfunction $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {\n  if (signDisplay === \"auto\") return numberFormat.format(num);else if (signDisplay === \"never\") return numberFormat.format(Math.abs(num));else {\n    var needsPositiveSign = false;\n    if (signDisplay === \"always\") needsPositiveSign = num > 0 || Object.is(num, 0);else if (signDisplay === \"exceptZero\") {\n      if (Object.is(num, -0) || Object.is(num, 0)) num = Math.abs(num);else needsPositiveSign = num > 0;\n    }\n    if (needsPositiveSign) {\n      var negative = numberFormat.format(-num);\n      var noSign = numberFormat.format(num);\n      // ignore RTL/LTR marker character\n      var minus = negative.replace(noSign, \"\").replace(/\\u200e|\\u061C/, \"\");\n      if (_toConsumableArray(minus).length !== 1) console.warn(\"@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case\");\n      var positive = negative.replace(noSign, \"!!!\").replace(minus, \"+\").replace(\"!!!\", noSign);\n      return positive;\n    } else return numberFormat.format(num);\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp(\"^.*\\\\(.*\\\\).*$\");\nvar $6c7bd7858deea686$var$NUMBERING_SYSTEMS = [\"latn\", \"arab\", \"hanidec\"];\nvar $6c7bd7858deea686$export$cd11ab140839f11d = /*#__PURE__*/function () {\n  function $6c7bd7858deea686$export$cd11ab140839f11d(locale) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, $6c7bd7858deea686$export$cd11ab140839f11d);\n    this.locale = locale;\n    this.options = options;\n  }\n  _createClass($6c7bd7858deea686$export$cd11ab140839f11d, [{\n    key: \"parse\",\n    value:\n    /**\n    * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n    */\n    function parse(value) {\n      return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).parse(value);\n    }\n    /**\n    * Returns whether the given string could potentially be a valid number. This should be used to\n    * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n    * of the minus/plus sign characters can be checked.\n    */\n  }, {\n    key: \"isValidPartialNumber\",\n    value: function isValidPartialNumber(value, minValue, maxValue) {\n      return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n    }\n    /**\n    * Returns a numbering system for which the given string is valid in the current locale.\n    * If no numbering system could be detected, the default numbering system for the current\n    * locale is returned.\n    */\n  }, {\n    key: \"getNumberingSystem\",\n    value: function getNumberingSystem(value) {\n      return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n    }\n  }]);\n  return $6c7bd7858deea686$export$cd11ab140839f11d;\n}();\nvar $6c7bd7858deea686$var$numberParserCache = new Map();\nfunction $6c7bd7858deea686$var$getNumberParserImpl(locale, options, value) {\n  // First try the default numbering system for the provided locale\n  var defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(locale, options);\n  // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n  if (!locale.includes(\"-nu-\") && !defaultParser.isValidPartialNumber(value)) {\n    for (var _i = 0, _$6c7bd7858deea686$va = $6c7bd7858deea686$var$NUMBERING_SYSTEMS; _i < _$6c7bd7858deea686$va.length; _i++) {\n      var numberingSystem = _$6c7bd7858deea686$va[_i];\n      if (numberingSystem !== defaultParser.options.numberingSystem) {\n        var parser = $6c7bd7858deea686$var$getCachedNumberParser(locale + (locale.includes(\"-u-\") ? \"-nu-\" : \"-u-nu-\") + numberingSystem, options);\n        if (parser.isValidPartialNumber(value)) return parser;\n      }\n    }\n  }\n  return defaultParser;\n}\nfunction $6c7bd7858deea686$var$getCachedNumberParser(locale, options) {\n  var cacheKey = locale + (options ? Object.entries(options).sort(function (a, b) {\n    return a[0] < b[0] ? -1 : 1;\n  }).join() : \"\");\n  var parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);\n  if (!parser) {\n    parser = new $6c7bd7858deea686$var$NumberParserImpl(locale, options);\n    $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);\n  }\n  return parser;\n}\n// The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\nvar $6c7bd7858deea686$var$NumberParserImpl = /*#__PURE__*/function () {\n  function $6c7bd7858deea686$var$NumberParserImpl(locale) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, $6c7bd7858deea686$var$NumberParserImpl);\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = $6c7bd7858deea686$var$getSymbols(this.formatter, this.options, options);\n  }\n  _createClass($6c7bd7858deea686$var$NumberParserImpl, [{\n    key: \"parse\",\n    value: function parse(value) {\n      // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n      var fullySanitizedValue = this.sanitize(value);\n      // Remove group characters, and replace decimal points and numerals with ASCII values.\n      fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(fullySanitizedValue, this.symbols.group, \"\").replace(this.symbols.decimal, \".\").replace(this.symbols.minusSign, \"-\").replace(this.symbols.numeral, this.symbols.index);\n      var newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n      if (isNaN(newValue)) return NaN;\n      // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n      if (this.options.currencySign === \"accounting\" && $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value)) newValue = -1 * newValue;\n      // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n      if (this.options.style === \"percent\") {\n        newValue /= 100;\n        var _this_options_maximumFractionDigits;\n        // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n        newValue = +newValue.toFixed(((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) + 2);\n      }\n      return newValue;\n    }\n  }, {\n    key: \"sanitize\",\n    value: function sanitize(value) {\n      // Remove literals and whitespace, which are allowed anywhere in the string\n      value = value.replace(this.symbols.literals, \"\");\n      // Replace the ASCII minus sign with the minus sign used in the current locale\n      // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n      value = value.replace(\"-\", this.symbols.minusSign);\n      // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n      // instead they use the , (44) character or apparently the (1548) character.\n      if (this.options.numberingSystem === \"arab\") {\n        value = value.replace(\",\", this.symbols.decimal);\n        value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n        value = $6c7bd7858deea686$var$replaceAll(value, \".\", this.symbols.group);\n      }\n      // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n      // so allow 'period' as a group char and replace it with a space\n      if (this.options.locale === \"fr-FR\") value = $6c7bd7858deea686$var$replaceAll(value, \".\", String.fromCharCode(8239));\n      return value;\n    }\n  }, {\n    key: \"isValidPartialNumber\",\n    value: function isValidPartialNumber(value) {\n      var minValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -Infinity;\n      var maxValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n      value = this.sanitize(value);\n      // Remove minus or plus sign, which must be at the start of the string.\n      if (value.startsWith(this.symbols.minusSign) && minValue < 0) value = value.slice(this.symbols.minusSign.length);else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) value = value.slice(this.symbols.plusSign.length);\n      // Numbers cannot start with a group separator\n      if (value.startsWith(this.symbols.group)) return false;\n      // Remove numerals, groups, and decimals\n      value = $6c7bd7858deea686$var$replaceAll(value, this.symbols.group, \"\").replace(this.symbols.numeral, \"\").replace(this.symbols.decimal, \"\");\n      // The number is valid if there are no remaining characters\n      return value.length === 0;\n    }\n  }]);\n  return $6c7bd7858deea686$var$NumberParserImpl;\n}();\nvar $6c7bd7858deea686$var$nonLiteralParts = new Set([\"decimal\", \"fraction\", \"integer\", \"minusSign\", \"plusSign\", \"group\"]);\nfunction $6c7bd7858deea686$var$getSymbols(formatter, intlOptions, originalOptions) {\n  var _allParts_find, _posAllParts_find, _allParts_find1, _allParts_find2;\n  // Note: some locale's don't add a group symbol until there is a ten thousands place\n  var allParts = formatter.formatToParts(-10000.111);\n  var posAllParts = formatter.formatToParts(10000.111);\n  var singularParts = formatter.formatToParts(1);\n  var _allParts_find_value;\n  var minusSign = (_allParts_find_value = (_allParts_find = allParts.find(function (p) {\n    return p.type === \"minusSign\";\n  })) === null || _allParts_find === void 0 ? void 0 : _allParts_find.value) !== null && _allParts_find_value !== void 0 ? _allParts_find_value : \"-\";\n  var plusSign = (_posAllParts_find = posAllParts.find(function (p) {\n    return p.type === \"plusSign\";\n  })) === null || _posAllParts_find === void 0 ? void 0 : _posAllParts_find.value;\n  // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  // @ts-ignore\n  if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === \"exceptZero\" || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === \"always\")) plusSign = \"+\";\n  var decimal = (_allParts_find1 = allParts.find(function (p) {\n    return p.type === \"decimal\";\n  })) === null || _allParts_find1 === void 0 ? void 0 : _allParts_find1.value;\n  var group = (_allParts_find2 = allParts.find(function (p) {\n    return p.type === \"group\";\n  })) === null || _allParts_find2 === void 0 ? void 0 : _allParts_find2.value;\n  // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n  var pluralLiterals = allParts.filter(function (p) {\n    return !$6c7bd7858deea686$var$nonLiteralParts.has(p.type);\n  }).map(function (p) {\n    return $6c7bd7858deea686$var$escapeRegex(p.value);\n  });\n  var singularLiterals = singularParts.filter(function (p) {\n    return !$6c7bd7858deea686$var$nonLiteralParts.has(p.type);\n  }).map(function (p) {\n    return $6c7bd7858deea686$var$escapeRegex(p.value);\n  });\n  var sortedLiterals = _toConsumableArray(new Set([].concat(_toConsumableArray(singularLiterals), _toConsumableArray(pluralLiterals)))).sort(function (a, b) {\n    return b.length - a.length;\n  });\n  var literals = sortedLiterals.length === 0 ? new RegExp(\"[\\\\p{White_Space}]\", \"gu\") : new RegExp(\"\".concat(sortedLiterals.join(\"|\"), \"|[\\\\p{White_Space}]\"), \"gu\");\n  // These are for replacing non-latn characters with the latn equivalent\n  var numerals = _toConsumableArray(new Intl.NumberFormat(intlOptions.locale, {\n    useGrouping: false\n  }).format(9876543210)).reverse();\n  var indexes = new Map(numerals.map(function (d, i) {\n    return [d, i];\n  }));\n  var numeral = new RegExp(\"[\".concat(numerals.join(\"\"), \"]\"), \"g\");\n  var index = function index(d) {\n    return String(indexes.get(d));\n  };\n  return {\n    minusSign: minusSign,\n    plusSign: plusSign,\n    decimal: decimal,\n    group: group,\n    literals: literals,\n    numeral: numeral,\n    index: index\n  };\n}\nfunction $6c7bd7858deea686$var$replaceAll(str, find, replace) {\n  // @ts-ignore\n  if (str.replaceAll)\n    // @ts-ignore\n    return str.replaceAll(find, replace);\n  return str.split(find).join(replace);\n}\nfunction $6c7bd7858deea686$var$escapeRegex(string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\nexport { $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 as NumberFormatter, $6c7bd7858deea686$export$cd11ab140839f11d as NumberParser };","map":{"version":3,"mappings":"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","names":["$488c6ddbf4ef74c2$var$formatterCache","Map","$488c6ddbf4ef74c2$var$supportsSignDisplay","Intl","NumberFormat","signDisplay","resolvedOptions","e","$488c6ddbf4ef74c2$var$supportsUnit","style","unit","e1","$488c6ddbf4ef74c2$var$UNITS","degree","narrow","default","$488c6ddbf4ef74c2$export$cc77c4ff7e8673c5","locale","options","numberFormatter","$488c6ddbf4ef74c2$var$getCachedNumberFormatter","value","res","$488c6ddbf4ef74c2$export$711b50b3c525e0f2","format","_UNITS_unit","unitDisplay","values","formatToParts","start","end","formatRange","RangeError","formatRangeToParts","startParts","endParts","map","p","source","type","numberingSystem","indexOf","Error","cacheKey","Object","entries","sort","a","b","join","has","get","set","numberFormat","num","Math","abs","needsPositiveSign","is","negative","noSign","minus","replace","length","console","warn","positive","$6c7bd7858deea686$var$CURRENCY_SIGN_REGEX","RegExp","$6c7bd7858deea686$var$NUMBERING_SYSTEMS","$6c7bd7858deea686$export$cd11ab140839f11d","$6c7bd7858deea686$var$getNumberParserImpl","parse","minValue","maxValue","isValidPartialNumber","$6c7bd7858deea686$var$numberParserCache","defaultParser","$6c7bd7858deea686$var$getCachedNumberParser","includes","parser","$6c7bd7858deea686$var$NumberParserImpl","formatter","symbols","$6c7bd7858deea686$var$getSymbols","fullySanitizedValue","sanitize","$6c7bd7858deea686$var$replaceAll","group","decimal","minusSign","numeral","index","newValue","NaN","isNaN","currencySign","test","_this_options_maximumFractionDigits","toFixed","maximumFractionDigits","literals","String","fromCharCode","Infinity","startsWith","slice","plusSign","$6c7bd7858deea686$var$nonLiteralParts","Set","intlOptions","originalOptions","_allParts_find","_posAllParts_find","_allParts_find1","_allParts_find2","allParts","posAllParts","singularParts","_allParts_find_value","find","pluralLiterals","filter","$6c7bd7858deea686$var$escapeRegex","singularLiterals","sortedLiterals","numerals","useGrouping","reverse","indexes","d","i","str","replaceAll","split","string"],"sources":["C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\number\\dist\\packages\\@internationalized\\number\\src\\index.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\number\\dist\\packages\\@internationalized\\number\\src\\NumberFormatter.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\number\\dist\\packages\\@internationalized\\number\\src\\NumberParser.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {NumberFormatOptions} from './NumberFormatter';\n\nexport {NumberFormatter} from './NumberFormatter';\nexport {NumberParser} from './NumberParser';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.NumberFormat>();\n\nlet supportsSignDisplay = false;\ntry {\n  // @ts-ignore\n  supportsSignDisplay = (new Intl.NumberFormat('de-DE', {signDisplay: 'exceptZero'})).resolvedOptions().signDisplay === 'exceptZero';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\nlet supportsUnit = false;\ntry {\n  // @ts-ignore\n  supportsUnit = (new Intl.NumberFormat('de-DE', {style: 'unit', unit: 'degree'})).resolvedOptions().style === 'unit';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\n// Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\nconst UNITS = {\n  degree: {\n    narrow: {\n      default: '°',\n      'ja-JP': ' 度',\n      'zh-TW': '度',\n      'sl-SI': ' °'\n      // Arabic?? But Safari already doesn't use Arabic digits so might be ok...\n      // https://bugs.webkit.org/show_bug.cgi?id=218139\n    }\n  }\n};\n\nexport interface NumberFormatOptions extends Intl.NumberFormatOptions {\n  /** Overrides default numbering system for the current locale. */\n  numberingSystem?: string\n}\n\ninterface NumberRangeFormatPart extends Intl.NumberFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/**\n * A wrapper around Intl.NumberFormat providing additional options, polyfills, and caching for performance.\n */\nexport class NumberFormatter implements Intl.NumberFormat {\n  private numberFormatter: Intl.NumberFormat;\n  private options: NumberFormatOptions;\n\n  constructor(locale: string, options: NumberFormatOptions = {}) {\n    this.numberFormatter = getCachedNumberFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a number value as a string, according to the locale and options provided to the constructor. */\n  format(value: number): string {\n    let res = '';\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      res = numberFormatSignDisplayPolyfill(this.numberFormatter, this.options.signDisplay, value);\n    } else {\n      res = this.numberFormatter.format(value);\n    }\n\n    if (this.options.style === 'unit' && !supportsUnit) {\n      let {unit, unitDisplay = 'short', locale} = this.resolvedOptions();\n      let values = UNITS[unit]?.[unitDisplay];\n      res += values[locale] || values.default;\n    }\n\n    return res;\n  }\n\n  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */\n  formatToParts(value: number): Intl.NumberFormatPart[] {\n    // TODO: implement signDisplay for formatToParts\n    // @ts-ignore\n    return this.numberFormatter.formatToParts(value);\n  }\n\n  /** Formats a number range as a string. */\n  formatRange(start: number, end: number): string {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.numberFormatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.format(start)} – ${this.format(end)}`;\n  }\n\n  /** Formats a number range as an array of parts. */\n  formatRangeToParts(start: number, end: number): NumberRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.numberFormatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.numberFormatter.formatToParts(start);\n    let endParts = this.numberFormatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as NumberRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as NumberRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): Intl.ResolvedNumberFormatOptions {\n    let options = this.numberFormatter.resolvedOptions();\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      options = {...options, signDisplay: this.options.signDisplay};\n    }\n\n    if (!supportsUnit && this.options.style === 'unit') {\n      options = {...options, style: 'unit', unit: this.options.unit, unitDisplay: this.options.unitDisplay};\n    }\n\n    return options;\n  }\n}\n\nfunction getCachedNumberFormatter(locale: string, options: NumberFormatOptions = {}): Intl.NumberFormat {\n  let {numberingSystem} = options;\n  if (numberingSystem && locale.indexOf('-u-nu-') === -1) {\n    locale = `${locale}-u-nu-${numberingSystem}`;\n  }\n\n  if (options.style === 'unit' && !supportsUnit) {\n    let {unit, unitDisplay = 'short'} = options;\n    if (!unit) {\n      throw new Error('unit option must be provided with style: \"unit\"');\n    }\n    if (!UNITS[unit]?.[unitDisplay]) {\n      throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);\n    }\n    options = {...options, style: 'decimal'};\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.NumberFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\n/** @private - exported for tests */\nexport function numberFormatSignDisplayPolyfill(numberFormat: Intl.NumberFormat, signDisplay: string, num: number) {\n  if (signDisplay === 'auto') {\n    return numberFormat.format(num);\n  } else if (signDisplay === 'never') {\n    return numberFormat.format(Math.abs(num));\n  } else {\n    let needsPositiveSign = false;\n    if (signDisplay === 'always') {\n      needsPositiveSign = num > 0 || Object.is(num, 0);\n    } else if (signDisplay === 'exceptZero') {\n      if (Object.is(num, -0) || Object.is(num, 0)) {\n        num = Math.abs(num);\n      } else {\n        needsPositiveSign = num > 0;\n      }\n    }\n\n    if (needsPositiveSign) {\n      let negative = numberFormat.format(-num);\n      let noSign = numberFormat.format(num);\n      // ignore RTL/LTR marker character\n      let minus = negative.replace(noSign, '').replace(/\\u200e|\\u061C/, '');\n      if ([...minus].length !== 1) {\n        console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');\n      }\n      let positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);\n      return positive;\n    } else {\n      return numberFormat.format(num);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\ninterface Symbols {\n  minusSign: string,\n  plusSign: string,\n  decimal: string,\n  group: string,\n  literals: RegExp,\n  numeral: RegExp,\n  index: (v: string) => string\n}\n\nconst CURRENCY_SIGN_REGEX = new RegExp('^.*\\\\(.*\\\\).*$');\nconst NUMBERING_SYSTEMS = ['latn', 'arab', 'hanidec'];\n\n/**\n * A NumberParser can be used to perform locale-aware parsing of numbers from Unicode strings,\n * as well as validation of partial user input. It automatically detects the numbering system\n * used in the input, and supports parsing decimals, percentages, currency values, and units\n * according to the locale.\n */\nexport class NumberParser {\n  private locale: string;\n  private options: Intl.NumberFormatOptions;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.locale = locale;\n    this.options = options;\n  }\n\n  /**\n   * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n   */\n  parse(value: string): number {\n    return getNumberParserImpl(this.locale, this.options, value).parse(value);\n  }\n\n  /**\n   * Returns whether the given string could potentially be a valid number. This should be used to\n   * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n   * of the minus/plus sign characters can be checked.\n   */\n  isValidPartialNumber(value: string, minValue?: number, maxValue?: number): boolean {\n    return getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n  }\n\n  /**\n   * Returns a numbering system for which the given string is valid in the current locale.\n   * If no numbering system could be detected, the default numbering system for the current\n   * locale is returned.\n   */\n  getNumberingSystem(value: string): string {\n    return getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n  }\n}\n\nconst numberParserCache = new Map<string, NumberParserImpl>();\nfunction getNumberParserImpl(locale: string, options: Intl.NumberFormatOptions, value: string) {\n  // First try the default numbering system for the provided locale\n  let defaultParser = getCachedNumberParser(locale, options);\n\n  // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n  if (!locale.includes('-nu-') && !defaultParser.isValidPartialNumber(value)) {\n    for (let numberingSystem of NUMBERING_SYSTEMS) {\n      if (numberingSystem !== defaultParser.options.numberingSystem) {\n        let parser = getCachedNumberParser(locale + (locale.includes('-u-') ? '-nu-' : '-u-nu-') + numberingSystem, options);\n        if (parser.isValidPartialNumber(value)) {\n          return parser;\n        }\n      }\n    }\n  }\n\n  return defaultParser;\n}\n\nfunction getCachedNumberParser(locale: string, options: Intl.NumberFormatOptions) {\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  let parser = numberParserCache.get(cacheKey);\n  if (!parser) {\n    parser = new NumberParserImpl(locale, options);\n    numberParserCache.set(cacheKey, parser);\n  }\n\n  return parser;\n}\n\n// The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\nclass NumberParserImpl {\n  formatter: Intl.NumberFormat;\n  options: Intl.ResolvedNumberFormatOptions;\n  symbols: Symbols;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = getSymbols(this.formatter, this.options, options);\n  }\n\n  parse(value: string) {\n    // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n    let fullySanitizedValue = this.sanitize(value);\n\n    // Remove group characters, and replace decimal points and numerals with ASCII values.\n    fullySanitizedValue = replaceAll(fullySanitizedValue, this.symbols.group, '')\n      .replace(this.symbols.decimal, '.')\n      .replace(this.symbols.minusSign, '-')\n      .replace(this.symbols.numeral, this.symbols.index);\n\n    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n    if (isNaN(newValue)) {\n      return NaN;\n    }\n\n    // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n    if (this.options.currencySign === 'accounting' && CURRENCY_SIGN_REGEX.test(value)) {\n      newValue = -1 * newValue;\n    }\n\n    // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n    if (this.options.style === 'percent') {\n      newValue /= 100;\n      // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n      newValue = +newValue.toFixed((this.options.maximumFractionDigits ?? 0) + 2);\n    }\n\n    return newValue;\n  }\n\n  sanitize(value: string) {\n    // Remove literals and whitespace, which are allowed anywhere in the string\n    value = value.replace(this.symbols.literals, '');\n\n    // Replace the ASCII minus sign with the minus sign used in the current locale\n    // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n    value = value.replace('-', this.symbols.minusSign);\n\n    // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n    // instead they use the , (44) character or apparently the (1548) character.\n    if (this.options.numberingSystem === 'arab') {\n      value = value.replace(',', this.symbols.decimal);\n      value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n      value = replaceAll(value, '.', this.symbols.group);\n    }\n\n    // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n    // so allow 'period' as a group char and replace it with a space\n    if (this.options.locale === 'fr-FR') {\n      value = replaceAll(value, '.', String.fromCharCode(8239));\n    }\n\n    return value;\n  }\n\n  isValidPartialNumber(value: string, minValue: number = -Infinity, maxValue: number = Infinity): boolean {\n    value = this.sanitize(value);\n\n    // Remove minus or plus sign, which must be at the start of the string.\n    if (value.startsWith(this.symbols.minusSign) && minValue < 0) {\n      value = value.slice(this.symbols.minusSign.length);\n    } else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) {\n      value = value.slice(this.symbols.plusSign.length);\n    }\n\n    // Numbers cannot start with a group separator\n    if (value.startsWith(this.symbols.group)) {\n      return false;\n    }\n\n    // Remove numerals, groups, and decimals\n    value = replaceAll(value, this.symbols.group, '')\n      .replace(this.symbols.numeral, '')\n      .replace(this.symbols.decimal, '');\n\n    // The number is valid if there are no remaining characters\n    return value.length === 0;\n  }\n}\n\nconst nonLiteralParts = new Set(['decimal', 'fraction', 'integer', 'minusSign', 'plusSign', 'group']);\n\nfunction getSymbols(formatter: Intl.NumberFormat, intlOptions: Intl.ResolvedNumberFormatOptions, originalOptions: Intl.NumberFormatOptions): Symbols {\n  // Note: some locale's don't add a group symbol until there is a ten thousands place\n  let allParts = formatter.formatToParts(-10000.111);\n  let posAllParts = formatter.formatToParts(10000.111);\n  let singularParts = formatter.formatToParts(1);\n\n  let minusSign = allParts.find(p => p.type === 'minusSign')?.value ?? '-';\n  let plusSign = posAllParts.find(p => p.type === 'plusSign')?.value;\n\n  // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  // @ts-ignore\n  if (!plusSign && (originalOptions?.signDisplay === 'exceptZero' || originalOptions?.signDisplay === 'always')) {\n    plusSign = '+';\n  }\n\n  let decimal = allParts.find(p => p.type === 'decimal')?.value;\n  let group = allParts.find(p => p.type === 'group')?.value;\n\n  // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n  let pluralLiterals = allParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let singularLiterals = singularParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let sortedLiterals = [...new Set([...singularLiterals, ...pluralLiterals])].sort((a, b) => b.length - a.length);\n  let literals = sortedLiterals.length === 0 ? \n      new RegExp('[\\\\p{White_Space}]', 'gu') :\n      new RegExp(`${sortedLiterals.join('|')}|[\\\\p{White_Space}]`, 'gu');\n\n  // These are for replacing non-latn characters with the latn equivalent\n  let numerals = [...new Intl.NumberFormat(intlOptions.locale, {useGrouping: false}).format(9876543210)].reverse();\n  let indexes = new Map(numerals.map((d, i) => [d, i]));\n  let numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n  let index = d => String(indexes.get(d));\n\n  return {minusSign, plusSign, decimal, group, literals, numeral, index};\n}\n\nfunction replaceAll(str: string, find: string, replace: string) {\n  // @ts-ignore\n  if (str.replaceAll) {\n    // @ts-ignore\n    return str.replaceAll(find, replace);\n  }\n\n  return str.split(find).join(replace);\n}\n\nfunction escapeRegex(string: string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}