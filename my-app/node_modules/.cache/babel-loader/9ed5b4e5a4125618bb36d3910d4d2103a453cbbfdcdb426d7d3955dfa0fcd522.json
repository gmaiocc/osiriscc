{"ast":null,"code":"import _objectSpread from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/billy/Desktop/my-app/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport $1DoQa$intlmessageformat from \"intl-messageformat\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nvar $d6fd23bc337660df$export$64839e615120df17 = /*#__PURE__*/function () {\n  function $d6fd23bc337660df$export$64839e615120df17(messages) {\n    var defaultLocale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"en-US\";\n    _classCallCheck(this, $d6fd23bc337660df$export$64839e615120df17);\n    // Clone messages so we don't modify the original object.\n    this.messages = _objectSpread({}, messages);\n    this.defaultLocale = defaultLocale;\n  }\n  _createClass($d6fd23bc337660df$export$64839e615120df17, [{\n    key: \"getStringForLocale\",\n    value: function getStringForLocale(key, locale) {\n      var strings = this.messages[locale];\n      if (!strings) {\n        strings = $d6fd23bc337660df$var$getStringsForLocale(locale, this.messages, this.defaultLocale);\n        this.messages[locale] = strings;\n      }\n      var string = strings[key];\n      if (!string) throw new Error(\"Could not find intl message \".concat(key, \" in \").concat(locale, \" locale\"));\n      return string;\n    }\n  }]);\n  return $d6fd23bc337660df$export$64839e615120df17;\n}();\nfunction $d6fd23bc337660df$var$getStringsForLocale(locale, strings) {\n  var defaultLocale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"en-US\";\n  // If there is an exact match, use it.\n  if (strings[locale]) return strings[locale];\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  var language = $d6fd23bc337660df$var$getLanguage(locale);\n  if (strings[language]) return strings[language];\n  for (var key in strings) {\n    if (key.startsWith(language + \"-\")) return strings[key];\n  }\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\nfunction $d6fd23bc337660df$var$getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale)\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  return locale.split(\"-\")[0];\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $972eb555d604f491$export$526ebc05ff964723 = /*#__PURE__*/function () {\n  function $972eb555d604f491$export$526ebc05ff964723(locale, messages) {\n    _classCallCheck(this, $972eb555d604f491$export$526ebc05ff964723);\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n  _createClass($972eb555d604f491$export$526ebc05ff964723, [{\n    key: \"format\",\n    value: function format(key, variables) {\n      var message = this.cache[key];\n      if (!message) {\n        var msg = this.messages.getStringForLocale(key, this.locale);\n        if (!msg) throw new Error(\"Could not find intl message \".concat(key, \" in \").concat(this.locale, \" locale\"));\n        message = new (0, $1DoQa$intlmessageformat)(msg, this.locale);\n        this.cache[key] = message;\n      }\n      var varCopy;\n      if (variables) varCopy = Object.keys(variables).reduce(function (acc, key) {\n        acc[key] = variables[key] == null ? false : variables[key];\n        return acc;\n      }, {});\n      return message.format(varCopy);\n    }\n  }]);\n  return $972eb555d604f491$export$526ebc05ff964723;\n}();\nexport { $d6fd23bc337660df$export$64839e615120df17 as MessageDictionary, $972eb555d604f491$export$526ebc05ff964723 as MessageFormatter };","map":{"version":3,"mappings":";;;;;AAAA;;;;;;;;;;ACAA,GDAA,CCAA;;;;;;;;;;;AAAA,IAsBaA;EAIX,mDAAYC,QAA0B,EAAmC;IAAA,IAAjCC,oFAAwB,OAAO;IAAA;IACrE;IACA,IAAI,CAACD,QAAQ,qBAAOA,QAAQ;IAC5B,IAAI,CAACC,aAAa,GAAGA;EACvB;EAAA;IAAA;IAAA,OAEA,4BAAmBC,GAAW,EAAEC,MAAc,EAAE;MAC9C,IAAIC,UAAU,IAAI,CAACJ,QAAQ,CAACG,OAAO;MACnC,IAAI,CAACC,SAAS;QACZA,UAAUC,0CAAoBF,QAAQ,IAAI,CAACH,QAAQ,EAAE,IAAI,CAACC,aAAa;QACvE,IAAI,CAACD,QAAQ,CAACG,OAAO,GAAGC;MAC1B;MAEA,IAAIE,SAASF,OAAO,CAACF,IAAI;MACzB,IAAI,CAACI,QACH,MAAM,IAAIC,4CAAqCL,oBAAUC,mBAAe;MAG1E,OAAOG;IACT;EAAA;EAAA;AAAA;AAGF,SAASD,0CAAoBF,MAAc,EAAEC,OAAyB,EAA2B;EAAA,IAAzBH,oFAAgB,OAAO;EAC7F;EACA,IAAIG,OAAO,CAACD,OAAO,EACjB,OAAOC,OAAO,CAACD,OAAO;EAGxB;EACA;EACA;EACA;EACA;EACA,IAAIK,WAAWC,kCAAYN;EAC3B,IAAIC,OAAO,CAACI,SAAS,EACnB,OAAOJ,OAAO,CAACI,SAAS;EAG1B,KAAK,IAAIN,OAAOE,SAAS;IACvB,IAAIF,IAAIQ,UAAU,CAACF,WAAW,MAC5B,OAAOJ,OAAO,CAACF,IAAI;EAEvB;EAEA;EACA,OAAOE,OAAO,CAACH,cAAc;AAC/B;AAEA,SAASQ,kCAAYN,MAAc,EAAE;EACnC;EACA,IAAIQ,KAAKC,MAAM;IACb;IACA,OAAO,IAAID,KAAKC,MAAM,CAACT,QAAQK,QAAQ;EAGzC,OAAOL,OAAOU,KAAK,CAAC,IAAI,CAAC,EAAE;AAC7B;;AClFA;;;;;;;;;;;AAAA,IAmBaC;EAKX,mDAAYX,MAAc,EAAEH,QAA2B,EAAE;IAAA;IACvD,IAAI,CAACG,MAAM,GAAGA;IACd,IAAI,CAACH,QAAQ,GAAGA;IAChB,IAAI,CAACe,KAAK,GAAG,CAAC;EAChB;EAAA;IAAA;IAAA,OAEA,gBAAiBb,GAAW,EAAEc,SAA6G,EAAE;MAC3I,IAAIC,UAAU,IAAI,CAACF,KAAK,CAACb,IAAI;MAC7B,IAAI,CAACe,SAAS;QACZ,IAAIC,MAAM,IAAI,CAAClB,QAAQ,CAACmB,kBAAkB,CAACjB,KAAK,IAAI,CAACC,MAAM;QAC3D,IAAI,CAACe,KACH,MAAM,IAAIX,4CAAqCL,oBAAU,IAAI,CAACC,MAAM,aAAS;QAG/Ec,UAAU,KAAI,2BAAgB,EAAEC,KAAK,IAAI,CAACf,MAAM;QAChD,IAAI,CAACY,KAAK,CAACb,IAAI,GAAGe;MACpB;MACA,IAAIG;MACJ,IAAIJ,WACFI,UAAUC,OAAOC,IAAI,CAACN,WAAWO,MAAM,CAAC,UAACC,KAAKtB,KAAQ;QACpDsB,GAAG,CAACtB,IAAI,GAAGc,SAAS,CAACd,IAAI,IAAI,IAAI,GAAG,KAAK,GAAGc,SAAS,CAACd,IAAI;QAC1D,OAAOsB;MACT,GAAG,CAAC;MAGN,OAAOP,QAAQQ,MAAM,CAACL;IACxB;EAAA;EAAA;AAAA","names":["$d6fd23bc337660df$export$64839e615120df17","messages","defaultLocale","key","locale","strings","$d6fd23bc337660df$var$getStringsForLocale","string","Error","language","$d6fd23bc337660df$var$getLanguage","startsWith","Intl","Locale","split","$972eb555d604f491$export$526ebc05ff964723","cache","variables","message","msg","getStringForLocale","varCopy","Object","keys","reduce","acc","format"],"sources":["C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\message\\dist\\packages\\@internationalized\\message\\src\\index.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\message\\dist\\packages\\@internationalized\\message\\src\\MessageDictionary.ts","C:\\Users\\billy\\Desktop\\my-app\\my-app\\node_modules\\@internationalized\\message\\dist\\packages\\@internationalized\\message\\src\\MessageFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {LocalizedStrings} from './MessageDictionary';\nexport {MessageDictionary} from './MessageDictionary';\nexport {MessageFormatter} from './MessageFormatter';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type LocalizedStrings = {\n  [lang: string]: {\n    [key: string]: string\n  }\n};\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class MessageDictionary {\n  private messages: LocalizedStrings;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    this.messages = {...messages};\n    this.defaultLocale = defaultLocale;\n  }\n\n  getStringForLocale(key: string, locale: string) {\n    let strings = this.messages[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n}\n\nfunction getStringsForLocale(locale: string, strings: LocalizedStrings, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  if (strings[language]) {\n    return strings[language];\n  }\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FormatXMLElementFn, PrimitiveType} from 'intl-messageformat/src/formatters';\nimport IntlMessageFormat from 'intl-messageformat';\nimport {MessageDictionary} from './MessageDictionary';\n\n/**\n * Formats ICU Message strings to create localized strings from a MessageDictionary.\n */\nexport class MessageFormatter {\n  private locale: string;\n  private messages: MessageDictionary;\n  private cache: {[key: string]: IntlMessageFormat};\n\n  constructor(locale: string, messages: MessageDictionary) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n\n  format<T = void>(key: string, variables: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined) {\n    let message = this.cache[key];\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) {\n        throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      }\n\n      message = new IntlMessageFormat(msg, this.locale);\n      this.cache[key] = message;\n    }\n    let varCopy: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined;\n    if (variables) {\n      varCopy = Object.keys(variables).reduce((acc, key) => {\n        acc[key] = variables[key] == null ? false : variables[key];\n        return acc;\n      }, {});\n    }\n\n    return message.format(varCopy);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}