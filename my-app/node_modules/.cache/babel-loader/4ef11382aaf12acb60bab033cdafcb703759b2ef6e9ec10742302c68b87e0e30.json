{"ast":null,"code":"import _objectSpread from \"C:/Users/gonca/Downloads/my-app/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/gonca/Downloads/my-app/my-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"elementType\", \"onPress\", \"onPressStart\", \"onPressEnd\", \"onClick\", \"isDisabled\"];\nimport { filterDOMProps as $kKV4x$filterDOMProps, mergeProps as $kKV4x$mergeProps } from \"@react-aria/utils\";\nimport { useFocusable as $kKV4x$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $kKV4x$usePress } from \"@react-aria/interactions\";\nfunction $298d61e98472621b$export$dcf14c9974fe2767(props, ref) {\n  var _props$elementType = props.elementType,\n    elementType = _props$elementType === void 0 ? 'a' : _props$elementType,\n    onPress = props.onPress,\n    onPressStart = props.onPressStart,\n    onPressEnd = props.onPressEnd,\n    deprecatedOnClick = props.onClick,\n    isDisabled = props.isDisabled,\n    otherProps = _objectWithoutProperties(props, _excluded);\n  var linkProps;\n  if (elementType !== 'a') linkProps = {\n    role: 'link',\n    tabIndex: !isDisabled ? 0 : undefined\n  };\n  var _$kKV4x$useFocusable = $kKV4x$useFocusable(props, ref),\n    focusableProps = _$kKV4x$useFocusable.focusableProps;\n  var _$kKV4x$usePress = $kKV4x$usePress({\n      onPress: onPress,\n      onPressStart: onPressStart,\n      onPressEnd: onPressEnd,\n      isDisabled: isDisabled,\n      ref: ref\n    }),\n    pressProps = _$kKV4x$usePress.pressProps,\n    isPressed = _$kKV4x$usePress.isPressed;\n  var domProps = $kKV4x$filterDOMProps(otherProps, {\n    labelable: true\n  });\n  var interactionHandlers = $kKV4x$mergeProps(focusableProps, pressProps);\n  return {\n    isPressed: isPressed,\n    linkProps: $kKV4x$mergeProps(domProps, _objectSpread(_objectSpread(_objectSpread({}, interactionHandlers), linkProps), {}, {\n      'aria-disabled': isDisabled || undefined,\n      onClick: function onClick(e) {\n        pressProps.onClick(e);\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    }))\n  };\n}\nexport { $298d61e98472621b$export$dcf14c9974fe2767 as useLink };","map":{"version":3,"mappings":";;;;;;SAyCgBA,yCAAO,CAACC,KAAsB,EAAEC,GAAgC,EAAY;EAC1F,yBASID,KAAK,CATJE;IACHA,WAAW,mCAAG,GAAG;IACjBC,OAAO,GAOLH,KAAK,CARUG;IAEjBC,YAAY,GAMVJ,KAAK,CAPAI;IAEPC,UAAU,GAKRL,KAAK,CANKK;IAGHC,iBAAiB,GAGxBN,KAAK,CAHPO,OAAO;IACPC,UAAU,GAERR,KAAK,CAHmBQ;IAEvBC,UAAU,4BACXT,KAAK;EAET,IAAIU,SAAS;EACb,IAAIR,WAAW,KAAK,GAAG,EACrBQ,SAAS,GAAG;IACVC,IAAI,EAAE,MAAM;IACZC,QAAQ,GAAGJ,UAAU,GAAG,CAAC,GAAGK;EAC9B,CAAC;EAEH,2BAAuBC,mBAAY,CAACd,KAAK,EAAEC,GAAG;IAAzCc,cAAc,wBAAdA;EACL,uBAA8BC,eAAQ,CAAC;eAACb,OAAO;oBAAEC,YAAY;kBAAEC,UAAU;kBAAEG,UAAU;WAAEP;IAAG,CAAC;IAAtFgB,UAAU,oBAAVA;IAAYC,SAAS,oBAAXA;EACf,IAAIC,QAAQ,GAAGC,qBAAc,CAACX,UAAU,EAAE;IAACY,SAAS,EAAE;EAAI,CAAC;EAC3D,IAAIC,mBAAmB,GAAGC,iBAAU,CAACR,cAAc,EAAEE,UAAU;EAE/D,OAAO;eACLC,SAAS;IACTR,SAAS,EAAEa,iBAAU,CAACJ,QAAQ,gDACzBG,mBAAmB,GACnBZ,SAAS;MACZ,eAAe,EAAEF,UAAU,IAAIK,SAAS;MACxCN,OAAO,mBAAGiB,CAAC,EAAK;QACdP,UAAU,CAACV,OAAO,CAACiB,CAAC;QACpB,IAAIlB,iBAAiB,EAAE;UACrBA,iBAAiB,CAACkB,CAAC;UACnBC,OAAO,CAACC,IAAI,CAAC,2CAA2C;QAC1D;MACF;IAAC;EAEL,CAAC;AACH","names":["$298d61e98472621b$export$dcf14c9974fe2767","props","ref","elementType","onPress","onPressStart","onPressEnd","deprecatedOnClick","onClick","isDisabled","otherProps","linkProps","role","tabIndex","undefined","$kKV4x$useFocusable","focusableProps","$kKV4x$usePress","pressProps","isPressed","domProps","$kKV4x$filterDOMProps","labelable","interactionHandlers","$kKV4x$mergeProps","e","console","warn"],"sources":["C:\\Users\\gonca\\Downloads\\my-app\\my-app\\node_modules\\@react-aria\\link\\dist\\packages\\@react-aria\\link\\src\\useLink.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLinkProps} from '@react-types/link';\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {RefObject} from 'react';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface AriaLinkOptions extends AriaLinkProps {\n  /** Whether the link is disabled. */\n  isDisabled?: boolean,\n  /**\n   * The HTML element used to render the link, e.g. 'a', or 'span'.\n   * @default 'a'\n   */\n  elementType?: string\n}\n\nexport interface LinkAria {\n  /** Props for the link element. */\n  linkProps: DOMAttributes,\n  /** Whether the link is currently pressed. */\n  isPressed: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for a link component.\n * A link allows a user to navigate to another page or resource within a web page\n * or application.\n */\nexport function useLink(props: AriaLinkOptions, ref: RefObject<FocusableElement>): LinkAria {\n  let {\n    elementType = 'a',\n    onPress,\n    onPressStart,\n    onPressEnd,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    isDisabled,\n    ...otherProps\n  } = props;\n\n  let linkProps: DOMAttributes;\n  if (elementType !== 'a') {\n    linkProps = {\n      role: 'link',\n      tabIndex: !isDisabled ? 0 : undefined\n    };\n  }\n  let {focusableProps} = useFocusable(props, ref);\n  let {pressProps, isPressed} = usePress({onPress, onPressStart, onPressEnd, isDisabled, ref});\n  let domProps = filterDOMProps(otherProps, {labelable: true});\n  let interactionHandlers = mergeProps(focusableProps, pressProps);\n\n  return {\n    isPressed, // Used to indicate press state for visual\n    linkProps: mergeProps(domProps, {\n      ...interactionHandlers,\n      ...linkProps,\n      'aria-disabled': isDisabled || undefined,\n      onClick: (e) => {\n        pressProps.onClick(e);\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}